{"ast":null,"code":"// src/serialization/bcsSerialization.ts\nimport { Deserializer, Hex } from \"@aptos-labs/ts-sdk\";\nimport { BCS } from \"aptos\";\nfunction isBcsSerializableV1(value) {\n  return value?.serialize !== void 0;\n}\nfunction isBcsSerializableV2(value) {\n  return value?.serialize !== void 0 && value?.bcsToBytes !== void 0 && value?.bcsToHex !== void 0;\n}\nfunction isBcsSerializable(value) {\n  return isBcsSerializableV1(value) || isBcsSerializableV2(value);\n}\nfunction bcsSerialize(serializable) {\n  if (isBcsSerializableV2(serializable)) {\n    return serializable.bcsToHex().toString();\n  }\n  const serializedValueBytes = BCS.bcsToBytes(serializable);\n  return Hex.fromHexInput(serializedValueBytes).toString();\n}\nfunction bcsDeserialize(deserializableClass, serializedValue) {\n  const serializedValueBytes = Hex.fromHexString(serializedValue).toUint8Array();\n  const deserializer = new Deserializer(serializedValueBytes);\n  return deserializableClass.deserialize(deserializer);\n}\n\n// src/serialization/jsonPayload.ts\nimport { Hex as Hex2 } from \"@aptos-labs/ts-sdk\";\n\n// src/serialization/error.ts\nvar UnexpectedValueError = class _UnexpectedValueError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"UnexpectedValueError\";\n    Object.setPrototypeOf(this, _UnexpectedValueError.prototype);\n  }\n};\n\n// src/serialization/jsonPayload.ts\nfunction isSerializedUint8Array(arg) {\n  return arg?.type === \"Uint8Array\" && typeof arg?.value === \"string\";\n}\nfunction serializeEntryFunctionArg(arg) {\n  if (arg instanceof Uint8Array) {\n    return {\n      type: \"Uint8Array\",\n      value: Hex2.fromHexInput(arg).toString()\n    };\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(serializeEntryFunctionArg);\n  }\n  return arg;\n}\nfunction deserializeEntryFunctionArg(arg) {\n  if (isSerializedUint8Array(arg)) {\n    return Hex2.fromHexInput(arg.value).toUint8Array();\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(deserializeEntryFunctionArg);\n  }\n  return arg;\n}\nfunction serializeEntryFunctionPayload(payload) {\n  const normalizedArgs = payload.arguments.map(serializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: normalizedArgs,\n    type: \"entry_function_payload\"\n  };\n}\nfunction deserializeEntryFunctionPayload(payload) {\n  const deserializedArgs = payload.arguments.map(deserializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: deserializedArgs,\n    type: \"entry_function_payload\"\n  };\n}\nfunction serializeJsonTransactionPayload(payload) {\n  if (payload.type === \"entry_function_payload\" || payload.type === void 0) {\n    return serializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === \"multisig_payload\") {\n    const innerPayload = payload.transaction_payload !== void 0 ? serializeEntryFunctionPayload(payload.transaction_payload) : void 0;\n    return {\n      ...payload,\n      transaction_payload: innerPayload\n    };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeJsonTransactionPayload(payload) {\n  if (payload.type === \"entry_function_payload\" || payload.type === void 0) {\n    return deserializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === \"multisig_payload\") {\n    const innerPayload = payload.transaction_payload !== void 0 ? deserializeEntryFunctionPayload(payload.transaction_payload) : void 0;\n    return {\n      ...payload,\n      transaction_payload: innerPayload\n    };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/rawTxn.ts\nimport { RawTransaction, RawTransactionWithData } from \"@aptos-labs/ts-sdk\";\nfunction serializeRawTransaction(rawTxn) {\n  const value = bcsSerialize(rawTxn);\n  if (\"fee_payer_address\" in rawTxn) {\n    return {\n      type: \"fee_payer_raw_txn\",\n      value\n    };\n  }\n  if (\"secondary_signer_addresses\" in rawTxn) {\n    return {\n      type: \"multi_agent_raw_txn\",\n      value\n    };\n  }\n  if (\"chain_id\" in rawTxn) {\n    return {\n      type: \"raw_txn\",\n      value\n    };\n  }\n  throw new UnexpectedValueError(\"Invalid raw transaction type\");\n}\nfunction deserializeRawTransaction(serialized) {\n  switch (serialized.type) {\n    case \"raw_txn\":\n      return bcsDeserialize(RawTransaction, serialized.value);\n    case \"fee_payer_raw_txn\":\n      return bcsDeserialize(RawTransactionWithData, serialized.value);\n    case \"multi_agent_raw_txn\":\n      return bcsDeserialize(RawTransactionWithData, serialized.value);\n    default:\n      throw new UnexpectedValueError(\"Invalid raw transaction type\");\n  }\n}\n\n// src/serialization/signAndSubmitTransactionRequestArgs.ts\nimport { AccountAuthenticator, TransactionPayload } from \"@aptos-labs/ts-sdk\";\nfunction serializeSignAndSubmitTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const serializedPayload = isBcsSerializable(args.payload) ? bcsSerialize(args.payload) : serializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload: serializedPayload\n    };\n  }\n  if (\"feePayerAuthenticator\" in args) {\n    return {\n      feePayerAuthenticator: bcsSerialize(args.feePayerAuthenticator),\n      rawTxn: serializeRawTransaction(args.rawTxn)\n    };\n  }\n  if (\"rawTxn\" in args) {\n    return {\n      rawTxn: serializeRawTransaction(args.rawTxn)\n    };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeSignAndSubmitTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const payload = typeof args.payload === \"string\" ? bcsDeserialize(TransactionPayload, args.payload) : deserializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload\n    };\n  }\n  if (\"feePayerAuthenticator\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    const feePayerAuthenticator = bcsDeserialize(AccountAuthenticator, args.feePayerAuthenticator);\n    return {\n      feePayerAuthenticator,\n      rawTxn: deserializedRawTxn\n    };\n  }\n  if (\"rawTxn\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return {\n      rawTxn: deserializedRawTxn\n    };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/signTransactionRequestArgs.ts\nimport { TransactionPayload as TransactionPayload2 } from \"@aptos-labs/ts-sdk\";\nfunction serializeSignTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const serializedPayload = isBcsSerializable(args.payload) ? bcsSerialize(args.payload) : serializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload: serializedPayload\n    };\n  }\n  if (\"rawTxn\" in args) {\n    const serializedRawTxn = serializeRawTransaction(args.rawTxn);\n    return {\n      rawTxn: serializedRawTxn\n    };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeSignTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const payload = typeof args.payload === \"string\" ? bcsDeserialize(TransactionPayload2, args.payload) : deserializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload\n    };\n  }\n  if (\"rawTxn\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return {\n      rawTxn: deserializedRawTxn\n    };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/signTransactionResponseArgs.ts\nimport { AccountAuthenticator as AccountAuthenticator2, RawTransaction as RawTransaction2 } from \"@aptos-labs/ts-sdk\";\nfunction serializeSignTransactionResponseArgs(args) {\n  const accountAuthenticator = bcsSerialize(args.accountAuthenticator);\n  if (\"rawTxn\" in args) {\n    const rawTxn = bcsSerialize(args.rawTxn);\n    return {\n      accountAuthenticator,\n      rawTxn\n    };\n  }\n  return {\n    accountAuthenticator\n  };\n}\nfunction deserializeSignTransactionResponseArgs(args) {\n  const accountAuthenticator = bcsDeserialize(AccountAuthenticator2, args.accountAuthenticator);\n  if (\"rawTxn\" in args) {\n    const rawTxn = bcsDeserialize(RawTransaction2, args.rawTxn);\n    return {\n      accountAuthenticator,\n      rawTxn\n    };\n  }\n  return {\n    accountAuthenticator\n  };\n}\n\n// src/utils/makeFullMessage.ts\nvar prefix = \"APTOS\";\nfunction makeFullMessage(params, flags) {\n  let fullMessage = prefix;\n  if (flags.address) {\n    fullMessage += `\naddress: ${params.address}`;\n  }\n  if (flags.application) {\n    fullMessage += `\napplication: ${params.application}`;\n  }\n  if (flags.chainId) {\n    fullMessage += `\nchainId: ${params.chainId}`;\n  }\n  fullMessage += `\nmessage: ${params.message}`;\n  fullMessage += `\nnonce: ${params.nonce}`;\n  return {\n    fullMessage,\n    prefix\n  };\n}\nexport { bcsDeserialize, bcsSerialize, deserializeJsonTransactionPayload, deserializeRawTransaction, deserializeSignAndSubmitTransactionRequestArgs, deserializeSignTransactionRequestArgs, deserializeSignTransactionResponseArgs, isBcsSerializable, makeFullMessage, serializeJsonTransactionPayload, serializeRawTransaction, serializeSignAndSubmitTransactionRequestArgs, serializeSignTransactionRequestArgs, serializeSignTransactionResponseArgs };","map":{"version":3,"names":["Deserializer","Hex","BCS","isBcsSerializableV1","value","serialize","isBcsSerializableV2","bcsToBytes","bcsToHex","isBcsSerializable","bcsSerialize","serializable","toString","serializedValueBytes","fromHexInput","bcsDeserialize","deserializableClass","serializedValue","fromHexString","toUint8Array","deserializer","deserialize","Hex2","UnexpectedValueError","_UnexpectedValueError","Error","constructor","message","name","Object","setPrototypeOf","prototype","isSerializedUint8Array","arg","type","serializeEntryFunctionArg","Uint8Array","Array","isArray","map","deserializeEntryFunctionArg","serializeEntryFunctionPayload","payload","normalizedArgs","arguments","deserializeEntryFunctionPayload","deserializedArgs","serializeJsonTransactionPayload","innerPayload","transaction_payload","deserializeJsonTransactionPayload","RawTransaction","RawTransactionWithData","serializeRawTransaction","rawTxn","deserializeRawTransaction","serialized","AccountAuthenticator","TransactionPayload","serializeSignAndSubmitTransactionRequestArgs","args","serializedPayload","options","feePayerAuthenticator","deserializeSignAndSubmitTransactionRequestArgs","deserializedRawTxn","TransactionPayload2","serializeSignTransactionRequestArgs","serializedRawTxn","deserializeSignTransactionRequestArgs","AccountAuthenticator2","RawTransaction2","serializeSignTransactionResponseArgs","accountAuthenticator","deserializeSignTransactionResponseArgs","prefix","makeFullMessage","params","flags","fullMessage","address","application","chainId","nonce"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\serialization\\bcsSerialization.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\serialization\\jsonPayload.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\serialization\\error.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\serialization\\rawTxn.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\serialization\\signAndSubmitTransactionRequestArgs.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\serialization\\signTransactionRequestArgs.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\serialization\\signTransactionResponseArgs.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@identity-connect\\wallet-api\\src\\utils\\makeFullMessage.ts"],"sourcesContent":["// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Hex, Serializable as BcsSerializableV2 } from '@aptos-labs/ts-sdk';\nimport { BCS } from 'aptos';\n\nexport type BcsSerializableV1 = { serialize(serializer: BCS.Serializer): void };\nexport type BcsDeserializableV1Class<T extends BcsSerializableV1> = {\n  deserialize(deserializer: BCS.Deserializer): T;\n};\nexport type BcsDeserializableV2Class<T extends BcsSerializableV2> = {\n  deserialize(deserializer: Deserializer): T;\n};\n\nfunction isBcsSerializableV1(value: any): value is BcsSerializableV1 {\n  return (value as BcsSerializableV1)?.serialize !== undefined;\n}\n\nfunction isBcsSerializableV2(value: any): value is BcsSerializableV2 {\n  return (\n    (value as BcsSerializableV2)?.serialize !== undefined &&\n    (value as BcsSerializableV2)?.bcsToBytes !== undefined &&\n    (value as BcsSerializableV2)?.bcsToHex !== undefined\n  );\n}\n\n/**\n * Check if a value is BCS serializable\n */\nexport function isBcsSerializable(value: any): value is BcsSerializableV1 | BcsSerializableV2 {\n  return isBcsSerializableV1(value) || isBcsSerializableV2(value);\n}\n\nexport function bcsSerialize(serializable: BcsSerializableV1 | BcsSerializableV2) {\n  if (isBcsSerializableV2(serializable)) {\n    return serializable.bcsToHex().toString();\n  }\n  const serializedValueBytes = BCS.bcsToBytes(serializable);\n  return Hex.fromHexInput(serializedValueBytes).toString();\n}\n\nexport function bcsDeserialize<T extends BcsSerializableV2>(\n  deserializableClass: BcsDeserializableV2Class<T>,\n  serializedValue: string,\n) {\n  const serializedValueBytes = Hex.fromHexString(serializedValue).toUint8Array();\n  const deserializer = new Deserializer(serializedValueBytes);\n  return deserializableClass.deserialize(deserializer);\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Hex } from '@aptos-labs/ts-sdk';\nimport type { EntryFunctionPayloadResponse } from '@aptos-labs/ts-sdk';\nimport type { EntryFunctionJsonTransactionPayload, JsonTransactionPayload } from '../types';\nimport { UnexpectedValueError } from './error';\n\ninterface SerializedUint8ArrayArg {\n  type: 'Uint8Array';\n  value: string;\n}\n\nfunction isSerializedUint8Array(arg: any): arg is SerializedUint8ArrayArg {\n  return arg?.type === 'Uint8Array' && typeof arg?.value === 'string';\n}\n\nfunction serializeEntryFunctionArg(arg: any): any {\n  if (arg instanceof Uint8Array) {\n    return {\n      type: 'Uint8Array',\n      value: Hex.fromHexInput(arg).toString(),\n    };\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(serializeEntryFunctionArg);\n  }\n  return arg;\n}\n\nfunction deserializeEntryFunctionArg(arg: any): any {\n  if (isSerializedUint8Array(arg)) {\n    return Hex.fromHexInput(arg.value).toUint8Array();\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(deserializeEntryFunctionArg);\n  }\n  return arg;\n}\n\nfunction serializeEntryFunctionPayload(payload: EntryFunctionPayloadResponse): EntryFunctionJsonTransactionPayload {\n  const normalizedArgs = payload.arguments.map(serializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: normalizedArgs,\n    type: 'entry_function_payload',\n  };\n}\n\nfunction deserializeEntryFunctionPayload(payload: EntryFunctionPayloadResponse): EntryFunctionJsonTransactionPayload {\n  const deserializedArgs = payload.arguments.map(deserializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: deserializedArgs,\n    type: 'entry_function_payload',\n  };\n}\n\nexport function serializeJsonTransactionPayload(payload: JsonTransactionPayload): JsonTransactionPayload {\n  if (payload.type === 'entry_function_payload' || payload.type === undefined) {\n    return serializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === 'multisig_payload') {\n    const innerPayload =\n      payload.transaction_payload !== undefined\n        ? serializeEntryFunctionPayload(payload.transaction_payload)\n        : undefined;\n    return { ...payload, transaction_payload: innerPayload };\n  }\n  throw new UnexpectedValueError();\n}\n\nexport function deserializeJsonTransactionPayload(payload: JsonTransactionPayload): JsonTransactionPayload {\n  if (payload.type === 'entry_function_payload' || payload.type === undefined) {\n    return deserializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === 'multisig_payload') {\n    const innerPayload =\n      payload.transaction_payload !== undefined\n        ? deserializeEntryFunctionPayload(payload.transaction_payload)\n        : undefined;\n    return { ...payload, transaction_payload: innerPayload };\n  }\n  throw new UnexpectedValueError();\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport class UnexpectedValueError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'UnexpectedValueError';\n    Object.setPrototypeOf(this, UnexpectedValueError.prototype);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  FeePayerRawTransaction,\n  MultiAgentRawTransaction,\n  RawTransaction,\n  RawTransactionWithData,\n} from '@aptos-labs/ts-sdk';\nimport { TxnBuilderTypes } from 'aptos';\nimport { bcsDeserialize, bcsSerialize } from './bcsSerialization';\nimport { UnexpectedValueError } from './error';\n\nexport type SerializableRawTransaction = RawTransaction | FeePayerRawTransaction | MultiAgentRawTransaction;\n\nexport type SerializableRawTransactionV1 =\n  | TxnBuilderTypes.RawTransaction\n  | TxnBuilderTypes.FeePayerRawTransaction\n  | TxnBuilderTypes.MultiAgentRawTransaction;\n\nexport interface SerializedSimpleRawTransaction {\n  type: 'raw_txn';\n  value: string;\n}\n\nexport interface SerializedFeePayerRawTransaction {\n  type: 'fee_payer_raw_txn';\n  value: string;\n}\n\nexport interface SerializedMultiAgentRawTransaction {\n  type: 'multi_agent_raw_txn';\n  value: string;\n}\n\nexport type SerializedRawTransaction =\n  | SerializedSimpleRawTransaction\n  | SerializedFeePayerRawTransaction\n  | SerializedMultiAgentRawTransaction;\n\nexport function serializeRawTransaction(\n  rawTxn: RawTransaction | TxnBuilderTypes.RawTransaction,\n): SerializedSimpleRawTransaction;\nexport function serializeRawTransaction(\n  rawTxn: FeePayerRawTransaction | TxnBuilderTypes.FeePayerRawTransaction,\n): SerializedFeePayerRawTransaction;\nexport function serializeRawTransaction(\n  rawTxn: MultiAgentRawTransaction | TxnBuilderTypes.MultiAgentRawTransaction,\n): SerializedMultiAgentRawTransaction;\nexport function serializeRawTransaction(\n  rawTxn: SerializableRawTransaction | SerializableRawTransactionV1,\n): SerializedRawTransaction;\n\nexport function serializeRawTransaction(\n  rawTxn: SerializableRawTransaction | SerializableRawTransactionV1,\n): SerializedRawTransaction {\n  const value = bcsSerialize(rawTxn);\n  if ('fee_payer_address' in rawTxn) {\n    return { type: 'fee_payer_raw_txn', value };\n  }\n  if ('secondary_signer_addresses' in rawTxn) {\n    return { type: 'multi_agent_raw_txn', value };\n  }\n  if ('chain_id' in rawTxn) {\n    return { type: 'raw_txn', value };\n  }\n  throw new UnexpectedValueError('Invalid raw transaction type');\n}\n\nexport function deserializeRawTransaction(serialized: SerializedSimpleRawTransaction): RawTransaction;\nexport function deserializeRawTransaction(serialized: SerializedFeePayerRawTransaction): FeePayerRawTransaction;\nexport function deserializeRawTransaction(serialized: SerializedMultiAgentRawTransaction): MultiAgentRawTransaction;\nexport function deserializeRawTransaction(serialized: SerializedRawTransaction): SerializableRawTransaction;\n\nexport function deserializeRawTransaction(serialized: SerializedRawTransaction): SerializableRawTransaction {\n  switch (serialized.type) {\n    case 'raw_txn':\n      return bcsDeserialize(RawTransaction, serialized.value);\n    case 'fee_payer_raw_txn':\n      return bcsDeserialize(RawTransactionWithData, serialized.value) as FeePayerRawTransaction;\n    case 'multi_agent_raw_txn':\n      return bcsDeserialize(RawTransactionWithData, serialized.value) as MultiAgentRawTransaction;\n    default:\n      throw new UnexpectedValueError('Invalid raw transaction type');\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAuthenticator, TransactionPayload } from '@aptos-labs/ts-sdk';\nimport type {\n  SignAndSubmitTransactionRequestArgs,\n  SignAndSubmitTransactionRequestV1Args,\n  SignAndSubmitTransactionWithFeePayerRawTxnRequestArgs,\n  SignAndSubmitTransactionWithPayloadRequestArgs,\n  SignAndSubmitTransactionWithRawTxnRequestArgs,\n} from '../types';\nimport { JsonTransactionPayload, TransactionOptions } from '../types';\nimport { bcsDeserialize, bcsSerialize, isBcsSerializable } from './bcsSerialization';\n\nimport { UnexpectedValueError } from './error';\nimport { deserializeJsonTransactionPayload, serializeJsonTransactionPayload } from './jsonPayload';\nimport {\n  deserializeRawTransaction,\n  type SerializedFeePayerRawTransaction,\n  type SerializedSimpleRawTransaction,\n  serializeRawTransaction,\n} from './rawTxn';\n\nexport interface SerializedSignAndSubmitTransactionWithPayloadRequestArgs {\n  options?: TransactionOptions;\n  payload: JsonTransactionPayload | string;\n}\n\nexport interface SerializedSignAndSubmitTransactionWithRawTxnRequestArgs {\n  rawTxn: SerializedSimpleRawTransaction;\n}\n\nexport interface SerializedSignAndSubmitTransactionWithFeePayerRawTxnRequestArgs {\n  feePayerAuthenticator: string;\n  rawTxn: SerializedFeePayerRawTransaction;\n}\n\nexport type SerializedSignAndSubmitTransactionRequestArgs =\n  | SerializedSignAndSubmitTransactionWithPayloadRequestArgs\n  | SerializedSignAndSubmitTransactionWithRawTxnRequestArgs\n  | SerializedSignAndSubmitTransactionWithFeePayerRawTxnRequestArgs;\n\nexport function serializeSignAndSubmitTransactionRequestArgs(\n  args: SignAndSubmitTransactionRequestArgs | SignAndSubmitTransactionRequestV1Args,\n): SerializedSignAndSubmitTransactionRequestArgs {\n  if ('payload' in args) {\n    const serializedPayload = isBcsSerializable(args.payload)\n      ? bcsSerialize(args.payload)\n      : serializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload: serializedPayload };\n  }\n  if ('feePayerAuthenticator' in args) {\n    return {\n      feePayerAuthenticator: bcsSerialize(args.feePayerAuthenticator),\n      rawTxn: serializeRawTransaction(args.rawTxn),\n    };\n  }\n  if ('rawTxn' in args) {\n    return { rawTxn: serializeRawTransaction(args.rawTxn) };\n  }\n  throw new UnexpectedValueError();\n}\n\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionWithPayloadRequestArgs,\n): SignAndSubmitTransactionWithPayloadRequestArgs;\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionWithRawTxnRequestArgs,\n): SignAndSubmitTransactionWithRawTxnRequestArgs;\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionWithFeePayerRawTxnRequestArgs,\n): SignAndSubmitTransactionWithFeePayerRawTxnRequestArgs;\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionRequestArgs,\n): SignAndSubmitTransactionRequestArgs;\n\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionRequestArgs,\n): SignAndSubmitTransactionRequestArgs {\n  if ('payload' in args) {\n    const payload =\n      typeof args.payload === 'string'\n        ? bcsDeserialize(TransactionPayload, args.payload)\n        : deserializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload };\n  }\n  if ('feePayerAuthenticator' in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    const feePayerAuthenticator = bcsDeserialize(AccountAuthenticator, args.feePayerAuthenticator);\n    return { feePayerAuthenticator, rawTxn: deserializedRawTxn };\n  }\n  if ('rawTxn' in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return { rawTxn: deserializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TransactionPayload } from '@aptos-labs/ts-sdk';\nimport type {\n  JsonTransactionPayload,\n  SignTransactionRequestArgs,\n  SignTransactionRequestV1Args,\n  SignTransactionWithPayloadRequestArgs,\n  SignTransactionWithRawTxnRequestArgs,\n  TransactionOptions,\n} from '../types';\nimport { bcsDeserialize, bcsSerialize, isBcsSerializable } from './bcsSerialization';\nimport { UnexpectedValueError } from './error';\nimport { deserializeJsonTransactionPayload, serializeJsonTransactionPayload } from './jsonPayload';\nimport type { SerializedRawTransaction } from './rawTxn';\nimport { deserializeRawTransaction, serializeRawTransaction } from './rawTxn';\n\nexport interface SerializedSignTransactionWithPayloadRequestArgs {\n  options?: TransactionOptions;\n  payload: JsonTransactionPayload | string;\n}\n\nexport interface SerializedSignTransactionWithRawTxnRequestArgs {\n  rawTxn: SerializedRawTransaction;\n}\n\nexport type SerializedSignTransactionRequestArgs =\n  | SerializedSignTransactionWithPayloadRequestArgs\n  | SerializedSignTransactionWithRawTxnRequestArgs;\n\nexport function serializeSignTransactionRequestArgs(\n  args: SignTransactionRequestArgs | SignTransactionRequestV1Args,\n): SerializedSignTransactionRequestArgs {\n  if ('payload' in args) {\n    const serializedPayload = isBcsSerializable(args.payload)\n      ? bcsSerialize(args.payload)\n      : serializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload: serializedPayload };\n  }\n  if ('rawTxn' in args) {\n    const serializedRawTxn = serializeRawTransaction(args.rawTxn);\n    return { rawTxn: serializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionWithPayloadRequestArgs,\n): SignTransactionWithPayloadRequestArgs;\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionWithRawTxnRequestArgs,\n): SignTransactionWithRawTxnRequestArgs;\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionRequestArgs,\n): SignTransactionRequestArgs;\n\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionRequestArgs,\n): SignTransactionRequestArgs {\n  if ('payload' in args) {\n    const payload =\n      typeof args.payload === 'string'\n        ? bcsDeserialize(TransactionPayload, args.payload)\n        : deserializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload };\n  }\n  if ('rawTxn' in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return { rawTxn: deserializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAuthenticator, RawTransaction } from '@aptos-labs/ts-sdk';\nimport type { SignTransactionResponseArgs } from '../types';\nimport { bcsDeserialize, bcsSerialize } from './bcsSerialization';\n\nexport interface SerializedSignTransactionWithPayloadResponseArgs {\n  accountAuthenticator: string;\n  rawTxn: string;\n}\n\nexport interface SerializedSignTransactionWithRawTxnResponseArgs {\n  accountAuthenticator: string;\n}\n\nexport type SerializedSignTransactionResponseArgs =\n  | SerializedSignTransactionWithPayloadResponseArgs\n  | SerializedSignTransactionWithRawTxnResponseArgs;\n\nexport function serializeSignTransactionResponseArgs(\n  args: SignTransactionResponseArgs,\n): SerializedSignTransactionResponseArgs {\n  const accountAuthenticator = bcsSerialize(args.accountAuthenticator);\n  if ('rawTxn' in args) {\n    const rawTxn = bcsSerialize(args.rawTxn);\n    return { accountAuthenticator, rawTxn };\n  }\n  return { accountAuthenticator };\n}\n\nexport function deserializeSignTransactionResponseArgs(\n  args: SerializedSignTransactionResponseArgs,\n): SignTransactionResponseArgs {\n  const accountAuthenticator = bcsDeserialize(AccountAuthenticator, args.accountAuthenticator);\n  if ('rawTxn' in args) {\n    const rawTxn = bcsDeserialize(RawTransaction, args.rawTxn);\n    return { accountAuthenticator, rawTxn };\n  }\n  return { accountAuthenticator };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { FullMessageFlags, FullMessageParams, FullMessageResult } from '../types';\n\nconst prefix = 'APTOS';\n\nexport function makeFullMessage(params: FullMessageParams, flags: FullMessageFlags): FullMessageResult {\n  let fullMessage = prefix;\n  if (flags.address) {\n    fullMessage += `\\naddress: ${params.address}`;\n  }\n  if (flags.application) {\n    fullMessage += `\\napplication: ${params.application}`;\n  }\n  if (flags.chainId) {\n    fullMessage += `\\nchainId: ${params.chainId}`;\n  }\n\n  fullMessage += `\\nmessage: ${params.message}`;\n  fullMessage += `\\nnonce: ${params.nonce}`;\n\n  return {\n    fullMessage,\n    prefix,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var t = (S => (S.FULLNODE = \"Fullnode\", S.INDEXER = \"Indexer\", S.FAUCET = \"Faucet\", S.PEPPER = \"Pepper\", S.PROVER = \"Prover\", S))(t || {}),\n  E = 2e5,\n  R = 20,\n  o = 20,\n  n = \"0x1::aptos_coin::AptosCoin\",\n  A = \"0x000000000000000000000000000000000000000000000000000000000000000a\",\n  T = \"APTOS::RawTransaction\",\n  a = \"APTOS::RawTransactionWithData\",\n  O = (_ => (_.ACCOUNT_RESTORATION_PROCESSOR = \"account_restoration_processor\", _.ACCOUNT_TRANSACTION_PROCESSOR = \"account_transactions_processor\", _.DEFAULT = \"default_processor\", _.EVENTS_PROCESSOR = \"events_processor\", _.FUNGIBLE_ASSET_PROCESSOR = \"fungible_asset_processor\", _.STAKE_PROCESSOR = \"stake_processor\", _.TOKEN_V2_PROCESSOR = \"token_v2_processor\", _.USER_TRANSACTION_PROCESSOR = \"user_transaction_processor\", _.OBJECT_PROCESSOR = \"objects_processor\", _))(O || {}),\n  r = /^https:\\/\\/securetoken\\.google\\.com\\/[a-zA-Z0-9-_]+$/;\nexport { t as a, E as b, R as c, o as d, n as e, A as f, T as g, a as h, O as i, r as j };","map":{"version":3,"names":["t","S","FULLNODE","INDEXER","FAUCET","PEPPER","PROVER","E","R","o","n","A","T","a","O","_","ACCOUNT_RESTORATION_PROCESSOR","ACCOUNT_TRANSACTION_PROCESSOR","DEFAULT","EVENTS_PROCESSOR","FUNGIBLE_ASSET_PROCESSOR","STAKE_PROCESSOR","TOKEN_V2_PROCESSOR","USER_TRANSACTION_PROCESSOR","OBJECT_PROCESSOR","r","b","c","d","e","f","g","h","i","j"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\utils\\const.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Types of API endpoints used for routing requests in the Aptos network.\n * @group Implementation\n * @category Utils\n */\nexport enum AptosApiType {\n  FULLNODE = \"Fullnode\",\n  INDEXER = \"Indexer\",\n  FAUCET = \"Faucet\",\n  PEPPER = \"Pepper\",\n  PROVER = \"Prover\",\n}\n\n/**\n * The default max gas amount when none is given.\n *\n * This is the maximum number of gas units that will be used by a transaction before being rejected.\n *\n * Note that max gas amount varies based on the transaction.  A larger transaction will go over this\n * default gas amount, and the value will need to be changed for the specific transaction.\n * @group Implementation\n * @category Utils\n */\nexport const DEFAULT_MAX_GAS_AMOUNT = 200000;\n\n/**\n * The default transaction expiration seconds from now.\n *\n * This time is how long until the blockchain nodes will reject the transaction.\n *\n * Note that the transaction expiration time varies based on network connection and network load.  It may need to be\n * increased for the transaction to be processed.\n * @group Implementation\n * @category Utils\n */\nexport const DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\n\n/**\n * The default number of seconds to wait for a transaction to be processed.\n *\n * This time is the amount of time that the SDK will wait for a transaction to be processed when waiting for\n * the results of the transaction.  It may take longer based on network connection and network load.\n * @group Implementation\n * @category Utils\n */\nexport const DEFAULT_TXN_TIMEOUT_SEC = 20;\n\n/**\n * The default gas currency for the network.\n * @group Implementation\n * @category Utils\n */\nexport const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n/**\n * @group Implementation\n * @category Utils\n */\nexport const APTOS_FA = \"0x000000000000000000000000000000000000000000000000000000000000000a\";\n/**\n * @group Implementation\n * @category Utils\n */\nexport const RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\n/**\n * @group Implementation\n * @category Utils\n */\nexport const RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\n\n/**\n * Supported processor types for the indexer API, sourced from the processor_status table in the indexer database.\n * {@link https://cloud.hasura.io/public/graphiql?endpoint=https://api.mainnet.aptoslabs.com/v1/graphql}\n * @group Implementation\n * @category Utils\n */\nexport enum ProcessorType {\n  ACCOUNT_RESTORATION_PROCESSOR = \"account_restoration_processor\",\n  ACCOUNT_TRANSACTION_PROCESSOR = \"account_transactions_processor\",\n  DEFAULT = \"default_processor\",\n  EVENTS_PROCESSOR = \"events_processor\",\n  // Fungible asset processor also handles coins\n  FUNGIBLE_ASSET_PROCESSOR = \"fungible_asset_processor\",\n  STAKE_PROCESSOR = \"stake_processor\",\n  // Token V2 processor replaces Token processor (not only for digital assets)\n  TOKEN_V2_PROCESSOR = \"token_v2_processor\",\n  USER_TRANSACTION_PROCESSOR = \"user_transaction_processor\",\n  OBJECT_PROCESSOR = \"objects_processor\",\n}\n\n/**\n * Regular expression pattern for Firebase Auth issuer URLs\n * Matches URLs in the format: https://securetoken.google.com/[project-id]\n * where project-id can contain letters, numbers, hyphens, and underscores\n */\nexport const FIREBASE_AUTH_ISS_PATTERN = /^https:\\/\\/securetoken\\.google\\.com\\/[a-zA-Z0-9-_]+$/;\n"],"mappings":"AAQO,IAAKA,CAAA,IAAAC,CAAA,KACVA,CAAA,CAAAC,QAAA,GAAW,YACXD,CAAA,CAAAE,OAAA,GAAU,WACVF,CAAA,CAAAG,MAAA,GAAS,UACTH,CAAA,CAAAI,MAAA,GAAS,UACTJ,CAAA,CAAAK,MAAA,GAAS,UALCL,CAAA,GAAAD,CAAA;EAkBCO,CAAA,GAAyB;EAYzBC,CAAA,GAA+B;EAU/BC,CAAA,GAA0B;EAO1BC,CAAA,GAAa;EAKbC,CAAA,GAAW;EAKXC,CAAA,GAAuB;EAKvBC,CAAA,GAAiC;EAQlCC,CAAA,IAAAC,CAAA,KACVA,CAAA,CAAAC,6BAAA,GAAgC,iCAChCD,CAAA,CAAAE,6BAAA,GAAgC,kCAChCF,CAAA,CAAAG,OAAA,GAAU,qBACVH,CAAA,CAAAI,gBAAA,GAAmB,oBAEnBJ,CAAA,CAAAK,wBAAA,GAA2B,4BAC3BL,CAAA,CAAAM,eAAA,GAAkB,mBAElBN,CAAA,CAAAO,kBAAA,GAAqB,sBACrBP,CAAA,CAAAQ,0BAAA,GAA6B,8BAC7BR,CAAA,CAAAS,gBAAA,GAAmB,qBAXTT,CAAA,GAAAD,CAAA;EAmBCW,CAAA,GAA4B;AAAA,SAAAzB,CAAA,IAAAa,CAAA,EAAAN,CAAA,IAAAmB,CAAA,EAAAlB,CAAA,IAAAmB,CAAA,EAAAlB,CAAA,IAAAmB,CAAA,EAAAlB,CAAA,IAAAmB,CAAA,EAAAlB,CAAA,IAAAmB,CAAA,EAAAlB,CAAA,IAAAmB,CAAA,EAAAlB,CAAA,IAAAmB,CAAA,EAAAlB,CAAA,IAAAmB,CAAA,EAAAR,CAAA,IAAAS,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
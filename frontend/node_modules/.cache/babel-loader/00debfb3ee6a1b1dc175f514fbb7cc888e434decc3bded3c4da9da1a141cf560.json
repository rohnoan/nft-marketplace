{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROHAN\\\\Desktop\\\\projects\\\\nft-marketplace\\\\frontend\\\\src\\\\contexts\\\\AptosContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { AptosWalletAdapterProvider, useWallet } from '@aptos-labs/wallet-adapter-react';\nimport { PetraWallet } from 'petra-plugin-wallet-adapter';\nimport { MartianWallet } from '@martianwallet/aptos-wallet-adapter';\nimport { Aptos, Network } from '@aptos-labs/ts-sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AptosContext = /*#__PURE__*/createContext();\nconst wallets = [new PetraWallet(), new MartianWallet()];\nconst aptos = new Aptos({\n  network: Network.TESTNET\n});\nexport function AptosProvider({\n  children\n}) {\n  _s();\n  const [balance, setBalance] = useState(0);\n  const {\n    account,\n    connected,\n    wallet,\n    connect,\n    disconnect\n  } = useWallet();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      if (account !== null && account !== void 0 && account.address) {\n        try {\n          var _aptosCoin$data, _aptosCoin$data$coin;\n          const resources = await aptos.getAccountResources({\n            accountAddress: account.address\n          });\n          const aptosCoin = resources.find(r => r.type === '0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>');\n          setBalance((aptosCoin === null || aptosCoin === void 0 ? void 0 : (_aptosCoin$data = aptosCoin.data) === null || _aptosCoin$data === void 0 ? void 0 : (_aptosCoin$data$coin = _aptosCoin$data.coin) === null || _aptosCoin$data$coin === void 0 ? void 0 : _aptosCoin$data$coin.value) || 0);\n        } catch (error) {\n          console.error('Error fetching balance:', error);\n        }\n      }\n    };\n    if (connected) {\n      fetchBalance();\n    }\n  }, [account, connected]);\n  const handlePayment = async (amount, recipient) => {\n    if (!connected || !wallet) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const payload = {\n        type: 'entry_function_payload',\n        function: '0x1::coin::transfer',\n        type_arguments: ['0x1::aptos_coin::AptosCoin'],\n        arguments: [recipient, amount.toString()]\n      };\n      const response = await wallet.signAndSubmitTransaction(payload);\n      return response;\n    } catch (error) {\n      console.error('Payment error:', error);\n      throw error;\n    }\n  };\n  const value = {\n    connected,\n    account,\n    balance,\n    connect,\n    disconnect,\n    handlePayment\n  };\n  return /*#__PURE__*/_jsxDEV(AptosContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(AptosProvider, \"e1HDHgZ7dIZDaGgW0JrEspKV5TE=\", false, function () {\n  return [useWallet];\n});\n_c = AptosProvider;\nexport function useAptos() {\n  _s2();\n  const context = useContext(AptosContext);\n  if (!context) {\n    throw new Error('useAptos must be used within an AptosProvider');\n  }\n  return context;\n}\n_s2(useAptos, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AptosWalletProvider({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(AptosWalletAdapterProvider, {\n    plugins: wallets,\n    autoConnect: true,\n    children: /*#__PURE__*/_jsxDEV(AptosProvider, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_c2 = AptosWalletProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AptosProvider\");\n$RefreshReg$(_c2, \"AptosWalletProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","AptosWalletAdapterProvider","useWallet","PetraWallet","MartianWallet","Aptos","Network","jsxDEV","_jsxDEV","AptosContext","wallets","aptos","network","TESTNET","AptosProvider","children","_s","balance","setBalance","account","connected","wallet","connect","disconnect","fetchBalance","address","_aptosCoin$data","_aptosCoin$data$coin","resources","getAccountResources","accountAddress","aptosCoin","find","r","type","data","coin","value","error","console","handlePayment","amount","recipient","Error","payload","function","type_arguments","arguments","toString","response","signAndSubmitTransaction","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAptos","_s2","context","AptosWalletProvider","plugins","autoConnect","_c2","$RefreshReg$"],"sources":["C:/Users/ROHAN/Desktop/projects/nft-marketplace/frontend/src/contexts/AptosContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { AptosWalletAdapterProvider, useWallet } from '@aptos-labs/wallet-adapter-react';\r\nimport { PetraWallet } from 'petra-plugin-wallet-adapter';\r\nimport { MartianWallet } from '@martianwallet/aptos-wallet-adapter';\r\nimport { Aptos, Network } from '@aptos-labs/ts-sdk';\r\n\r\nconst AptosContext = createContext();\r\n\r\nconst wallets = [new PetraWallet(), new MartianWallet()];\r\nconst aptos = new Aptos({ network: Network.TESTNET });\r\n\r\nexport function AptosProvider({ children }) {\r\n  const [balance, setBalance] = useState(0);\r\n  const { account, connected, wallet, connect, disconnect } = useWallet();\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      if (account?.address) {\r\n        try {\r\n          const resources = await aptos.getAccountResources({ accountAddress: account.address });\r\n          const aptosCoin = resources.find((r) => r.type === '0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>');\r\n          setBalance(aptosCoin?.data?.coin?.value || 0);\r\n        } catch (error) {\r\n          console.error('Error fetching balance:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (connected) {\r\n      fetchBalance();\r\n    }\r\n  }, [account, connected]);\r\n\r\n  const handlePayment = async (amount, recipient) => {\r\n    if (!connected || !wallet) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      const payload = {\r\n        type: 'entry_function_payload',\r\n        function: '0x1::coin::transfer',\r\n        type_arguments: ['0x1::aptos_coin::AptosCoin'],\r\n        arguments: [recipient, amount.toString()]\r\n      };\r\n\r\n      const response = await wallet.signAndSubmitTransaction(payload);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Payment error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    connected,\r\n    account,\r\n    balance,\r\n    connect,\r\n    disconnect,\r\n    handlePayment,\r\n  };\r\n\r\n  return (\r\n    <AptosContext.Provider value={value}>\r\n      {children}\r\n    </AptosContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAptos() {\r\n  const context = useContext(AptosContext);\r\n  if (!context) {\r\n    throw new Error('useAptos must be used within an AptosProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function AptosWalletProvider({ children }) {\r\n  return (\r\n    <AptosWalletAdapterProvider plugins={wallets} autoConnect={true}>\r\n      <AptosProvider>{children}</AptosProvider>\r\n    </AptosWalletAdapterProvider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
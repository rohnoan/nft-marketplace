{"ast":null,"code":"import { a as Un, b as yr } from \"./chunk-A5L76YP7.mjs\";\nimport { a as Ti } from \"./chunk-XF6BISPI.mjs\";\nimport { a as kn, b as Ni } from \"./chunk-3IHKQH5O.mjs\";\nimport { a as In } from \"./chunk-OYH2T6V5.mjs\";\nimport { a as _ } from \"./chunk-PRUQZNAP.mjs\";\nimport { a as Te, b as Cn, c as Et, d as or, e as It } from \"./chunk-GOXRBEIJ.mjs\";\nimport { a as ni } from \"./chunk-OYUW6ZN2.mjs\";\nimport { a as Ft, b as nt, c as dr } from \"./chunk-V7U5Y4AU.mjs\";\nimport { a as Ct, b as We } from \"./chunk-WTLQD6MR.mjs\";\nimport { b as R, c as $, d as z } from \"./chunk-YQIAWAPY.mjs\";\nimport { a as gr, b as mr } from \"./chunk-W4BSN6SK.mjs\";\nimport { a as ir, b as ti } from \"./chunk-FBCXUC7J.mjs\";\nimport { b as qe } from \"./chunk-BYINW7I2.mjs\";\nimport { a as we } from \"./chunk-Z6KQX6VX.mjs\";\nimport { a as Z } from \"./chunk-6PKBXYG3.mjs\";\nimport { a as Ar } from \"./chunk-ARNW34PP.mjs\";\nimport { a as Mi } from \"./chunk-GLFZJNF3.mjs\";\nimport { a as h } from \"./chunk-KAYKTT4S.mjs\";\nimport { a as Vi, b as Fn, c as Hi, d as Li, e as $i, g as je, h as qi, k as Wi, l as ji } from \"./chunk-P237G6YB.mjs\";\nimport { a as kt } from \"./chunk-YOZBVVKL.mjs\";\nimport { a as _n, b as Gi, c as w, e as Bi, f as zi } from \"./chunk-BXRBOMHW.mjs\";\nimport { A as Oi, d as Si, e as Pi, f as xi, g as Ki, i as Ci, j as Ei, k as Ii, m as vi, n as _i, o as ki, p as Fi, q as Ui, r as Di, s as Ut, t as pr, u as vn, y as Ri, z as lr } from \"./chunk-VHNX2NUR.mjs\";\nimport { b as tt, d as fi, e as cr, f as ur } from \"./chunk-GJ7STZEW.mjs\";\nimport { b as _t, d as hi, e as bi, f as wi } from \"./chunk-GQ557FEA.mjs\";\nimport { a as ui } from \"./chunk-TUZHLTDU.mjs\";\nimport { a as Xr } from \"./chunk-IXYGZ57N.mjs\";\nimport { a as wt } from \"./chunk-WLUXOUZH.mjs\";\nimport { a as P, b as ei, c as v, d as J } from \"./chunk-SOJ3OG6X.mjs\";\nimport { a as B, b as he, c as St, d as Pt, e as be, f as xt, g as Kt } from \"./chunk-C6JRJNK3.mjs\";\nimport { a as L } from \"./chunk-JGFKIUG5.mjs\";\nimport { d as b, e as Ai } from \"./chunk-6Y6ZO7TS.mjs\";\nimport { a as Zt, b as di, c as ve, d as pi, e as li, f as gi, i as mi, j as yi, k as Y, l as vt } from \"./chunk-YFFDF22R.mjs\";\nimport { a as En } from \"./chunk-BUUV6B4P.mjs\";\nimport { b as c } from \"./chunk-GYVSI3TS.mjs\";\nimport { a as Tt } from \"./chunk-3OLFJ65O.mjs\";\nimport { E as Q } from \"./chunk-ODAAZLPK.mjs\";\nimport { a as S, b as j } from \"./chunk-NJN3EAOM.mjs\";\nimport { d as Zr } from \"./chunk-56CNRT2K.mjs\";\nimport { b as T, c as Yr } from \"./chunk-STY74NUA.mjs\";\nimport { a as Qi } from \"./chunk-F2ZTBAJJ.mjs\";\nimport { g as sr } from \"./chunk-4RXKALLC.mjs\";\nimport { b as ri, c as ii, d as oi, e as Ie, f as si, g as ai, h as ar, j as ci } from \"./chunk-RJ7F4JDV.mjs\";\nimport { a as bt } from \"./chunk-KDMSOCZY.mjs\";\nimport { jwtDecode as Ls } from \"jwt-decode\";\nimport { sha3_256 as Qa } from \"@noble/hashes/sha3\";\nimport { bn254 as fe } from \"@noble/curves/bn254\";\nimport { bytesToNumberBE as Ja } from \"@noble/curves/abstract/utils\";\nvar q = class n extends qe {\n  constructor(e, t) {\n    super(), this.jwkAddress = c.from(e), this.keylessPublicKey = t;\n  }\n  authKey() {\n    let e = new j();\n    return e.serializeU32AsUleb128(4), e.serializeFixedBytes(this.bcsToBytes()), Z.fromSchemeAndBytes({\n      scheme: 2,\n      input: e.toUint8Array()\n    });\n  }\n  verifySignature(e) {\n    try {\n      return Dn({\n        ...e,\n        publicKey: this\n      }), !0;\n    } catch {\n      return !1;\n    }\n  }\n  serialize(e) {\n    this.jwkAddress.serialize(e), this.keylessPublicKey.serialize(e);\n  }\n  static deserialize(e) {\n    let t = c.deserialize(e),\n      r = E.deserialize(e);\n    return new n(t, r);\n  }\n  static isPublicKey(e) {\n    return e instanceof n;\n  }\n  async verifySignatureAsync(e) {\n    return hr({\n      ...e,\n      publicKey: this\n    });\n  }\n  static create(e) {\n    return new n(e.jwkAddress, E.create(e));\n  }\n  static fromJwtAndPepper(e) {\n    return new n(e.jwkAddress, E.fromJwtAndPepper(e));\n  }\n  static isInstance(e) {\n    return \"jwkAddress\" in e && e.jwkAddress instanceof c && \"keylessPublicKey\" in e && e.keylessPublicKey instanceof E;\n  }\n};\nimport { encode as Za } from \"js-base64\";\nvar k = class n extends qe {\n    constructor(e) {\n      if (super(), this.publicKey = e, e instanceof R) this.variant = 0;else if (e instanceof Ft) this.variant = 1;else if (e instanceof E) this.variant = 3;else if (e instanceof q) this.variant = 4;else throw new Error(\"Unsupported public key type\");\n    }\n    verifySignature(e) {\n      let {\n        message: t,\n        signature: r\n      } = e;\n      if (this.publicKey instanceof E) throw new Error(\"Use verifySignatureAsync to verify Keyless signatures\");\n      return this.publicKey.verifySignature({\n        message: t,\n        signature: r.signature\n      });\n    }\n    async verifySignatureAsync(e) {\n      if (!(e.signature instanceof O)) {\n        if (e.options?.throwErrorWithReason) throw new Error(\"Signature must be an instance of AnySignature\");\n        return !1;\n      }\n      return await this.publicKey.verifySignatureAsync({\n        ...e,\n        signature: e.signature.signature\n      });\n    }\n    authKey() {\n      return Z.fromSchemeAndBytes({\n        scheme: 2,\n        input: this.toUint8Array()\n      });\n    }\n    toUint8Array() {\n      return this.bcsToBytes();\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(this.variant), this.publicKey.serialize(e);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32(),\n        r;\n      switch (t) {\n        case 0:\n          r = R.deserialize(e);\n          break;\n        case 1:\n          r = Ft.deserialize(e);\n          break;\n        case 3:\n          r = E.deserialize(e);\n          break;\n        case 4:\n          r = q.deserialize(e);\n          break;\n        default:\n          throw new Error(`Unknown variant index for AnyPublicKey: ${t}`);\n      }\n      return new n(r);\n    }\n    static isPublicKey(e) {\n      return e instanceof n;\n    }\n    isEd25519() {\n      return this.publicKey instanceof R;\n    }\n    isSecp256k1PublicKey() {\n      return this.publicKey instanceof Ft;\n    }\n    static isInstance(e) {\n      return \"publicKey\" in e && \"variant\" in e;\n    }\n  },\n  O = class n extends we {\n    constructor(e) {\n      if (super(), this.signature = e, e instanceof z) this.variant = 0;else if (e instanceof dr) this.variant = 1;else if (e instanceof ue) this.variant = 3;else throw new Error(\"Unsupported signature type\");\n    }\n    toUint8Array() {\n      return console.warn(\"[Aptos SDK] Calls to AnySignature.toUint8Array() will soon return the underlying signature bytes. Use AnySignature.bcsToBytes() instead.\"), this.bcsToBytes();\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(this.variant), this.signature.serialize(e);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32(),\n        r;\n      switch (t) {\n        case 0:\n          r = z.deserialize(e);\n          break;\n        case 1:\n          r = dr.deserialize(e);\n          break;\n        case 3:\n          r = ue.deserialize(e);\n          break;\n        default:\n          throw new Error(`Unknown variant index for AnySignature: ${t}`);\n      }\n      return new n(r);\n    }\n    static isInstance(e) {\n      return \"signature\" in e && typeof e.signature == \"object\" && e.signature !== null && \"toUint8Array\" in e.signature;\n    }\n  };\nfunction $s(n) {\n  let e = n;\n  return e -= e >> 1 & 1431655765, e = (e & 858993459) + (e >> 2 & 858993459), (e + (e >> 4) & 252645135) * 16843009 >> 24;\n}\nvar Yt = class extends qe {\n    constructor(e) {\n      super(), this.publicKeys = e.publicKeys;\n    }\n    createBitmap(e) {\n      let {\n          bits: t\n        } = e,\n        r = 128,\n        i = new Uint8Array([0, 0, 0, 0]),\n        o = new Set();\n      return t.forEach((s, a) => {\n        if (a + 1 > this.publicKeys.length) throw new Error(`Signature index ${a + 1} is out of public keys range, ${this.publicKeys.length}.`);\n        if (o.has(s)) throw new Error(`Duplicate bit ${s} detected.`);\n        o.add(s);\n        let u = Math.floor(s / 8),\n          d = i[u];\n        d |= r >> s % 8, i[u] = d;\n      }), i;\n    }\n    getIndex(e) {\n      let t = this.publicKeys.findIndex(r => r.toString() === e.toString());\n      if (t !== -1) return t;\n      throw new Error(`Public key ${e} not found in multi key set ${this.publicKeys}`);\n    }\n  },\n  Se = class n extends Yt {\n    constructor(e) {\n      let {\n        publicKeys: t,\n        signaturesRequired: r\n      } = e;\n      if (super({\n        publicKeys: t\n      }), r < 1) throw new Error(\"The number of required signatures needs to be greater than 0\");\n      if (t.length < r) throw new Error(`Provided ${t.length} public keys is smaller than the ${r} required signatures`);\n      this.publicKeys = t.map(i => i instanceof k ? i : new k(i)), this.signaturesRequired = r;\n    }\n    verifySignature(e) {\n      let {\n        message: t,\n        signature: r\n      } = e;\n      if (r.signatures.length !== this.signaturesRequired) throw new Error(\"The number of signatures does not match the number of required signatures\");\n      let i = r.bitMapToSignerIndices();\n      for (let o = 0; o < r.signatures.length; o += 1) {\n        let s = r.signatures[o];\n        if (!this.publicKeys[i[o]].verifySignature({\n          message: t,\n          signature: s\n        })) return !1;\n      }\n      return !0;\n    }\n    async verifySignatureAsync(e) {\n      let {\n        signature: t\n      } = e;\n      try {\n        if (!(t instanceof Pe)) throw new Error(\"Signature is not a MultiKeySignature\");\n        if (t.signatures.length !== this.signaturesRequired) throw new Error(\"The number of signatures does not match the number of required signatures\");\n        let r = t.bitMapToSignerIndices();\n        for (let i = 0; i < t.signatures.length; i += 1) {\n          let o = t.signatures[i];\n          if (!(await this.publicKeys[r[i]].verifySignatureAsync({\n            ...e,\n            signature: o\n          }))) return !1;\n        }\n        return !0;\n      } catch (r) {\n        if (e.options?.throwErrorWithReason) throw r;\n        return !1;\n      }\n    }\n    authKey() {\n      return Z.fromSchemeAndBytes({\n        scheme: 3,\n        input: this.toUint8Array()\n      });\n    }\n    serialize(e) {\n      e.serializeVector(this.publicKeys), e.serializeU8(this.signaturesRequired);\n    }\n    static deserialize(e) {\n      let t = e.deserializeVector(k),\n        r = e.deserializeU8();\n      return new n({\n        publicKeys: t,\n        signaturesRequired: r\n      });\n    }\n    getIndex(e) {\n      let t = e instanceof k ? e : new k(e);\n      return super.getIndex(t);\n    }\n    static isInstance(e) {\n      return \"publicKeys\" in e && \"signaturesRequired\" in e;\n    }\n  },\n  re = class re extends we {\n    constructor(e) {\n      super();\n      let {\n        signatures: t,\n        bitmap: r\n      } = e;\n      if (t.length > re.MAX_SIGNATURES_SUPPORTED) throw new Error(`The number of signatures cannot be greater than ${re.MAX_SIGNATURES_SUPPORTED}`);\n      if (this.signatures = t.map(o => o instanceof O ? o : new O(o)), !(r instanceof Uint8Array)) this.bitmap = re.createBitmap({\n        bits: r\n      });else {\n        if (r.length !== re.BITMAP_LEN) throw new Error(`\"bitmap\" length should be ${re.BITMAP_LEN}`);\n        this.bitmap = r;\n      }\n      let i = this.bitmap.reduce((o, s) => o + $s(s), 0);\n      if (i !== this.signatures.length) throw new Error(`Expecting ${i} signatures from the bitmap, but got ${this.signatures.length}`);\n    }\n    static createBitmap(e) {\n      let {\n          bits: t\n        } = e,\n        r = 128,\n        i = new Uint8Array([0, 0, 0, 0]),\n        o = new Set();\n      return t.forEach(s => {\n        if (s >= re.MAX_SIGNATURES_SUPPORTED) throw new Error(`Cannot have a signature larger than ${re.MAX_SIGNATURES_SUPPORTED - 1}.`);\n        if (o.has(s)) throw new Error(\"Duplicate bits detected.\");\n        o.add(s);\n        let a = Math.floor(s / 8),\n          u = i[a];\n        u |= r >> s % 8, i[a] = u;\n      }), i;\n    }\n    bitMapToSignerIndices() {\n      let e = [];\n      for (let t = 0; t < this.bitmap.length; t += 1) {\n        let r = this.bitmap[t];\n        for (let i = 0; i < 8; i += 1) (r & 128 >> i) !== 0 && e.push(t * 8 + i);\n      }\n      return e;\n    }\n    serialize(e) {\n      e.serializeVector(this.signatures), e.serializeBytes(this.bitmap);\n    }\n    static deserialize(e) {\n      let t = e.deserializeVector(O),\n        r = e.deserializeBytes();\n      return new re({\n        signatures: t,\n        bitmap: r\n      });\n    }\n  };\nre.BITMAP_LEN = 4, re.MAX_SIGNATURES_SUPPORTED = re.BITMAP_LEN * 8;\nvar Pe = re;\nvar de = class de extends Yt {\n  constructor(e) {\n    let {\n      publicKeys: t,\n      threshold: r\n    } = e;\n    if (super({\n      publicKeys: t\n    }), t.length > de.MAX_KEYS || t.length < de.MIN_KEYS) throw new Error(`Must have between ${de.MIN_KEYS} and ${de.MAX_KEYS} public keys, inclusive`);\n    if (r < de.MIN_THRESHOLD || r > t.length) throw new Error(`Threshold must be between ${de.MIN_THRESHOLD} and ${t.length}, inclusive`);\n    this.publicKeys = t, this.threshold = r;\n  }\n  verifySignature(e) {\n    let {\n      message: t,\n      signature: r\n    } = e;\n    if (!(r instanceof _e)) return !1;\n    let i = [];\n    for (let o = 0; o < 4; o += 1) for (let s = 0; s < 8; s += 1) if ((r.bitmap[o] & 1 << 7 - s) !== 0) {\n      let u = o * 8 + s;\n      i.push(u);\n    }\n    if (i.length !== r.signatures.length) throw new Error(\"Bitmap and signatures length mismatch\");\n    if (i.length < this.threshold) throw new Error(\"Not enough signatures\");\n    for (let o = 0; o < i.length; o += 1) if (!this.publicKeys[i[o]].verifySignature({\n      message: t,\n      signature: r.signatures[o]\n    })) return !1;\n    return !0;\n  }\n  async verifySignatureAsync(e) {\n    return this.verifySignature(e);\n  }\n  authKey() {\n    return Z.fromSchemeAndBytes({\n      scheme: 1,\n      input: this.toUint8Array()\n    });\n  }\n  toUint8Array() {\n    let e = new Uint8Array(this.publicKeys.length * R.LENGTH + 1);\n    return this.publicKeys.forEach((t, r) => {\n      e.set(t.toUint8Array(), r * R.LENGTH);\n    }), e[this.publicKeys.length * R.LENGTH] = this.threshold, e;\n  }\n  serialize(e) {\n    e.serializeBytes(this.toUint8Array());\n  }\n  static deserialize(e) {\n    let t = e.deserializeBytes(),\n      r = t[t.length - 1],\n      i = [];\n    for (let o = 0; o < t.length - 1; o += R.LENGTH) {\n      let s = o;\n      i.push(new R(t.subarray(s, s + R.LENGTH)));\n    }\n    return new de({\n      publicKeys: i,\n      threshold: r\n    });\n  }\n  getIndex(e) {\n    return super.getIndex(e);\n  }\n};\nde.MAX_KEYS = 32, de.MIN_KEYS = 2, de.MIN_THRESHOLD = 1;\nvar Dt = de,\n  ie = class ie extends we {\n    constructor(e) {\n      super();\n      let {\n        signatures: t,\n        bitmap: r\n      } = e;\n      if (t.length > ie.MAX_SIGNATURES_SUPPORTED) throw new Error(`The number of signatures cannot be greater than ${ie.MAX_SIGNATURES_SUPPORTED}`);\n      if (this.signatures = t, !(r instanceof Uint8Array)) this.bitmap = ie.createBitmap({\n        bits: r\n      });else {\n        if (r.length !== ie.BITMAP_LEN) throw new Error(`\"bitmap\" length should be ${ie.BITMAP_LEN}`);\n        this.bitmap = r;\n      }\n    }\n    toUint8Array() {\n      let e = new Uint8Array(this.signatures.length * z.LENGTH + ie.BITMAP_LEN);\n      return this.signatures.forEach((t, r) => {\n        e.set(t.toUint8Array(), r * z.LENGTH);\n      }), e.set(this.bitmap, this.signatures.length * z.LENGTH), e;\n    }\n    serialize(e) {\n      e.serializeBytes(this.toUint8Array());\n    }\n    static deserialize(e) {\n      let t = e.deserializeBytes(),\n        r = t.subarray(t.length - 4),\n        i = [];\n      for (let o = 0; o < t.length - r.length; o += z.LENGTH) {\n        let s = o;\n        i.push(new z(t.subarray(s, s + z.LENGTH)));\n      }\n      return new ie({\n        signatures: i,\n        bitmap: r\n      });\n    }\n    static createBitmap(e) {\n      let {\n          bits: t\n        } = e,\n        r = 128,\n        i = new Uint8Array([0, 0, 0, 0]),\n        o = new Set();\n      return t.forEach((s, a) => {\n        if (s >= ie.MAX_SIGNATURES_SUPPORTED) throw new Error(`Cannot have a signature larger than ${ie.MAX_SIGNATURES_SUPPORTED - 1}.`);\n        if (o.has(s)) throw new Error(\"Duplicate bits detected.\");\n        if (a > 0 && s <= t[a - 1]) throw new Error(\"The bits need to be sorted in ascending order.\");\n        o.add(s);\n        let u = Math.floor(s / 8),\n          d = i[u];\n        d |= r >> s % 8, i[u] = d;\n      }), i;\n    }\n  };\nie.MAX_SIGNATURES_SUPPORTED = 32, ie.BITMAP_LEN = 4;\nvar _e = ie;\nvar V = class extends S {\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32();\n      switch (t) {\n        case 0:\n          return me.load(e);\n        case 1:\n          return ke.load(e);\n        case 2:\n          return X.load(e);\n        case 3:\n          return xe.load(e);\n        case 4:\n          return Rt.load(e);\n        case 5:\n          return rt.load(e);\n        default:\n          throw new Error(`Unknown variant index for AccountAuthenticator: ${t}`);\n      }\n    }\n    isEd25519() {\n      return this instanceof me;\n    }\n    isMultiEd25519() {\n      return this instanceof ke;\n    }\n    isSingleKey() {\n      return this instanceof X;\n    }\n    isMultiKey() {\n      return this instanceof xe;\n    }\n  },\n  me = class n extends V {\n    constructor(e, t) {\n      super(), this.public_key = e, this.signature = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(0), this.public_key.serialize(e), this.signature.serialize(e);\n    }\n    static load(e) {\n      let t = R.deserialize(e),\n        r = z.deserialize(e);\n      return new n(t, r);\n    }\n  },\n  ke = class n extends V {\n    constructor(e, t) {\n      super(), this.public_key = e, this.signature = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(1), this.public_key.serialize(e), this.signature.serialize(e);\n    }\n    static load(e) {\n      let t = Dt.deserialize(e),\n        r = _e.deserialize(e);\n      return new n(t, r);\n    }\n  },\n  X = class n extends V {\n    constructor(e, t) {\n      super(), this.public_key = e, this.signature = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(2), this.public_key.serialize(e), this.signature.serialize(e);\n    }\n    static load(e) {\n      let t = k.deserialize(e),\n        r = O.deserialize(e);\n      return new n(t, r);\n    }\n  },\n  xe = class n extends V {\n    constructor(e, t) {\n      super(), this.public_keys = e, this.signatures = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(3), this.public_keys.serialize(e), this.signatures.serialize(e);\n    }\n    static load(e) {\n      let t = Se.deserialize(e),\n        r = Pe.deserialize(e);\n      return new n(t, r);\n    }\n  },\n  Rt = class n extends V {\n    serialize(e) {\n      e.serializeU32AsUleb128(4);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  rt = class n extends V {\n    constructor(e, t, r, i) {\n      if (super(), !vt(e)) throw new Error(`Invalid function info ${e} passed into AccountAuthenticatorAbstraction`);\n      this.functionInfo = e, this.authenticator = r, this.signingMessageDigest = T.fromHexInput(T.fromHexInput(t).toUint8Array()), this.accountIdentity = i;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(5);\n      let {\n        moduleAddress: t,\n        moduleName: r,\n        functionName: i\n      } = Y(this.functionInfo);\n      c.fromString(t).serialize(e), e.serializeStr(r), e.serializeStr(i), this.accountIdentity ? e.serializeU32AsUleb128(1) : e.serializeU32AsUleb128(0), e.serializeBytes(this.signingMessageDigest.toUint8Array()), this.accountIdentity ? e.serializeBytes(this.authenticator) : e.serializeFixedBytes(this.authenticator), this.accountIdentity && e.serializeBytes(this.accountIdentity);\n    }\n    static load(e) {\n      let t = c.deserialize(e),\n        r = e.deserializeStr(),\n        i = e.deserializeStr(),\n        o = e.deserializeUleb128AsU32();\n      if (o === 0) {\n        let s = e.deserializeBytes(),\n          a = e.deserializeFixedBytes(e.remaining());\n        return new n(`${t}::${r}::${i}`, s, a);\n      }\n      if (o === 1) {\n        let s = e.deserializeBytes(),\n          a = e.deserializeBytes(),\n          u = e.deserializeBytes();\n        return new n(`${t}::${r}::${i}`, s, a, u);\n      }\n      throw new Error(`Unknown variant index for AccountAuthenticatorAbstraction: ${o}`);\n    }\n  };\nimport { sha3_256 as Ws } from \"@noble/hashes/sha3\";\nvar Xt = class n extends S {\n  constructor(e, t) {\n    super(), this.address = e, this.name = t;\n  }\n  static fromStr(e) {\n    let t = e.split(\"::\");\n    if (t.length !== 2) throw new Error(\"Invalid module id.\");\n    return new n(c.fromString(t[0]), new _(t[1]));\n  }\n  serialize(e) {\n    this.address.serialize(e), this.name.serialize(e);\n  }\n  static deserialize(e) {\n    let t = c.deserialize(e),\n      r = _.deserialize(e);\n    return new n(t, r);\n  }\n};\nvar U = class n extends S {\n    deserialize(e) {\n      let t = c.deserialize(e),\n        r = _.deserialize(e),\n        i = _.deserialize(e),\n        o = e.deserializeVector(n);\n      return new Ke(t, r, i, o);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32();\n      switch (t) {\n        case 0:\n          return G.load(e);\n        case 1:\n          return oe.load(e);\n        case 2:\n          return H.load(e);\n        case 3:\n          return De.load(e);\n        case 4:\n          return F.load(e);\n        case 5:\n          return it.load(e);\n        case 6:\n          return K.load(e);\n        case 7:\n          return m.load(e);\n        case 8:\n          return Fe.load(e);\n        case 9:\n          return Ue.load(e);\n        case 10:\n          return Re.load(e);\n        case 255:\n          return D.load(e);\n        default:\n          throw new Error(`Unknown variant index for TypeTag: ${t}`);\n      }\n    }\n    isBool() {\n      return this instanceof G;\n    }\n    isAddress() {\n      return this instanceof F;\n    }\n    isGeneric() {\n      return this instanceof D;\n    }\n    isSigner() {\n      return this instanceof it;\n    }\n    isVector() {\n      return this instanceof K;\n    }\n    isStruct() {\n      return this instanceof m;\n    }\n    isU8() {\n      return this instanceof oe;\n    }\n    isU16() {\n      return this instanceof Fe;\n    }\n    isU32() {\n      return this instanceof Ue;\n    }\n    isU64() {\n      return this instanceof H;\n    }\n    isU128() {\n      return this instanceof De;\n    }\n    isU256() {\n      return this instanceof Re;\n    }\n    isPrimitive() {\n      return this instanceof it || this instanceof F || this instanceof G || this instanceof oe || this instanceof Fe || this instanceof Ue || this instanceof H || this instanceof De || this instanceof Re;\n    }\n  },\n  G = class n extends U {\n    toString() {\n      return \"bool\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(0);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  oe = class n extends U {\n    toString() {\n      return \"u8\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(1);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  Fe = class n extends U {\n    toString() {\n      return \"u16\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(8);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  Ue = class n extends U {\n    toString() {\n      return \"u32\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(9);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  H = class n extends U {\n    toString() {\n      return \"u64\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(2);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  De = class n extends U {\n    toString() {\n      return \"u128\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(3);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  Re = class n extends U {\n    toString() {\n      return \"u256\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(10);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  F = class n extends U {\n    toString() {\n      return \"address\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(4);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  it = class n extends U {\n    toString() {\n      return \"signer\";\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(5);\n    }\n    static load(e) {\n      return new n();\n    }\n  },\n  Rn = class n extends U {\n    constructor(t) {\n      super();\n      this.value = t;\n    }\n    toString() {\n      return `&${this.value.toString()}`;\n    }\n    serialize(t) {\n      t.serializeU32AsUleb128(254);\n    }\n    static load(t) {\n      let r = U.deserialize(t);\n      return new n(r);\n    }\n  },\n  D = class n extends U {\n    constructor(t) {\n      super();\n      this.value = t;\n      if (t < 0) throw new Error(\"Generic type parameter index cannot be negative\");\n    }\n    toString() {\n      return `T${this.value}`;\n    }\n    serialize(t) {\n      t.serializeU32AsUleb128(255), t.serializeU32(this.value);\n    }\n    static load(t) {\n      let r = t.deserializeU32();\n      return new n(r);\n    }\n  },\n  K = class n extends U {\n    constructor(t) {\n      super();\n      this.value = t;\n    }\n    toString() {\n      return `vector<${this.value.toString()}>`;\n    }\n    static u8() {\n      return new n(new oe());\n    }\n    serialize(t) {\n      t.serializeU32AsUleb128(6), this.value.serialize(t);\n    }\n    static load(t) {\n      let r = U.deserialize(t);\n      return new n(r);\n    }\n  },\n  m = class n extends U {\n    constructor(t) {\n      super();\n      this.value = t;\n    }\n    toString() {\n      let t = \"\";\n      return this.value.typeArgs.length > 0 && (t = `<${this.value.typeArgs.map(r => r.toString()).join(\", \")}>`), `${this.value.address.toString()}::${this.value.moduleName.identifier}::${this.value.name.identifier}${t}`;\n    }\n    serialize(t) {\n      t.serializeU32AsUleb128(7), this.value.serialize(t);\n    }\n    static load(t) {\n      let r = Ke.deserialize(t);\n      return new n(r);\n    }\n    isTypeTag(t, r, i) {\n      return this.value.moduleName.identifier === r && this.value.name.identifier === i && this.value.address.equals(t);\n    }\n    isString() {\n      return this.isTypeTag(c.ONE, \"string\", \"String\");\n    }\n    isOption() {\n      return this.isTypeTag(c.ONE, \"option\", \"Option\");\n    }\n    isObject() {\n      return this.isTypeTag(c.ONE, \"object\", \"Object\");\n    }\n    isDelegationKey() {\n      return this.isTypeTag(c.ONE, \"permissioned_delegation\", \"DelegationKey\");\n    }\n    isRateLimiter() {\n      return this.isTypeTag(c.ONE, \"rate_limiter\", \"RateLimiter\");\n    }\n  },\n  Ke = class n extends S {\n    constructor(e, t, r, i) {\n      super(), this.address = e, this.moduleName = t, this.name = r, this.typeArgs = i;\n    }\n    serialize(e) {\n      e.serialize(this.address), e.serialize(this.moduleName), e.serialize(this.name), e.serializeVector(this.typeArgs);\n    }\n    static deserialize(e) {\n      let t = c.deserialize(e),\n        r = _.deserialize(e),\n        i = _.deserialize(e),\n        o = e.deserializeVector(U);\n      return new n(t, r, i, o);\n    }\n  };\nfunction Ju() {\n  return new Ke(c.ONE, new _(\"aptos_coin\"), new _(\"AptosCoin\"), []);\n}\nfunction x() {\n  return new Ke(c.ONE, new _(\"string\"), new _(\"String\"), []);\n}\nfunction Zu(n) {\n  return new Ke(c.ONE, new _(\"option\"), new _(\"Option\"), [n]);\n}\nfunction se(n) {\n  return new Ke(c.ONE, new _(\"object\"), new _(\"Object\"), [n]);\n}\nfunction qs(n) {\n  let e = n.deserializeUleb128AsU32();\n  switch (e) {\n    case 0:\n      return he.deserialize(n);\n    case 1:\n      return be.deserialize(n);\n    case 2:\n      return xt.deserialize(n);\n    case 3:\n      return c.deserialize(n);\n    case 4:\n      return P.deserialize(n, he);\n    case 5:\n      return B.deserialize(n);\n    case 6:\n      return St.deserialize(n);\n    case 7:\n      return Pt.deserialize(n);\n    case 8:\n      return Kt.deserialize(n);\n    case 9:\n      return ei.deserialize(n);\n    default:\n      throw new Error(`Unknown variant index for ScriptTransactionArgument: ${e}`);\n  }\n}\nvar ot = class extends S {\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32();\n      switch (t) {\n        case 0:\n          return st.load(e);\n        case 2:\n          return en.load(e);\n        case 3:\n          return tn.load(e);\n        default:\n          throw new Error(`Unknown variant index for TransactionPayload: ${t}`);\n      }\n    }\n  },\n  st = class n extends ot {\n    constructor(e) {\n      super(), this.script = e;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(0), this.script.serialize(e);\n    }\n    static load(e) {\n      let t = nn.deserialize(e);\n      return new n(t);\n    }\n  },\n  en = class n extends ot {\n    constructor(e) {\n      super(), this.entryFunction = e;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(2), this.entryFunction.serialize(e);\n    }\n    static load(e) {\n      let t = at.deserialize(e);\n      return new n(t);\n    }\n  },\n  tn = class n extends ot {\n    constructor(e) {\n      super(), this.multiSig = e;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(3), this.multiSig.serialize(e);\n    }\n    static load(e) {\n      let t = rn.deserialize(e);\n      return new n(t);\n    }\n  },\n  at = class n {\n    constructor(e, t, r, i) {\n      this.module_name = e, this.function_name = t, this.type_args = r, this.args = i;\n    }\n    static build(e, t, r, i) {\n      return new n(Xt.fromStr(e), new _(t), r, i);\n    }\n    serialize(e) {\n      this.module_name.serialize(e), this.function_name.serialize(e), e.serializeVector(this.type_args), e.serializeU32AsUleb128(this.args.length), this.args.forEach(t => {\n        t.serializeForEntryFunction(e);\n      });\n    }\n    static deserialize(e) {\n      let t = Xt.deserialize(e),\n        r = _.deserialize(e),\n        i = e.deserializeVector(U),\n        o = e.deserializeUleb128AsU32(),\n        s = new Array();\n      for (let a = 0; a < o; a += 1) {\n        let u = e.deserializeUleb128AsU32(),\n          d = Xr.deserialize(e, u);\n        s.push(d);\n      }\n      return new n(t, r, i, s);\n    }\n  },\n  nn = class n {\n    constructor(e, t, r) {\n      this.bytecode = e, this.type_args = t, this.args = r;\n    }\n    serialize(e) {\n      e.serializeBytes(this.bytecode), e.serializeVector(this.type_args), e.serializeU32AsUleb128(this.args.length), this.args.forEach(t => {\n        t.serializeForScriptFunction(e);\n      });\n    }\n    static deserialize(e) {\n      let t = e.deserializeBytes(),\n        r = e.deserializeVector(U),\n        i = e.deserializeUleb128AsU32(),\n        o = new Array();\n      for (let s = 0; s < i; s += 1) {\n        let a = qs(e);\n        o.push(a);\n      }\n      return new n(t, r, o);\n    }\n  },\n  rn = class n {\n    constructor(e, t) {\n      this.multisig_address = e, this.transaction_payload = t;\n    }\n    serialize(e) {\n      this.multisig_address.serialize(e), this.transaction_payload === void 0 ? e.serializeBool(!1) : (e.serializeBool(!0), this.transaction_payload.serialize(e));\n    }\n    static deserialize(e) {\n      let t = c.deserialize(e),\n        r = e.deserializeBool(),\n        i;\n      return r && (i = on.deserialize(e)), new n(t, i);\n    }\n  },\n  on = class n extends S {\n    constructor(e) {\n      super(), this.transaction_payload = e;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(0), this.transaction_payload.serialize(e);\n    }\n    static deserialize(e) {\n      return e.deserializeUleb128AsU32(), new n(at.deserialize(e));\n    }\n  };\nvar pe = class n extends S {\n    constructor(e, t, r, i, o, s, a) {\n      super(), this.sender = e, this.sequence_number = t, this.payload = r, this.max_gas_amount = i, this.gas_unit_price = o, this.expiration_timestamp_secs = s, this.chain_id = a;\n    }\n    serialize(e) {\n      this.sender.serialize(e), e.serializeU64(this.sequence_number), this.payload.serialize(e), e.serializeU64(this.max_gas_amount), e.serializeU64(this.gas_unit_price), e.serializeU64(this.expiration_timestamp_secs), this.chain_id.serialize(e);\n    }\n    static deserialize(e) {\n      let t = c.deserialize(e),\n        r = e.deserializeU64(),\n        i = ot.deserialize(e),\n        o = e.deserializeU64(),\n        s = e.deserializeU64(),\n        a = e.deserializeU64(),\n        u = In.deserialize(e);\n      return new n(t, r, i, o, s, a, u);\n    }\n  },\n  On = class extends S {\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32();\n      switch (t) {\n        case 0:\n          return ct.load(e);\n        case 1:\n          return ut.load(e);\n        default:\n          throw new Error(`Unknown variant index for RawTransactionWithData: ${t}`);\n      }\n    }\n  },\n  ct = class n extends On {\n    constructor(e, t) {\n      super(), this.raw_txn = e, this.secondary_signer_addresses = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(0), this.raw_txn.serialize(e), e.serializeVector(this.secondary_signer_addresses);\n    }\n    static load(e) {\n      let t = pe.deserialize(e),\n        r = e.deserializeVector(c);\n      return new n(t, r);\n    }\n  },\n  ut = class n extends On {\n    constructor(e, t, r) {\n      super(), this.raw_txn = e, this.secondary_signer_addresses = t, this.fee_payer_address = r;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(1), this.raw_txn.serialize(e), e.serializeVector(this.secondary_signer_addresses), this.fee_payer_address.serialize(e);\n    }\n    static load(e) {\n      let t = pe.deserialize(e),\n        r = e.deserializeVector(c),\n        i = c.deserialize(e);\n      return new n(t, r, i);\n    }\n  };\nvar Oe = class extends S {\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32();\n      switch (t) {\n        case 0:\n          return dt.load(e);\n        case 1:\n          return Ot.load(e);\n        case 2:\n          return pt.load(e);\n        case 3:\n          return lt.load(e);\n        case 4:\n          return Qe.load(e);\n        default:\n          throw new Error(`Unknown variant index for TransactionAuthenticator: ${t}`);\n      }\n    }\n    isEd25519() {\n      return this instanceof dt;\n    }\n    isMultiEd25519() {\n      return this instanceof Ot;\n    }\n    isMultiAgent() {\n      return this instanceof pt;\n    }\n    isFeePayer() {\n      return this instanceof lt;\n    }\n    isSingleSender() {\n      return this instanceof Qe;\n    }\n  },\n  dt = class n extends Oe {\n    constructor(e, t) {\n      super(), this.public_key = e, this.signature = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(0), this.public_key.serialize(e), this.signature.serialize(e);\n    }\n    static load(e) {\n      let t = R.deserialize(e),\n        r = z.deserialize(e);\n      return new n(t, r);\n    }\n  },\n  Ot = class n extends Oe {\n    constructor(e, t) {\n      super(), this.public_key = e, this.signature = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(1), this.public_key.serialize(e), this.signature.serialize(e);\n    }\n    static load(e) {\n      let t = Dt.deserialize(e),\n        r = _e.deserialize(e);\n      return new n(t, r);\n    }\n  },\n  pt = class n extends Oe {\n    constructor(e, t, r) {\n      super(), this.sender = e, this.secondary_signer_addresses = t, this.secondary_signers = r;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(2), this.sender.serialize(e), e.serializeVector(this.secondary_signer_addresses), e.serializeVector(this.secondary_signers);\n    }\n    static load(e) {\n      let t = V.deserialize(e),\n        r = e.deserializeVector(c),\n        i = e.deserializeVector(V);\n      return new n(t, r, i);\n    }\n  },\n  lt = class n extends Oe {\n    constructor(e, t, r, i) {\n      super(), this.sender = e, this.secondary_signer_addresses = t, this.secondary_signers = r, this.fee_payer = i;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(3), this.sender.serialize(e), e.serializeVector(this.secondary_signer_addresses), e.serializeVector(this.secondary_signers), this.fee_payer.address.serialize(e), this.fee_payer.authenticator.serialize(e);\n    }\n    static load(e) {\n      let t = V.deserialize(e),\n        r = e.deserializeVector(c),\n        i = e.deserializeVector(V),\n        o = c.deserialize(e),\n        s = V.deserialize(e),\n        a = {\n          address: o,\n          authenticator: s\n        };\n      return new n(t, r, i, a);\n    }\n  },\n  Qe = class n extends Oe {\n    constructor(e) {\n      super(), this.sender = e;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(4), this.sender.serialize(e);\n    }\n    static load(e) {\n      let t = V.deserialize(e);\n      return new n(t);\n    }\n  };\nvar Ge = class n extends S {\n  constructor(e, t) {\n    super(), this.raw_txn = e, this.authenticator = t;\n  }\n  serialize(e) {\n    this.raw_txn.serialize(e), this.authenticator.serialize(e);\n  }\n  static deserialize(e) {\n    let t = pe.deserialize(e),\n      r = Oe.deserialize(e);\n    return new n(t, r);\n  }\n};\nvar Gt = class n extends S {\n  constructor(e, t) {\n    super(), this.rawTransaction = e, this.feePayerAddress = t;\n  }\n  serialize(e) {\n    this.rawTransaction.serialize(e), this.feePayerAddress === void 0 ? e.serializeBool(!1) : (e.serializeBool(!0), this.feePayerAddress.serialize(e));\n  }\n  static deserialize(e) {\n    let t = pe.deserialize(e),\n      r = e.deserializeBool(),\n      i;\n    return r && (i = c.deserialize(e)), new n(t, i);\n  }\n};\nvar Gn = class n extends S {\n  constructor(e, t, r) {\n    super(), this.rawTransaction = e, this.feePayerAddress = r, this.secondarySignerAddresses = t;\n  }\n  serialize(e) {\n    this.rawTransaction.serialize(e), e.serializeVector(this.secondarySignerAddresses), this.feePayerAddress === void 0 ? e.serializeBool(!1) : (e.serializeBool(!0), this.feePayerAddress.serialize(e));\n  }\n  static deserialize(e) {\n    let t = pe.deserialize(e),\n      r = e.deserializeVector(c),\n      i = e.deserializeBool(),\n      o;\n    return i && (o = c.deserialize(e)), new n(t, r, o);\n  }\n};\nfunction Bn(n) {\n  return n.feePayerAddress ? new ut(n.rawTransaction, n.secondarySignerAddresses ?? [], n.feePayerAddress) : n.secondarySignerAddresses ? new ct(n.rawTransaction, n.secondarySignerAddresses) : n.rawTransaction;\n}\nfunction Je(n, e) {\n  let t = Ws.create();\n  if (!e.startsWith(\"APTOS::\")) throw new Error(`Domain separator needs to start with 'APTOS::'.  Provided - ${e}`);\n  t.update(e);\n  let r = t.digest(),\n    i = n,\n    o = new Uint8Array(r.length + i.length);\n  return o.set(r), o.set(i, r.length), o;\n}\nfunction sp(n) {\n  return Je(n.bcsToBytes(), `APTOS::${n.constructor.name}`);\n}\nfunction ye(n) {\n  let e = Bn(n);\n  return n.feePayerAddress ? Je(e.bcsToBytes(), ar) : n.secondarySignerAddresses ? Je(e.bcsToBytes(), ar) : Je(e.bcsToBytes(), ai);\n}\nvar ee = class n {\n  constructor(e) {\n    this.signingScheme = 0;\n    let {\n      privateKey: t,\n      address: r\n    } = e;\n    this.privateKey = t, this.publicKey = t.publicKey(), this.accountAddress = r ? c.from(r) : this.publicKey.authKey().derivedAddress();\n  }\n  static generate() {\n    let e = $.generate();\n    return new n({\n      privateKey: e\n    });\n  }\n  static fromDerivationPath(e) {\n    let {\n        path: t,\n        mnemonic: r\n      } = e,\n      i = $.fromDerivationPath(t, r);\n    return new n({\n      privateKey: i\n    });\n  }\n  verifySignature(e) {\n    return this.publicKey.verifySignature(e);\n  }\n  async verifySignatureAsync(e) {\n    return this.publicKey.verifySignatureAsync({\n      ...e,\n      signature: e.signature\n    });\n  }\n  signWithAuthenticator(e) {\n    return new me(this.publicKey, this.privateKey.sign(e));\n  }\n  signTransactionWithAuthenticator(e) {\n    return new me(this.publicKey, this.signTransaction(e));\n  }\n  sign(e) {\n    return this.privateKey.sign(e);\n  }\n  signTransaction(e) {\n    return this.sign(ye(e));\n  }\n};\nfunction br(n) {\n  return typeof n == \"object\" && n !== null && \"getAnyPublicKey\" in n && typeof n.getAnyPublicKey == \"function\";\n}\nvar le = class n {\n  constructor(e) {\n    this.signingScheme = 2;\n    let {\n      privateKey: t,\n      address: r\n    } = e;\n    this.privateKey = t, this.publicKey = new k(t.publicKey()), this.accountAddress = r ? c.from(r) : this.publicKey.authKey().derivedAddress();\n  }\n  getAnyPublicKey() {\n    return this.publicKey;\n  }\n  static generate(e = {}) {\n    let {\n        scheme: t = 0\n      } = e,\n      r;\n    switch (t) {\n      case 0:\n        r = $.generate();\n        break;\n      case 2:\n        r = nt.generate();\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${t}`);\n    }\n    return new n({\n      privateKey: r\n    });\n  }\n  static fromDerivationPath(e) {\n    let {\n        scheme: t = 0,\n        path: r,\n        mnemonic: i\n      } = e,\n      o;\n    switch (t) {\n      case 0:\n        o = $.fromDerivationPath(r, i);\n        break;\n      case 2:\n        o = nt.fromDerivationPath(r, i);\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${t}`);\n    }\n    return new n({\n      privateKey: o\n    });\n  }\n  verifySignature(e) {\n    return this.publicKey.verifySignature(e);\n  }\n  async verifySignatureAsync(e) {\n    return this.publicKey.verifySignatureAsync({\n      ...e,\n      signature: e.signature\n    });\n  }\n  signWithAuthenticator(e) {\n    return new X(this.publicKey, this.sign(e));\n  }\n  signTransactionWithAuthenticator(e) {\n    return new X(this.publicKey, this.signTransaction(e));\n  }\n  sign(e) {\n    return new O(this.privateKey.sign(e));\n  }\n  signTransaction(e) {\n    return this.sign(ye(e));\n  }\n  static fromEd25519Account(e) {\n    return new n({\n      privateKey: e.privateKey,\n      address: e.accountAddress\n    });\n  }\n};\nvar Be = class {\n  static generate(e = {}) {\n    let {\n      scheme: t = 0,\n      legacy: r = !0\n    } = e;\n    return t === 0 && r ? ee.generate() : le.generate({\n      scheme: t\n    });\n  }\n  static fromPrivateKey(e) {\n    let {\n      privateKey: t,\n      address: r,\n      legacy: i = !0\n    } = e;\n    return t instanceof $ && i ? new ee({\n      privateKey: t,\n      address: r\n    }) : new le({\n      privateKey: t,\n      address: r\n    });\n  }\n  static fromPrivateKeyAndAddress(e) {\n    return this.fromPrivateKey(e);\n  }\n  static fromDerivationPath(e) {\n    let {\n      scheme: t = 0,\n      mnemonic: r,\n      path: i,\n      legacy: o = !0\n    } = e;\n    return t === 0 && o ? ee.fromDerivationPath({\n      mnemonic: r,\n      path: i\n    }) : le.fromDerivationPath({\n      scheme: t,\n      mnemonic: r,\n      path: i\n    });\n  }\n  static authKey(e) {\n    let {\n      publicKey: t\n    } = e;\n    return t.authKey();\n  }\n  verifySignature(e) {\n    return this.publicKey.verifySignature(e);\n  }\n  async verifySignatureAsync(e) {\n    return this.publicKey.verifySignatureAsync(e);\n  }\n};\nimport { randomBytes as Qs } from \"@noble/hashes/utils\";\nvar Js = 1209600,\n  Bt = class Bt extends S {\n    constructor(e) {\n      super();\n      let {\n        privateKey: t,\n        expiryDateSecs: r,\n        blinder: i\n      } = e;\n      this.privateKey = t, this.publicKey = new Ct(t.publicKey()), this.expiryDateSecs = r || pi(ve() + Js), this.blinder = i !== void 0 ? T.fromHexInput(i).toUint8Array() : Zs();\n      let o = Cn(this.publicKey.bcsToBytes(), 93);\n      o.push(BigInt(this.expiryDateSecs)), o.push(Et(this.blinder));\n      let s = It(o);\n      this.nonce = s.toString();\n    }\n    getPublicKey() {\n      return this.publicKey;\n    }\n    isExpired() {\n      return Math.floor(Date.now() / 1e3) > this.expiryDateSecs;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(this.publicKey.variant), e.serializeBytes(this.privateKey.toUint8Array()), e.serializeU64(this.expiryDateSecs), e.serializeFixedBytes(this.blinder);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32(),\n        r;\n      switch (t) {\n        case 0:\n          r = $.deserialize(e);\n          break;\n        default:\n          throw new Error(`Unknown variant index for EphemeralPublicKey: ${t}`);\n      }\n      let i = e.deserializeU64(),\n        o = e.deserializeFixedBytes(31);\n      return new Bt({\n        privateKey: r,\n        expiryDateSecs: Number(i),\n        blinder: o\n      });\n    }\n    static fromBytes(e) {\n      return Bt.deserialize(new L(e));\n    }\n    static generate(e) {\n      let t;\n      switch (e?.scheme) {\n        case 0:\n        default:\n          t = $.generate();\n      }\n      return new Bt({\n        privateKey: t,\n        expiryDateSecs: e?.expiryDateSecs\n      });\n    }\n    sign(e) {\n      if (this.isExpired()) throw new Error(\"EphemeralKeyPair has expired\");\n      return new We(this.privateKey.sign(e));\n    }\n  };\nBt.BLINDER_LENGTH = 31;\nvar gt = Bt;\nfunction Zs() {\n  return Qs(gt.BLINDER_LENGTH);\n}\nimport Xs from \"eventemitter3\";\nimport { jwtDecode as ea } from \"jwt-decode\";\nfunction Nn(n) {\n  return n != null && typeof n.checkKeylessAccountValidity == \"function\";\n}\nvar zt = class zt extends S {\n  constructor(t) {\n    super();\n    this.signingScheme = 2;\n    let {\n      address: r,\n      ephemeralKeyPair: i,\n      publicKey: o,\n      uidKey: s,\n      uidVal: a,\n      aud: u,\n      pepper: d,\n      proof: l,\n      proofFetchCallback: y,\n      jwt: p,\n      verificationKeyHash: g\n    } = t;\n    if (this.ephemeralKeyPair = i, this.publicKey = o, this.accountAddress = r ? c.from(r) : this.publicKey.authKey().derivedAddress(), this.uidKey = s, this.uidVal = a, this.aud = u, this.jwt = p, this.emitter = new Xs(), this.proofOrPromise = l, l instanceof ae) this.proof = l;else {\n      if (y === void 0) throw new Error(\"Must provide callback for async proof fetch\");\n      this.emitter.on(\"proofFetchFinish\", async C => {\n        await y(C), this.emitter.removeAllListeners();\n      }), this.init(l);\n    }\n    let f = T.fromHexInput(d).toUint8Array();\n    if (f.length !== zt.PEPPER_LENGTH) throw new Error(`Pepper length in bytes should be ${zt.PEPPER_LENGTH}`);\n    if (this.pepper = f, g !== void 0) {\n      if (T.hexInputToUint8Array(g).length !== 32) throw new Error(\"verificationKeyHash must be 32 bytes\");\n      this.verificationKeyHash = T.hexInputToUint8Array(g);\n    }\n  }\n  getAnyPublicKey() {\n    return new k(this.publicKey);\n  }\n  async init(t) {\n    try {\n      this.proof = await t, this.emitter.emit(\"proofFetchFinish\", {\n        status: \"Success\"\n      });\n    } catch (r) {\n      r instanceof Error ? this.emitter.emit(\"proofFetchFinish\", {\n        status: \"Failed\",\n        error: r.toString()\n      }) : this.emitter.emit(\"proofFetchFinish\", {\n        status: \"Failed\",\n        error: \"Unknown\"\n      });\n    }\n  }\n  serialize(t) {\n    if (this.accountAddress.serialize(t), t.serializeStr(this.jwt), t.serializeStr(this.uidKey), t.serializeFixedBytes(this.pepper), this.ephemeralKeyPair.serialize(t), this.proof === void 0) throw new Error(\"Cannot serialize - proof undefined\");\n    this.proof.serialize(t), t.serializeOption(this.verificationKeyHash, 32);\n  }\n  static partialDeserialize(t) {\n    let r = c.deserialize(t),\n      i = t.deserializeStr(),\n      o = t.deserializeStr(),\n      s = t.deserializeFixedBytes(31),\n      a = gt.deserialize(t),\n      u = ae.deserialize(t),\n      d = t.deserializeOption(\"fixedBytes\", 32);\n    return {\n      address: r,\n      jwt: i,\n      uidKey: o,\n      pepper: s,\n      ephemeralKeyPair: a,\n      proof: u,\n      verificationKeyHash: d\n    };\n  }\n  isExpired() {\n    return this.ephemeralKeyPair.isExpired();\n  }\n  signWithAuthenticator(t) {\n    let r = new O(this.sign(t)),\n      i = new k(this.publicKey);\n    return new X(i, r);\n  }\n  signTransactionWithAuthenticator(t) {\n    let r = new O(this.signTransaction(t)),\n      i = new k(this.publicKey);\n    return new X(i, r);\n  }\n  async waitForProofFetch() {\n    this.proofOrPromise instanceof Promise && (await this.proofOrPromise);\n  }\n  async checkKeylessAccountValidity(t) {\n    if (this.isExpired()) throw b.fromErrorType({\n      type: 0\n    });\n    if (await this.waitForProofFetch(), this.proof === void 0) throw b.fromErrorType({\n      type: 2\n    });\n    let r = ea(this.jwt, {\n      header: !0\n    });\n    if (r.kid === void 0) throw b.fromErrorType({\n      type: 12,\n      details: \"checkKeylessAccountValidity failed. JWT is missing 'kid' in header. This should never happen.\"\n    });\n    if (this.verificationKeyHash !== void 0) {\n      let {\n        verificationKey: i\n      } = await Mt({\n        aptosConfig: t\n      });\n      if (T.hexInputToString(i.hash()) !== T.hexInputToString(this.verificationKeyHash)) throw b.fromErrorType({\n        type: 4\n      });\n    } else console.warn(\"[Aptos SDK] The verification key hash was not set. Proof may be invalid if the verification key has rotated.\");\n    await zt.fetchJWK({\n      aptosConfig: t,\n      publicKey: this.publicKey,\n      kid: r.kid\n    });\n  }\n  sign(t) {\n    let {\n      expiryDateSecs: r\n    } = this.ephemeralKeyPair;\n    if (this.isExpired()) throw b.fromErrorType({\n      type: 0\n    });\n    if (this.proof === void 0) throw b.fromErrorType({\n      type: 1,\n      details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\"\n    });\n    let i = this.ephemeralKeyPair.getPublicKey(),\n      o = this.ephemeralKeyPair.sign(t);\n    return new ue({\n      jwtHeader: li(this.jwt.split(\".\")[0]),\n      ephemeralCertificate: new Nt(this.proof, 0),\n      expiryDateSecs: r,\n      ephemeralPublicKey: i,\n      ephemeralSignature: o\n    });\n  }\n  signTransaction(t) {\n    if (this.proof === void 0) throw b.fromErrorType({\n      type: 1,\n      details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\"\n    });\n    let r = Bn(t),\n      o = new zn(r, this.proof.proof).hash();\n    return this.sign(o);\n  }\n  getSigningMessage(t) {\n    if (this.proof === void 0) throw b.fromErrorType({\n      type: 1,\n      details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\"\n    });\n    let r = Bn(t);\n    return new zn(r, this.proof.proof).hash();\n  }\n  verifySignature(t) {\n    return this.publicKey.verifySignature(t);\n  }\n  async verifySignatureAsync(t) {\n    return this.publicKey.verifySignatureAsync({\n      ...t\n    });\n  }\n  static async fetchJWK(t) {\n    return wr(t);\n  }\n};\nzt.PEPPER_LENGTH = 31;\nvar ce = zt,\n  zn = class extends S {\n    constructor(t, r) {\n      super();\n      this.domainSeparator = \"APTOS::TransactionAndProof\";\n      this.transaction = t, this.proof = r;\n    }\n    serialize(t) {\n      t.serializeFixedBytes(this.transaction.bcsToBytes()), t.serializeOption(this.proof);\n    }\n    hash() {\n      return Je(this.bcsToBytes(), this.domainSeparator);\n    }\n  };\nvar Ne = class n extends ce {\n  constructor(e) {\n    let t = E.create(e);\n    super({\n      publicKey: t,\n      ...e\n    }), this.publicKey = t;\n  }\n  serialize(e) {\n    super.serialize(e);\n  }\n  static deserialize(e) {\n    let {\n        address: t,\n        proof: r,\n        ephemeralKeyPair: i,\n        jwt: o,\n        uidKey: s,\n        pepper: a,\n        verificationKeyHash: u\n      } = ce.partialDeserialize(e),\n      {\n        iss: d,\n        aud: l,\n        uidVal: y\n      } = ze({\n        jwt: o,\n        uidKey: s\n      });\n    return new n({\n      address: t,\n      proof: r,\n      ephemeralKeyPair: i,\n      iss: d,\n      uidKey: s,\n      uidVal: y,\n      aud: l,\n      pepper: a,\n      jwt: o,\n      verificationKeyHash: u\n    });\n  }\n  static fromBytes(e) {\n    return n.deserialize(new L(T.hexInputToUint8Array(e)));\n  }\n  static create(e) {\n    let {\n        address: t,\n        proof: r,\n        jwt: i,\n        ephemeralKeyPair: o,\n        pepper: s,\n        uidKey: a = \"sub\",\n        proofFetchCallback: u,\n        verificationKey: d\n      } = e,\n      {\n        iss: l,\n        aud: y,\n        uidVal: p\n      } = ze({\n        jwt: i,\n        uidKey: a\n      });\n    return new n({\n      address: t,\n      proof: r,\n      ephemeralKeyPair: o,\n      iss: l,\n      uidKey: a,\n      uidVal: p,\n      aud: y,\n      pepper: s,\n      jwt: i,\n      proofFetchCallback: u,\n      verificationKeyHash: d ? d.hash() : void 0\n    });\n  }\n};\nvar mt = class n extends ce {\n  constructor(e) {\n    let t = q.create(e);\n    super({\n      publicKey: t,\n      ...e\n    }), this.publicKey = t, this.audless = e.audless ?? !1;\n  }\n  serialize(e) {\n    super.serialize(e), this.publicKey.jwkAddress.serialize(e);\n  }\n  static deserialize(e) {\n    let {\n        address: t,\n        proof: r,\n        ephemeralKeyPair: i,\n        jwt: o,\n        uidKey: s,\n        pepper: a,\n        verificationKeyHash: u\n      } = ce.partialDeserialize(e),\n      d = c.deserialize(e),\n      {\n        iss: l,\n        aud: y,\n        uidVal: p\n      } = ze({\n        jwt: o,\n        uidKey: s\n      });\n    return new n({\n      address: t,\n      proof: r,\n      ephemeralKeyPair: i,\n      iss: l,\n      uidKey: s,\n      uidVal: p,\n      aud: y,\n      pepper: a,\n      jwt: o,\n      verificationKeyHash: u,\n      jwkAddress: d\n    });\n  }\n  static fromBytes(e) {\n    return n.deserialize(L.fromHex(e));\n  }\n  static create(e) {\n    let {\n        address: t,\n        proof: r,\n        jwt: i,\n        ephemeralKeyPair: o,\n        pepper: s,\n        jwkAddress: a,\n        uidKey: u = \"sub\",\n        proofFetchCallback: d,\n        verificationKey: l\n      } = e,\n      {\n        iss: y,\n        aud: p,\n        uidVal: g\n      } = ze({\n        jwt: i,\n        uidKey: u\n      });\n    return new n({\n      address: t,\n      proof: r,\n      ephemeralKeyPair: o,\n      iss: y,\n      uidKey: u,\n      uidVal: g,\n      aud: p,\n      pepper: s,\n      jwkAddress: c.from(a),\n      jwt: i,\n      proofFetchCallback: d,\n      verificationKeyHash: l ? l.hash() : void 0\n    });\n  }\n};\nvar sn = class n {\n  constructor(e) {\n    this.signingScheme = 3;\n    let {\n        multiKey: t,\n        address: r\n      } = e,\n      i = e.signers.map(a => a instanceof ee ? le.fromEd25519Account(a) : a);\n    if (t.signaturesRequired > i.length) throw new Error(`Not enough signers provided to satisfy the required signatures. Need ${t.signaturesRequired} signers, but only ${i.length} provided`);\n    if (t.signaturesRequired < i.length) throw new Error(`More signers provided than required. Need ${t.signaturesRequired} signers, but ${i.length} provided`);\n    this.publicKey = t, this.accountAddress = r ? c.from(r) : this.publicKey.authKey().derivedAddress();\n    let o = [];\n    for (let a of i) o.push(this.publicKey.getIndex(a.getAnyPublicKey()));\n    let s = i.map((a, u) => [a, o[u]]);\n    s.sort((a, u) => a[1] - u[1]), this.signers = s.map(a => a[0]), this.signerIndicies = s.map(a => a[1]), this.signaturesBitmap = this.publicKey.createBitmap({\n      bits: o\n    });\n  }\n  static fromPublicKeysAndSigners(e) {\n    let {\n        address: t,\n        publicKeys: r,\n        signaturesRequired: i,\n        signers: o\n      } = e,\n      s = new Se({\n        publicKeys: r,\n        signaturesRequired: i\n      });\n    return new n({\n      multiKey: s,\n      signers: o,\n      address: t\n    });\n  }\n  static isMultiKeySigner(e) {\n    return e instanceof n;\n  }\n  signWithAuthenticator(e) {\n    return new xe(this.publicKey, this.sign(e));\n  }\n  signTransactionWithAuthenticator(e) {\n    return new xe(this.publicKey, this.signTransaction(e));\n  }\n  async waitForProofFetch() {\n    let t = this.signers.filter(r => r instanceof ce).map(async r => r.waitForProofFetch());\n    await Promise.all(t);\n  }\n  async checkKeylessAccountValidity(e) {\n    let r = this.signers.filter(i => i instanceof ce).map(i => i.checkKeylessAccountValidity(e));\n    await Promise.all(r);\n  }\n  sign(e) {\n    let t = [];\n    for (let r of this.signers) t.push(r.sign(e));\n    return new Pe({\n      signatures: t,\n      bitmap: this.signaturesBitmap\n    });\n  }\n  signTransaction(e) {\n    let t = [];\n    for (let r of this.signers) t.push(r.signTransaction(e));\n    return new Pe({\n      signatures: t,\n      bitmap: this.signaturesBitmap\n    });\n  }\n  verifySignature(e) {\n    return this.publicKey.verifySignature(e);\n  }\n  async verifySignatureAsync(e) {\n    return await this.publicKey.verifySignatureAsync(e);\n  }\n};\nvar Mn = class {\n  constructor(e) {\n    this.signingScheme = 1;\n    let {\n      signers: t,\n      publicKey: r,\n      address: i\n    } = e;\n    if (this.publicKey = r, this.accountAddress = i ? c.from(i) : this.publicKey.authKey().derivedAddress(), r.threshold > t.length) throw new Error(`Not enough signers provided to satisfy the required signatures. Need ${r.threshold} signers, but only ${t.length} provided`);\n    if (r.threshold < t.length) throw new Error(`More signers provided than required. Need ${r.threshold} signers, but ${t.length} provided`);\n    let o = [];\n    for (let a of t) o.push(this.publicKey.getIndex(a.publicKey()));\n    let s = t.map((a, u) => [a, o[u]]);\n    s.sort((a, u) => a[1] - u[1]), this.signers = s.map(a => a[0]), this.signerIndices = s.map(a => a[1]), this.signaturesBitmap = this.publicKey.createBitmap({\n      bits: o\n    });\n  }\n  verifySignature(e) {\n    return this.publicKey.verifySignature(e);\n  }\n  async verifySignatureAsync(e) {\n    return this.publicKey.verifySignatureAsync({\n      ...e,\n      signature: e.signature\n    });\n  }\n  signWithAuthenticator(e) {\n    return new ke(this.publicKey, this.sign(e));\n  }\n  signTransactionWithAuthenticator(e) {\n    return new ke(this.publicKey, this.signTransaction(e));\n  }\n  sign(e) {\n    let t = [];\n    for (let r of this.signers) t.push(r.sign(e));\n    return new _e({\n      signatures: t,\n      bitmap: this.signaturesBitmap\n    });\n  }\n  signTransaction(e) {\n    return this.sign(ye(e));\n  }\n};\nfunction Zi(n) {\n  let e = n.deserializeUleb128AsU32();\n  if (!Object.values(Q).includes(e)) throw new Error(`Deserialization of Account failed: SigningScheme variant ${e} is invalid`);\n  return {\n    address: c.deserialize(n),\n    signingScheme: e\n  };\n}\nfunction Yi(n, e) {\n  if (e.serializeStr(n.jwt), e.serializeStr(n.uidKey), e.serializeFixedBytes(n.pepper), n.ephemeralKeyPair.serialize(e), n.proof === void 0) throw new Error(\"Cannot serialize - proof undefined\");\n  n.proof.serialize(e), e.serializeOption(n.verificationKeyHash, 32);\n}\nfunction Xi(n) {\n  let e = n.deserializeStr(),\n    t = n.deserializeStr(),\n    r = n.deserializeFixedBytes(31),\n    i = gt.deserialize(n),\n    o = ae.deserialize(n),\n    s = n.deserializeOption(\"fixedBytes\", 32);\n  return {\n    jwt: e,\n    uidKey: t,\n    pepper: r,\n    ephemeralKeyPair: i,\n    proof: o,\n    verificationKeyHash: s\n  };\n}\nvar eo;\n(y => {\n  function n(p) {\n    let g = new j();\n    switch (g.serializeU32AsUleb128(p.signingScheme), p.accountAddress.serialize(g), p.signingScheme) {\n      case 0:\n        return p.privateKey.serialize(g), g.toUint8Array();\n      case 2:\n        {\n          if (!br(p)) throw new Error(\"Account is not a SingleKeySigner\");\n          let f = p.getAnyPublicKey();\n          switch (g.serializeU32AsUleb128(f.variant), f.variant) {\n            case 3:\n              return Yi(p, g), g.toUint8Array();\n            case 4:\n              {\n                let C = p;\n                return Yi(C, g), C.publicKey.jwkAddress.serialize(g), g.serializeBool(C.audless), g.toUint8Array();\n              }\n            case 1:\n            case 0:\n              return p.privateKey.serialize(g), g.toUint8Array();\n            default:\n              throw new Error(`Invalid public key variant: ${f.variant}`);\n          }\n        }\n      case 3:\n        {\n          let f = p;\n          return f.publicKey.serialize(g), g.serializeU32AsUleb128(f.signers.length), f.signers.forEach(C => {\n            g.serializeFixedBytes(n(C));\n          }), g.toUint8Array();\n        }\n      default:\n        throw new Error(`Deserialization of Account failed: invalid signingScheme value ${p.signingScheme}`);\n    }\n  }\n  y.toBytes = n;\n  function e(p) {\n    return T.hexInputToStringWithoutPrefix(n(p));\n  }\n  y.toHexStringWithoutPrefix = e;\n  function t(p) {\n    return T.hexInputToString(n(p));\n  }\n  y.toHexString = t;\n  function r(p) {\n    let {\n      address: g,\n      signingScheme: f\n    } = Zi(p);\n    switch (f) {\n      case 0:\n        {\n          let C = $.deserialize(p);\n          return new ee({\n            privateKey: C,\n            address: g\n          });\n        }\n      case 2:\n        {\n          let C = p.deserializeUleb128AsU32();\n          switch (C) {\n            case 0:\n              {\n                let M = $.deserialize(p);\n                return new le({\n                  privateKey: M,\n                  address: g\n                });\n              }\n            case 1:\n              {\n                let M = nt.deserialize(p);\n                return new le({\n                  privateKey: M,\n                  address: g\n                });\n              }\n            case 3:\n              {\n                let M = Xi(p),\n                  Ee = ze(M);\n                return new Ne({\n                  ...M,\n                  ...Ee\n                });\n              }\n            case 4:\n              {\n                let M = Xi(p),\n                  Ee = c.deserialize(p),\n                  Le = p.deserializeBool(),\n                  $e = ze(M);\n                return new mt({\n                  ...M,\n                  ...$e,\n                  jwkAddress: Ee,\n                  audless: Le\n                });\n              }\n            default:\n              throw new Error(`Unsupported public key variant ${C}`);\n          }\n        }\n      case 3:\n        {\n          let C = Se.deserialize(p),\n            M = p.deserializeUleb128AsU32(),\n            Ee = new Array();\n          for (let Le = 0; Le < M; Le += 1) {\n            let $e = r(p);\n            if (!br($e) && !($e instanceof ee)) throw new Error(\"Deserialization of MultiKeyAccount failed. Signer is not a SingleKeySigner or Ed25519Account\");\n            Ee.push($e);\n          }\n          return new sn({\n            multiKey: C,\n            signers: Ee,\n            address: g\n          });\n        }\n      default:\n        throw new Error(`Deserialization of Account failed: invalid signingScheme value ${f}`);\n    }\n  }\n  y.deserialize = r;\n  function i(p) {\n    let g = d(p);\n    if (!(g instanceof Ne)) throw new Error(\"Deserialization of KeylessAccount failed\");\n    return g;\n  }\n  y.keylessAccountFromHex = i;\n  function o(p) {\n    let g = d(p);\n    if (!(g instanceof mt)) throw new Error(\"Deserialization of FederatedKeylessAccount failed\");\n    return g;\n  }\n  y.federatedKeylessAccountFromHex = o;\n  function s(p) {\n    let g = d(p);\n    if (!(g instanceof sn)) throw new Error(\"Deserialization of MultiKeyAccount failed\");\n    return g;\n  }\n  y.multiKeyAccountFromHex = s;\n  function a(p) {\n    let g = d(p);\n    if (!(g instanceof le)) throw new Error(\"Deserialization of SingleKeyAccount failed\");\n    return g;\n  }\n  y.singleKeyAccountFromHex = a;\n  function u(p) {\n    let g = d(p);\n    if (!(g instanceof ee)) throw new Error(\"Deserialization of Ed25519Account failed\");\n    return g;\n  }\n  y.ed25519AccountFromHex = u;\n  function d(p) {\n    return r(L.fromHex(p));\n  }\n  y.fromHex = d;\n  function l(p) {\n    return d(p);\n  }\n  y.fromBytes = l;\n})(eo || (eo = {}));\nimport { sha3_256 as to } from \"@noble/hashes/sha3\";\nvar Vn = class n extends Be {\n  constructor({\n    signer: t,\n    accountAddress: r,\n    authenticationFunction: i\n  }) {\n    super();\n    this.signingScheme = 2;\n    if (!vt(i)) throw new Error(`Invalid authentication function ${i} passed into AbstractedAccount`);\n    this.authenticationFunction = i, this.accountAddress = r, this.publicKey = new ti(this.accountAddress), this.sign = o => new ir(t(o));\n  }\n  static fromPermissionedSigner({\n    signer: t,\n    accountAddress: r\n  }) {\n    return new n({\n      signer: i => {\n        let o = new j();\n        return t.publicKey.serialize(o), t.sign(i).serialize(o), o.toUint8Array();\n      },\n      accountAddress: r ?? t.accountAddress,\n      authenticationFunction: \"0x1::permissioned_delegation::authenticate\"\n    });\n  }\n  signWithAuthenticator(t) {\n    return new rt(this.authenticationFunction, to(t), this.sign(to(t)).toUint8Array());\n  }\n  signTransactionWithAuthenticator(t) {\n    return this.signWithAuthenticator(ye(t));\n  }\n  signTransaction(t) {\n    return this.sign(ye(t));\n  }\n  setSigner(t) {\n    this.sign = r => new ir(t(r));\n  }\n};\nimport { sha3_256 as Tr } from \"@noble/hashes/sha3\";\nvar an = class an extends Vn {\n  constructor({\n    signer: e,\n    authenticationFunction: t,\n    abstractPublicKey: r\n  }) {\n    let i = new c(an.computeAccountAddress(t, r));\n    super({\n      accountAddress: i,\n      signer: e,\n      authenticationFunction: t\n    }), this.abstractPublicKey = r;\n  }\n  static computeAccountAddress(e, t) {\n    if (!vt(e)) throw new Error(`Invalid authentication function ${e} passed into DerivableAbstractedAccount`);\n    let [r, i, o] = e.split(\"::\"),\n      s = Tr.create(),\n      a = new j();\n    c.fromString(r).serialize(a), a.serializeStr(i), a.serializeStr(o), s.update(a.toUint8Array());\n    let u = new j();\n    return u.serializeBytes(t), s.update(u.toUint8Array()), s.update(new Uint8Array([an.ADDRESS_DOMAIN_SEPERATOR])), s.digest();\n  }\n  signWithAuthenticator(e) {\n    return new rt(this.authenticationFunction, Tr(e), this.sign(Tr(e)).value, this.abstractPublicKey);\n  }\n};\nan.ADDRESS_DOMAIN_SEPERATOR = 5;\nvar no = an;\nimport { sha3_256 as da } from \"@noble/hashes/sha3\";\nfunction ro(n) {\n  return !!n.match(/^[_a-zA-Z0-9]+$/);\n}\nfunction io(n) {\n  return !!n.match(/\\s/);\n}\nfunction ta(n) {\n  return !!n.match(/^T[0-9]+$/);\n}\nfunction na(n) {\n  return !!n.match(/^&.+$/);\n}\nfunction ra(n) {\n  switch (n) {\n    case \"signer\":\n    case \"address\":\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n      return !0;\n    default:\n      return !1;\n  }\n}\nfunction ia(n, e) {\n  let t = e;\n  for (; t < n.length; t += 1) {\n    let r = n[t];\n    if (!io(r)) break;\n  }\n  return t;\n}\nvar oa = (f => (f.InvalidTypeTag = \"unknown type\", f.UnexpectedGenericType = \"unexpected generic type\", f.UnexpectedTypeArgumentClose = \"unexpected '>'\", f.UnexpectedWhitespaceCharacter = \"unexpected whitespace character\", f.UnexpectedComma = \"unexpected ','\", f.TypeArgumentCountMismatch = \"type argument count doesn't match expected amount\", f.MissingTypeArgumentClose = \"no matching '>' for '<'\", f.MissingTypeArgument = \"no type argument before ','\", f.UnexpectedPrimitiveTypeArguments = \"primitive types not expected to have type arguments\", f.UnexpectedVectorTypeArgumentCount = \"vector type expected to have exactly one type argument\", f.UnexpectedStructFormat = \"unexpected struct format, must be of the form 0xaddress::module_name::struct_name\", f.InvalidModuleNameCharacter = \"module name must only contain alphanumeric or '_' characters\", f.InvalidStructNameCharacter = \"struct name must only contain alphanumeric or '_' characters\", f.InvalidAddress = \"struct address must be valid\", f))(oa || {}),\n  N = class extends Error {\n    constructor(e, t) {\n      super(`Failed to parse typeTag '${e}', ${t}`);\n    }\n  };\nfunction Ae(n, e) {\n  let t = e?.allowGenerics ?? !1,\n    r = [],\n    i = [],\n    o = [],\n    s = 0,\n    a = \"\",\n    u = 1;\n  for (; s < n.length;) {\n    let d = n[s];\n    if (d === \"<\") r.push({\n      savedExpectedTypes: u,\n      savedStr: a,\n      savedTypes: o\n    }), a = \"\", o = [], u = 1;else if (d === \">\") {\n      if (a !== \"\") {\n        let f = cn(a, i, t);\n        o.push(f);\n      }\n      let l = r.pop();\n      if (l === void 0) throw new N(n, \"unexpected '>'\");\n      if (u !== o.length) throw new N(n, \"type argument count doesn't match expected amount\");\n      let {\n        savedStr: y,\n        savedTypes: p,\n        savedExpectedTypes: g\n      } = l;\n      i = o, o = p, a = y, u = g;\n    } else if (d === \",\") {\n      if (r.length === 0) throw new N(n, \"unexpected ','\");\n      if (a.length === 0) throw new N(n, \"no type argument before ','\");\n      let l = cn(a, i, t);\n      i = [], o.push(l), a = \"\", u += 1;\n    } else if (io(d)) {\n      let l = !1;\n      if (a.length !== 0) {\n        let p = cn(a, i, t);\n        i = [], o.push(p), a = \"\", l = !0;\n      }\n      s = ia(n, s);\n      let y = n[s];\n      if (s < n.length && l && y !== \",\" && y !== \">\") throw new N(n, \"unexpected whitespace character\");\n      continue;\n    } else a += d;\n    s += 1;\n  }\n  if (r.length > 0) throw new N(n, \"no matching '>' for '<'\");\n  switch (o.length) {\n    case 0:\n      return cn(a, i, t);\n    case 1:\n      if (a === \"\") return o[0];\n      throw new N(n, \"unexpected ','\");\n    default:\n      throw new N(n, \"unexpected whitespace character\");\n  }\n}\nfunction cn(n, e, t) {\n  let r = n.trim(),\n    i = r.toLowerCase();\n  if (ra(i) && e.length > 0) throw new N(n, \"primitive types not expected to have type arguments\");\n  switch (r.toLowerCase()) {\n    case \"signer\":\n      return new it();\n    case \"bool\":\n      return new G();\n    case \"address\":\n      return new F();\n    case \"u8\":\n      return new oe();\n    case \"u16\":\n      return new Fe();\n    case \"u32\":\n      return new Ue();\n    case \"u64\":\n      return new H();\n    case \"u128\":\n      return new De();\n    case \"u256\":\n      return new Re();\n    case \"vector\":\n      if (e.length !== 1) throw new N(n, \"vector type expected to have exactly one type argument\");\n      return new K(e[0]);\n    default:\n      if (na(r)) {\n        let a = r.substring(1);\n        return new Rn(cn(a, e, t));\n      }\n      if (ta(r)) {\n        if (t) return new D(Number(r.split(\"T\")[1]));\n        throw new N(n, \"unexpected generic type\");\n      }\n      if (!r.match(/:/)) throw new N(n, \"unknown type\");\n      let o = r.split(\"::\");\n      if (o.length !== 3) throw new N(n, \"unexpected struct format, must be of the form 0xaddress::module_name::struct_name\");\n      let s;\n      try {\n        s = c.fromString(o[0]);\n      } catch {\n        throw new N(n, \"struct address must be valid\");\n      }\n      if (!ro(o[1])) throw new N(n, \"module name must only contain alphanumeric or '_' characters\");\n      if (!ro(o[2])) throw new N(n, \"struct name must only contain alphanumeric or '_' characters\");\n      return new m(new Ke(s, new _(o[1]), new _(o[2]), e));\n  }\n}\nfunction oo(n) {\n  return typeof n == \"boolean\";\n}\nfunction Me(n) {\n  return typeof n == \"string\";\n}\nfunction sa(n) {\n  return typeof n == \"number\";\n}\nfunction Hn(n) {\n  if (sa(n)) return n;\n  if (Me(n) && n !== \"\") return Number.parseInt(n, 10);\n}\nfunction Ln(n) {\n  return typeof n == \"number\" || typeof n == \"bigint\" || typeof n == \"string\";\n}\nfunction so(n) {\n  return n == null;\n}\nfunction ao(n) {\n  return Sr(n) || xr(n) || Kr(n) || Cr(n) || Er(n) || Ir(n) || vr(n) || $n(n) || Pr(n) || aa(n) || n instanceof P || n instanceof J;\n}\nfunction Sr(n) {\n  return n instanceof B;\n}\nfunction $n(n) {\n  return n instanceof c;\n}\nfunction Pr(n) {\n  return n instanceof v;\n}\nfunction aa(n) {\n  return n instanceof wt;\n}\nfunction xr(n) {\n  return n instanceof he;\n}\nfunction Kr(n) {\n  return n instanceof St;\n}\nfunction Cr(n) {\n  return n instanceof Pt;\n}\nfunction Er(n) {\n  return n instanceof be;\n}\nfunction Ir(n) {\n  return n instanceof xt;\n}\nfunction vr(n) {\n  return n instanceof Kt;\n}\nfunction co(n) {\n  return \"bytecode\" in n;\n}\nfunction I(n, e) {\n  throw new Error(`Type mismatch for argument ${e}, expected '${n}'`);\n}\nfunction uo(n) {\n  let e = n.params.findIndex(t => t !== \"signer\" && t !== \"&signer\");\n  return e < 0 ? n.params.length : e;\n}\nvar ca = new TextEncoder();\nfunction Vt(n) {\n  return n?.map(e => Me(e) ? Ae(e) : e) ?? [];\n}\nasync function kr(n, e, t) {\n  return (await qn({\n    aptosConfig: t,\n    accountAddress: n,\n    moduleName: e\n  })).abi;\n}\nasync function Fr(n, e, t, r) {\n  let i = await kr(n, e, r);\n  if (!i) throw new Error(`Could not find module ABI for '${n}::${e}'`);\n  return i.exposed_functions.find(o => o.name === t);\n}\nasync function Am(n, e, t, r) {\n  let i = await Fr(n, e, t, r);\n  if (!i) throw new Error(`Could not find function ABI for '${n}::${e}::${t}'`);\n  let o = [];\n  for (let s = 0; s < i.params.length; s += 1) o.push(Ae(i.params[s], {\n    allowGenerics: !0\n  }));\n  return {\n    typeParameters: i.generic_type_params,\n    parameters: o\n  };\n}\nasync function po(n, e, t, r) {\n  let i = await Fr(n, e, t, r);\n  if (!i) throw new Error(`Could not find entry function ABI for '${n}::${e}::${t}'`);\n  if (!i.is_entry) throw new Error(`'${n}::${e}::${t}' is not an entry function`);\n  let o = uo(i),\n    s = [];\n  for (let a = o; a < i.params.length; a += 1) s.push(Ae(i.params[a], {\n    allowGenerics: !0\n  }));\n  return {\n    signers: o,\n    typeParameters: i.generic_type_params,\n    parameters: s\n  };\n}\nasync function lo(n, e, t, r) {\n  let i = await Fr(n, e, t, r);\n  if (!i) throw new Error(`Could not find view function ABI for '${n}::${e}::${t}'`);\n  if (!i.is_view) throw new Error(`'${n}::${e}::${t}' is not an view function`);\n  let o = [];\n  for (let a = 0; a < i.params.length; a += 1) o.push(Ae(i.params[a], {\n    allowGenerics: !0\n  }));\n  let s = [];\n  for (let a = 0; a < i.return.length; a += 1) s.push(Ae(i.return[a], {\n    allowGenerics: !0\n  }));\n  return {\n    typeParameters: i.generic_type_params,\n    parameters: o,\n    returnTypes: s\n  };\n}\nfunction fm(n, e, t, r, i) {\n  return n instanceof Tt ? n : Tt.newBytes(Ht(e, t, n, r, i).bcsToBytes());\n}\nfunction Ht(n, e, t, r, i, o) {\n  let s;\n  if (\"exposed_functions\" in e) {\n    let a = e.exposed_functions.find(u => u.name === n);\n    if (!a) throw new Error(`Could not find function ABI for '${e.address}::${e.name}::${n}'`);\n    if (r >= a.params.length) throw new Error(`Too many arguments for '${n}', expected ${a.params.length}`);\n    s = Ae(a.params[r], {\n      allowGenerics: !0\n    });\n  } else {\n    if (r >= e.parameters.length) throw new Error(`Too many arguments for '${n}', expected ${e.parameters.length}`);\n    s = e.parameters[r];\n  }\n  return yt(t, s, r, i, \"exposed_functions\" in e ? e : void 0, o);\n}\nfunction yt(n, e, t, r, i, o) {\n  return ao(n) ? (_r(e, n, t), n) : ua(n, e, t, r, i, o);\n}\nfunction ua(n, e, t, r, i, o) {\n  if (e.isBool()) {\n    if (oo(n)) return new B(n);\n    if (Me(n)) {\n      if (n === \"true\") return new B(!0);\n      if (n === \"false\") return new B(!1);\n    }\n    I(\"boolean\", t);\n  }\n  if (e.isAddress()) {\n    if (Me(n)) return c.fromString(n);\n    I(\"string | AccountAddress\", t);\n  }\n  if (e.isU8()) {\n    let s = Hn(n);\n    if (s !== void 0) return new he(s);\n    I(\"number | string\", t);\n  }\n  if (e.isU16()) {\n    let s = Hn(n);\n    if (s !== void 0) return new St(s);\n    I(\"number | string\", t);\n  }\n  if (e.isU32()) {\n    let s = Hn(n);\n    if (s !== void 0) return new Pt(s);\n    I(\"number | string\", t);\n  }\n  if (e.isU64()) {\n    if (Ln(n)) return new be(BigInt(n));\n    I(\"bigint | number | string\", t);\n  }\n  if (e.isU128()) {\n    if (Ln(n)) return new xt(BigInt(n));\n    I(\"bigint | number | string\", t);\n  }\n  if (e.isU256()) {\n    if (Ln(n)) return new Kt(BigInt(n));\n    I(\"bigint | number | string\", t);\n  }\n  if (e.isGeneric()) {\n    let s = e.value;\n    if (s < 0 || s >= r.length) throw new Error(`Generic argument ${e.toString()} is invalid for argument ${t}`);\n    return yt(n, r[s], t, r, i);\n  }\n  if (e.isVector()) {\n    if (e.value.isU8()) {\n      if (Me(n)) return P.U8(ca.encode(n));\n      if (n instanceof Uint8Array) return P.U8(n);\n      if (n instanceof ArrayBuffer) return P.U8(new Uint8Array(n));\n    }\n    if (Me(n) && n.startsWith(\"[\")) return yt(JSON.parse(n), e, t, r);\n    if (Array.isArray(n)) return new P(n.map(s => yt(s, e.value, t, r, i)));\n    throw new Error(`Type mismatch for argument ${t}, type '${e.toString()}'`);\n  }\n  if (e.isStruct()) {\n    if (e.isString()) {\n      if (Me(n)) return new v(n);\n      I(\"string\", t);\n    }\n    if (e.isObject()) {\n      if (Me(n)) return c.fromString(n);\n      I(\"string | AccountAddress\", t);\n    }\n    if (e.isDelegationKey() || e.isRateLimiter()) {\n      if (n instanceof Uint8Array) return new wt(n);\n      I(\"Uint8Array\", t);\n    }\n    if (e.isOption()) {\n      if (so(n)) {\n        let a = e.value.typeArgs[0];\n        return a instanceof G ? new J(null) : a instanceof F ? new J(null) : a instanceof oe ? new J(null) : a instanceof Fe ? new J(null) : a instanceof Ue ? new J(null) : a instanceof H ? new J(null) : a instanceof De ? new J(null) : a instanceof Re ? new J(null) : new J(null);\n      }\n      return new J(yt(n, e.value.typeArgs[0], t, r, i));\n    }\n    if (i?.structs.find(a => a.name === e.value.name.identifier)?.fields.length === 0 && n instanceof Uint8Array) return new wt(n);\n    if (n instanceof Uint8Array && o?.allowUnknownStructs) return console.warn(`Unsupported struct input type for argument ${t}. Continuing since 'allowUnknownStructs' is enabled.`), new wt(n);\n    throw new Error(`Unsupported struct input type for argument ${t}, type '${e.toString()}'`);\n  }\n  throw new Error(`Type mismatch for argument ${t}, type '${e.toString()}'`);\n}\nfunction _r(n, e, t) {\n  if (n.isBool()) {\n    if (Sr(e)) return;\n    I(\"Bool\", t);\n  }\n  if (n.isAddress()) {\n    if ($n(e)) return;\n    I(\"AccountAddress\", t);\n  }\n  if (n.isU8()) {\n    if (xr(e)) return;\n    I(\"U8\", t);\n  }\n  if (n.isU16()) {\n    if (Kr(e)) return;\n    I(\"U16\", t);\n  }\n  if (n.isU32()) {\n    if (Cr(e)) return;\n    I(\"U32\", t);\n  }\n  if (n.isU64()) {\n    if (Er(e)) return;\n    I(\"U64\", t);\n  }\n  if (n.isU128()) {\n    if (Ir(e)) return;\n    I(\"U128\", t);\n  }\n  if (n.isU256()) {\n    if (vr(e)) return;\n    I(\"U256\", t);\n  }\n  if (n.isVector()) {\n    if (e instanceof P) {\n      e.values.length > 0 && _r(n.value, e.values[0], t);\n      return;\n    }\n    I(\"MoveVector\", t);\n  }\n  if (n instanceof m) {\n    if (n.isString()) {\n      if (Pr(e)) return;\n      I(\"MoveString\", t);\n    }\n    if (n.isObject()) {\n      if ($n(e)) return;\n      I(\"AccountAddress\", t);\n    }\n    if (n.isOption()) {\n      if (e instanceof J) {\n        e.value !== void 0 && _r(n.value.typeArgs[0], e.value, t);\n        return;\n      }\n      I(\"MoveOption\", t);\n    }\n  }\n  throw new Error(`Type mismatch for argument ${t}, expected '${n.toString()}'`);\n}\nasync function Wn(n) {\n  if (co(n)) return ga(n);\n  let {\n      moduleAddress: e,\n      moduleName: t,\n      functionName: r\n    } = Y(n.function),\n    i = await Ao({\n      key: \"entry-function\",\n      moduleAddress: e,\n      moduleName: t,\n      functionName: r,\n      aptosConfig: n.aptosConfig,\n      abi: n.abi,\n      fetch: po\n    });\n  return pa({\n    ...n,\n    abi: i\n  });\n}\nfunction pa(n) {\n  let e = n.abi,\n    {\n      moduleAddress: t,\n      moduleName: r,\n      functionName: i\n    } = Y(n.function),\n    o = Vt(n.typeArguments);\n  if (o.length !== e.typeParameters.length) throw new Error(`Type argument count mismatch, expected ${e.typeParameters.length}, received ${o.length}`);\n  let s = n.functionArguments.map((u, d) => Ht(n.function, e, u, d, o));\n  if (s.length !== e.parameters.length) throw new Error(`Too few arguments for '${t}::${r}::${i}', expected ${e.parameters.length} but got ${s.length}`);\n  let a = at.build(`${t}::${r}`, i, o, s);\n  if (\"multisigAddress\" in n) {\n    let u = c.from(n.multisigAddress);\n    return new tn(new rn(u, new on(a)));\n  }\n  return new en(a);\n}\nasync function go(n) {\n  let {\n      moduleAddress: e,\n      moduleName: t,\n      functionName: r\n    } = Y(n.function),\n    i = await Ao({\n      key: \"view-function\",\n      moduleAddress: e,\n      moduleName: t,\n      functionName: r,\n      aptosConfig: n.aptosConfig,\n      abi: n.abi,\n      fetch: lo\n    });\n  return la({\n    abi: i,\n    ...n\n  });\n}\nfunction la(n) {\n  let e = n.abi,\n    {\n      moduleAddress: t,\n      moduleName: r,\n      functionName: i\n    } = Y(n.function),\n    o = Vt(n.typeArguments);\n  if (o.length !== e.typeParameters.length) throw new Error(`Type argument count mismatch, expected ${e.typeParameters.length}, received ${o.length}`);\n  let s = n?.functionArguments?.map((a, u) => Ht(n.function, e, a, u, o)) ?? [];\n  if (s.length !== e.parameters.length) throw new Error(`Too few arguments for '${t}::${r}::${i}', expected ${e.parameters.length} but got ${s.length}`);\n  return at.build(`${t}::${r}`, i, o, s);\n}\nfunction ga(n) {\n  return new st(new nn(T.fromHexInput(n.bytecode).toUint8Array(), Vt(n.typeArguments), n.functionArguments));\n}\nasync function Ur(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      payload: r,\n      options: i,\n      feePayerAddress: o\n    } = n,\n    s = async () => sr[e.network] ? {\n      chainId: sr[e.network]\n    } : {\n      chainId: (await _n({\n        aptosConfig: e\n      })).chain_id\n    },\n    a = async () => i?.gasUnitPrice ? {\n      gasEstimate: i.gasUnitPrice\n    } : {\n      gasEstimate: (await Fn({\n        aptosConfig: e\n      })).gas_estimate\n    },\n    u = async () => {\n      let C = async () => i?.accountSequenceNumber !== void 0 ? i.accountSequenceNumber : (await kn({\n        aptosConfig: e,\n        accountAddress: t\n      })).sequence_number;\n      if (o && c.from(o).equals(c.ZERO)) try {\n        return await C();\n      } catch {\n        return 0;\n      } else return C();\n    },\n    [{\n      chainId: d\n    }, {\n      gasEstimate: l\n    }, y] = await Promise.all([s(), a(), u()]),\n    {\n      maxGasAmount: p,\n      gasUnitPrice: g,\n      expireTimestamp: f\n    } = {\n      maxGasAmount: i?.maxGasAmount ? BigInt(i.maxGasAmount) : BigInt(2e5),\n      gasUnitPrice: i?.gasUnitPrice ?? BigInt(l),\n      expireTimestamp: i?.expireTimestamp ?? BigInt(Math.floor(Date.now() / 1e3) + 20)\n    };\n  return new pe(c.from(t), BigInt(y), r, BigInt(p), BigInt(g), BigInt(f), new In(d));\n}\nasync function Dr(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      payload: r,\n      options: i,\n      feePayerAddress: o\n    } = n,\n    s = await Ur({\n      aptosConfig: e,\n      sender: t,\n      payload: r,\n      options: i,\n      feePayerAddress: o\n    });\n  if (\"secondarySignerAddresses\" in n) {\n    let a = n.secondarySignerAddresses?.map(u => c.from(u)) ?? [];\n    return new Gn(s, a, n.feePayerAddress ? c.from(n.feePayerAddress) : void 0);\n  }\n  return new Gt(s, n.feePayerAddress ? c.from(n.feePayerAddress) : void 0);\n}\nfunction mo(n) {\n  let {\n      signerPublicKey: e,\n      transaction: t,\n      secondarySignersPublicKeys: r,\n      feePayerPublicKey: i\n    } = n,\n    o = Lt(e);\n  if (t.feePayerAddress) {\n    let a = new ut(t.rawTransaction, t.secondarySignerAddresses ?? [], t.feePayerAddress),\n      u = [];\n    t.secondarySignerAddresses && (r ? u = r.map(y => Lt(y)) : u = Array.from({\n      length: t.secondarySignerAddresses.length\n    }, () => Lt(void 0)));\n    let d = Lt(i),\n      l = new lt(o, t.secondarySignerAddresses ?? [], u, {\n        address: t.feePayerAddress,\n        authenticator: d\n      });\n    return new Ge(a.raw_txn, l).bcsToBytes();\n  }\n  if (t.secondarySignerAddresses) {\n    let a = new ct(t.rawTransaction, t.secondarySignerAddresses),\n      u = [];\n    r ? u = r.map(l => Lt(l)) : u = Array.from({\n      length: t.secondarySignerAddresses.length\n    }, () => Lt(void 0));\n    let d = new pt(o, t.secondarySignerAddresses, u);\n    return new Ge(a.raw_txn, d).bcsToBytes();\n  }\n  let s;\n  if (o instanceof me) s = new dt(o.public_key, o.signature);else if (o instanceof X || o instanceof xe) s = new Qe(o);else if (o instanceof Rt) s = new Qe(o);else throw new Error(\"Invalid public key\");\n  return new Ge(t.rawTransaction, s).bcsToBytes();\n}\nfunction Lt(n) {\n  if (!n) return new Rt();\n  let t = E.isInstance(n) || q.isInstance(n) || Ft.isInstance(n) ? new k(n) : n,\n    r = new z(new Uint8Array(64));\n  if (R.isInstance(t)) return new me(t, r);\n  if (k.isInstance(t)) return E.isInstance(t.publicKey) ? new X(t, new O(ue.getSimulationSignature())) : new X(t, new O(r));\n  if (Se.isInstance(t)) return new xe(t, new Pe({\n    signatures: t.publicKeys.map(i => E.isInstance(i.publicKey) || q.isInstance(i.publicKey) ? new O(ue.getSimulationSignature()) : new O(r)),\n    bitmap: t.createBitmap({\n      bits: Array(t.publicKeys.length).fill(0).map((i, o) => o)\n    })\n  }));\n  throw new Error(\"Unsupported PublicKey used for simulations\");\n}\nfunction Rr(n) {\n  let {\n      transaction: e,\n      feePayerAuthenticator: t,\n      additionalSignersAuthenticators: r\n    } = n,\n    i = ui(V, n.senderAuthenticator),\n    o;\n  if (e.feePayerAddress) {\n    if (!t) throw new Error(\"Must provide a feePayerAuthenticator argument to generate a signed fee payer transaction\");\n    o = new lt(i, e.secondarySignerAddresses ?? [], r ?? [], {\n      address: e.feePayerAddress,\n      authenticator: t\n    });\n  } else if (e.secondarySignerAddresses) {\n    if (!r) throw new Error(\"Must provide a additionalSignersAuthenticators argument to generate a signed multi agent transaction\");\n    o = new pt(i, e.secondarySignerAddresses, r);\n  } else i instanceof me ? o = new dt(i.public_key, i.signature) : i instanceof ke ? o = new Ot(i.public_key, i.signature) : o = new Qe(i);\n  return new Ge(e.rawTransaction, o).bcsToBytes();\n}\nfunction yo(n) {\n  let e = da.create();\n  for (let t of n) e.update(t);\n  return e.digest();\n}\nvar ma = yo([\"APTOS::Transaction\"]);\nfunction Vm(n) {\n  let e = Rr(n);\n  return new T(yo([ma, new Uint8Array([0]), e])).toString();\n}\nasync function Ao({\n  key: n,\n  moduleAddress: e,\n  moduleName: t,\n  functionName: r,\n  aptosConfig: i,\n  abi: o,\n  fetch: s\n}) {\n  return o !== void 0 ? o : kt(async () => s(e, t, r, i), `${n}-${i.network}-${e}-${t}-${r}`, 1e3 * 60 * 5)();\n}\nimport { ScriptComposerWasm as Or } from \"@aptos-labs/script-composer-pack\";\nvar jn = class n {\n  constructor(e) {\n    this.config = e, this.builder = void 0;\n  }\n  async init() {\n    if (!n.transactionComposer) {\n      let e = await import(\"@aptos-labs/script-composer-pack\"),\n        {\n          TransactionComposer: t,\n          initSync: r\n        } = e;\n      Or.isInitialized || Or.init(), r({\n        module: Or.wasm\n      }), n.transactionComposer = t;\n    }\n    this.builder = n.transactionComposer.single_signer();\n  }\n  async addBatchedCalls(e) {\n    let {\n        moduleAddress: t,\n        moduleName: r,\n        functionName: i\n      } = Y(e.function),\n      o = this.config.getRequestUrl(\"Fullnode\");\n    if (await this.builder.load_module(o, `${t}::${r}`), e.typeArguments !== void 0) for (let l of e.typeArguments) await this.builder.load_type_tag(o, l.toString());\n    let s = Vt(e.typeArguments),\n      a = await kr(t, r, this.config);\n    if (!a) throw new Error(`Could not find module ABI for '${t}::${r}'`);\n    let u = a?.exposed_functions.find(l => l.name === i);\n    if (!u) throw new Error(`Could not find function ABI for '${t}::${r}::${i}'`);\n    if (s.length !== u.generic_type_params.length) throw new Error(`Type argument count mismatch, expected ${u?.generic_type_params.length}, received ${s.length}`);\n    let d = e.functionArguments.map((l, y) => l instanceof Tt ? l : Tt.newBytes(Ht(i, a, l, y, s, {\n      allowUnknownStructs: !0\n    }).bcsToBytes()));\n    return this.builder.add_batched_call(`${t}::${r}`, i, s.map(l => l.toString()), d);\n  }\n  build() {\n    return this.builder.generate_batched_calls(!0);\n  }\n};\nasync function A(n) {\n  let e = await Aa(n);\n  return fa(n, e);\n}\nasync function Aa(n) {\n  let {\n      aptosConfig: e,\n      data: t\n    } = n,\n    r,\n    i;\n  return \"bytecode\" in t ? i = await Wn(t) : \"multisigAddress\" in t ? (r = {\n    aptosConfig: e,\n    multisigAddress: t.multisigAddress,\n    function: t.function,\n    functionArguments: t.functionArguments,\n    typeArguments: t.typeArguments,\n    abi: t.abi\n  }, i = await Wn(r)) : (r = {\n    aptosConfig: e,\n    function: t.function,\n    functionArguments: t.functionArguments,\n    typeArguments: t.typeArguments,\n    abi: t.abi\n  }, i = await Wn(r)), i;\n}\nasync function fa(n, e) {\n  let {\n      aptosConfig: t,\n      sender: r,\n      options: i\n    } = n,\n    o;\n  if (ha(n) && (o = c.ZERO.toString()), ba(n)) {\n    let {\n      secondarySignerAddresses: s\n    } = n;\n    return Dr({\n      aptosConfig: t,\n      sender: r,\n      payload: e,\n      options: i,\n      secondarySignerAddresses: s,\n      feePayerAddress: o\n    });\n  }\n  return Dr({\n    aptosConfig: t,\n    sender: r,\n    payload: e,\n    options: i,\n    feePayerAddress: o\n  });\n}\nfunction ha(n) {\n  return n.withFeePayer === !0;\n}\nfunction ba(n) {\n  return \"secondarySignerAddresses\" in n;\n}\nfunction fo(n) {\n  let {\n    transaction: e\n  } = n;\n  return ye(e);\n}\nfunction Qn(n) {\n  let {\n    signer: e,\n    transaction: t\n  } = n;\n  return e.signTransactionWithAuthenticator(t);\n}\nfunction Jn(n) {\n  let {\n    signer: e,\n    transaction: t\n  } = n;\n  if (!t.feePayerAddress) throw new Error(`Transaction ${t} is not a Fee Payer transaction`);\n  return t.feePayerAddress = e.accountAddress, Qn({\n    signer: e,\n    transaction: t\n  });\n}\nasync function Gr(n) {\n  let {\n      aptosConfig: e,\n      transaction: t,\n      signerPublicKey: r,\n      secondarySignersPublicKeys: i,\n      feePayerPublicKey: o,\n      options: s\n    } = n,\n    a = mo({\n      transaction: t,\n      signerPublicKey: r,\n      secondarySignersPublicKeys: i,\n      feePayerPublicKey: o,\n      options: s\n    }),\n    {\n      data: u\n    } = await _t({\n      aptosConfig: e,\n      body: a,\n      path: \"transactions/simulate\",\n      params: {\n        estimate_gas_unit_price: n.options?.estimateGasUnitPrice ?? !1,\n        estimate_max_gas_amount: n.options?.estimateMaxGasAmount ?? !1,\n        estimate_prioritized_gas_unit_price: n.options?.estimatePrioritizedGasUnitPrice ?? !1\n      },\n      originMethod: \"simulateTransaction\",\n      contentType: \"application/x.aptos.signed_transaction+bcs\"\n    });\n  return u;\n}\nasync function un(n) {\n  let {\n      aptosConfig: e\n    } = n,\n    t = Rr({\n      ...n\n    });\n  try {\n    let {\n      data: r\n    } = await _t({\n      aptosConfig: e,\n      body: t,\n      path: \"transactions\",\n      originMethod: \"submitTransaction\",\n      contentType: \"application/x.aptos.signed_transaction+bcs\"\n    });\n    return r;\n  } catch (r) {\n    let i = Ge.deserialize(new L(t));\n    throw i.authenticator.isSingleSender() && i.authenticator.sender.isSingleKey() && (i.authenticator.sender.public_key.publicKey instanceof E || i.authenticator.sender.public_key.publicKey instanceof q) && (await ce.fetchJWK({\n      aptosConfig: e,\n      publicKey: i.authenticator.sender.public_key.publicKey,\n      kid: i.authenticator.sender.signature.signature.getJwkKid()\n    })), r;\n  }\n}\nasync function Ze(n) {\n  let {\n    aptosConfig: e,\n    signer: t,\n    feePayer: r,\n    transaction: i\n  } = n;\n  Nn(t) && (await t.checkKeylessAccountValidity(e)), Nn(r) && (await r.checkKeylessAccountValidity(e));\n  let o = n.feePayerAuthenticator || r && Jn({\n      signer: r,\n      transaction: i\n    }),\n    s = Qn({\n      signer: t,\n      transaction: i\n    });\n  return un({\n    aptosConfig: e,\n    transaction: i,\n    senderAuthenticator: s,\n    feePayerAuthenticator: o\n  });\n}\nasync function ho(n) {\n  let {\n    aptosConfig: e,\n    senderAuthenticator: t,\n    feePayer: r,\n    transaction: i\n  } = n;\n  Nn(r) && (await r.checkKeylessAccountValidity(e));\n  let o = Jn({\n    signer: r,\n    transaction: i\n  });\n  return un({\n    aptosConfig: e,\n    transaction: i,\n    senderAuthenticator: t,\n    feePayerAuthenticator: o\n  });\n}\nvar wa = {\n  typeParameters: [],\n  parameters: [K.u8(), new K(K.u8())]\n};\nasync function bo(n) {\n  let {\n      aptosConfig: e,\n      account: t,\n      metadataBytes: r,\n      moduleBytecode: i,\n      options: o\n    } = n,\n    s = i.map(a => P.U8(a));\n  return A({\n    aptosConfig: e,\n    sender: c.from(t),\n    data: {\n      function: \"0x1::code::publish_package_txn\",\n      functionArguments: [P.U8(r), new P(s)],\n      abi: wa\n    },\n    options: o\n  });\n}\nasync function At(n) {\n  return kn(n);\n}\nasync function To(n) {\n  let {\n    aptosConfig: e,\n    accountAddress: t,\n    options: r\n  } = n;\n  return cr({\n    aptosConfig: e,\n    originMethod: \"getModules\",\n    path: `accounts/${c.from(t).toString()}/modules`,\n    params: {\n      ledger_version: r?.ledgerVersion,\n      limit: r?.limit ?? 1e3\n    }\n  });\n}\nasync function So(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      options: r\n    } = n,\n    {\n      response: i,\n      cursor: o\n    } = await ur({\n      aptosConfig: e,\n      originMethod: \"getModulesPage\",\n      path: `accounts/${c.from(t).toString()}/modules`,\n      params: {\n        ledger_version: r?.ledgerVersion,\n        cursor: r?.cursor,\n        limit: r?.limit ?? 100\n      }\n    });\n  return {\n    modules: i.data,\n    cursor: o\n  };\n}\nasync function qn(n) {\n  return Ni(n);\n}\nasync function Po(n) {\n  let {\n    aptosConfig: e,\n    accountAddress: t,\n    options: r\n  } = n;\n  return fi({\n    aptosConfig: e,\n    originMethod: \"getTransactions\",\n    path: `accounts/${c.from(t).toString()}/transactions`,\n    params: {\n      start: r?.offset,\n      limit: r?.limit\n    }\n  });\n}\nasync function xo(n) {\n  let {\n    aptosConfig: e,\n    accountAddress: t,\n    options: r\n  } = n;\n  return cr({\n    aptosConfig: e,\n    originMethod: \"getResources\",\n    path: `accounts/${c.from(t).toString()}/resources`,\n    params: {\n      ledger_version: r?.ledgerVersion,\n      limit: r?.limit ?? 999\n    }\n  });\n}\nasync function Ko(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      options: r\n    } = n,\n    {\n      response: i,\n      cursor: o\n    } = await ur({\n      aptosConfig: e,\n      originMethod: \"getResourcesPage\",\n      path: `accounts/${c.from(t).toString()}/resources`,\n      params: {\n        ledger_version: r?.ledgerVersion,\n        cursor: r?.cursor,\n        limit: r?.limit ?? 100\n      }\n    });\n  return {\n    resources: i.data,\n    cursor: o\n  };\n}\nasync function zr(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      resourceType: r,\n      options: i\n    } = n,\n    {\n      data: o\n    } = await tt({\n      aptosConfig: e,\n      originMethod: \"getResource\",\n      path: `accounts/${c.from(t).toString()}/resource/${r}`,\n      params: {\n        ledger_version: i?.ledgerVersion\n      }\n    });\n  return o.data;\n}\nasync function $t(n) {\n  let {\n      aptosConfig: e,\n      authenticationKey: t,\n      options: r\n    } = n,\n    i = await zr({\n      aptosConfig: e,\n      accountAddress: \"0x1\",\n      resourceType: \"0x1::account::OriginatingAddress\",\n      options: r\n    }),\n    {\n      address_map: {\n        handle: o\n      }\n    } = i,\n    s = c.from(t);\n  try {\n    let a = await Mi({\n      aptosConfig: e,\n      handle: o,\n      data: {\n        key: s.toString(),\n        key_type: \"address\",\n        value_type: \"address\"\n      },\n      options: r\n    });\n    return c.from(a);\n  } catch (a) {\n    if (a instanceof Ai && a.data.error_code === \"table_item_not_found\") return s;\n    throw a;\n  }\n}\nasync function Co(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t\n    } = n,\n    i = {\n      owner_address: {\n        _eq: c.from(t).toStringLong()\n      },\n      amount: {\n        _gt: 0\n      }\n    },\n    s = await w({\n      aptosConfig: e,\n      query: {\n        query: Ei,\n        variables: {\n          where_condition: i\n        }\n      },\n      originMethod: \"getAccountTokensCount\"\n    });\n  return s.current_token_ownerships_v2_aggregate.aggregate ? s.current_token_ownerships_v2_aggregate.aggregate.count : 0;\n}\nasync function Eo(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      options: r\n    } = n,\n    o = {\n      owner_address: {\n        _eq: c.from(t).toStringLong()\n      },\n      amount: {\n        _gt: 0\n      }\n    };\n  r?.tokenStandard && (o.token_standard = {\n    _eq: r?.tokenStandard\n  });\n  let s = {\n    query: Ki,\n    variables: {\n      where_condition: o,\n      offset: r?.offset,\n      limit: r?.limit,\n      order_by: r?.orderBy\n    }\n  };\n  return (await w({\n    aptosConfig: e,\n    query: s,\n    originMethod: \"getAccountOwnedTokens\"\n  })).current_token_ownerships_v2;\n}\nasync function Io(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      collectionAddress: r,\n      options: i\n    } = n,\n    o = c.from(t).toStringLong(),\n    s = c.from(r).toStringLong(),\n    a = {\n      owner_address: {\n        _eq: o\n      },\n      current_token_data: {\n        collection_id: {\n          _eq: s\n        }\n      },\n      amount: {\n        _gt: 0\n      }\n    };\n  i?.tokenStandard && (a.token_standard = {\n    _eq: i?.tokenStandard\n  });\n  let u = {\n    query: Ci,\n    variables: {\n      where_condition: a,\n      offset: i?.offset,\n      limit: i?.limit,\n      order_by: i?.orderBy\n    }\n  };\n  return (await w({\n    aptosConfig: e,\n    query: u,\n    originMethod: \"getAccountOwnedTokensFromCollectionAddress\"\n  })).current_token_ownerships_v2;\n}\nasync function vo(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      options: r\n    } = n,\n    o = {\n      owner_address: {\n        _eq: c.from(t).toStringLong()\n      }\n    };\n  r?.tokenStandard && (o.current_collection = {\n    token_standard: {\n      _eq: r?.tokenStandard\n    }\n  });\n  let s = {\n    query: xi,\n    variables: {\n      where_condition: o,\n      offset: r?.offset,\n      limit: r?.limit,\n      order_by: r?.orderBy\n    }\n  };\n  return (await w({\n    aptosConfig: e,\n    query: s,\n    originMethod: \"getAccountCollectionsWithOwnedTokens\"\n  })).current_collection_ownership_v2_view;\n}\nasync function _o(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t\n    } = n,\n    r = c.from(t).toStringLong(),\n    o = await w({\n      aptosConfig: e,\n      query: {\n        query: Ii,\n        variables: {\n          address: r\n        }\n      },\n      originMethod: \"getAccountTransactionsCount\"\n    });\n  return o.account_transactions_aggregate.aggregate ? o.account_transactions_aggregate.aggregate.count : 0;\n}\nasync function Wy(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      coinType: r,\n      faMetadataAddress: i\n    } = n,\n    o = r,\n    s;\n  if (r !== void 0 && i !== void 0) s = c.from(i).toStringLong();else if (r !== void 0 && i === void 0) r === Ie ? s = c.A.toStringLong() : s = En(c.A, r).toStringLong();else if (r === void 0 && i !== void 0) {\n    let l = c.from(i);\n    s = l.toStringLong(), l === c.A && (o = Ie);\n  } else throw new Error(\"Either coinType, fungibleAssetAddress, or both must be provided\");\n  let a = c.from(t).toStringLong(),\n    u = {\n      asset_type: {\n        _eq: s\n      }\n    };\n  o !== void 0 && (u = {\n    asset_type: {\n      _in: [o, s]\n    }\n  });\n  let d = await Nr({\n    aptosConfig: e,\n    accountAddress: a,\n    options: {\n      where: u\n    }\n  });\n  return d[0] ? d[0].amount : 0;\n}\nasync function Nr(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      options: r\n    } = n,\n    i = c.from(t).toStringLong(),\n    o = {\n      ...r?.where,\n      owner_address: {\n        _eq: i\n      }\n    },\n    s = {\n      query: Pi,\n      variables: {\n        where_condition: o,\n        offset: r?.offset,\n        limit: r?.limit,\n        order_by: r?.orderBy\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: s,\n    originMethod: \"getAccountCoinsData\"\n  })).current_fungible_asset_balances;\n}\nasync function ko(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t\n    } = n,\n    r = c.from(t).toStringLong(),\n    o = await w({\n      aptosConfig: e,\n      query: {\n        query: Si,\n        variables: {\n          address: r\n        }\n      },\n      originMethod: \"getAccountCoinsCount\"\n    });\n  if (!o.current_fungible_asset_balances_aggregate.aggregate) throw Error(\"Failed to get the count of account coins\");\n  return o.current_fungible_asset_balances_aggregate.aggregate.count;\n}\nasync function Fo(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      options: r\n    } = n,\n    o = {\n      owner_address: {\n        _eq: c.from(t).toStringLong()\n      }\n    },\n    s = {\n      query: vn,\n      variables: {\n        where_condition: o,\n        offset: r?.offset,\n        limit: r?.limit,\n        order_by: r?.orderBy\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: s,\n    originMethod: \"getAccountOwnedObjects\"\n  })).current_objects;\n}\nasync function Uo(n) {\n  let {\n      aptosConfig: e,\n      privateKey: t\n    } = n,\n    r = new k(t.publicKey());\n  if (t instanceof nt) {\n    let o = Z.fromPublicKey({\n      publicKey: r\n    }).derivedAddress();\n    return Be.fromPrivateKey({\n      privateKey: t,\n      address: o\n    });\n  }\n  if (t instanceof $) {\n    let i = Z.fromPublicKey({\n      publicKey: r.publicKey\n    });\n    if (await wo({\n      authKey: i,\n      aptosConfig: e\n    })) {\n      let u = i.derivedAddress();\n      return Be.fromPrivateKey({\n        privateKey: t,\n        address: u,\n        legacy: !0\n      });\n    }\n    let s = Z.fromPublicKey({\n      publicKey: r\n    });\n    if (await wo({\n      authKey: s,\n      aptosConfig: e\n    })) {\n      let u = s.derivedAddress();\n      return Be.fromPrivateKey({\n        privateKey: t,\n        address: u,\n        legacy: !1\n      });\n    }\n  }\n  throw new Error(`Can't derive account from private key ${t}`);\n}\nasync function wo(n) {\n  let {\n      aptosConfig: e,\n      authKey: t\n    } = n,\n    r = await $t({\n      aptosConfig: e,\n      authenticationKey: t.derivedAddress()\n    });\n  try {\n    return await At({\n      aptosConfig: e,\n      accountAddress: r\n    }), !0;\n  } catch (i) {\n    if (i.status === 404) return !1;\n    throw new Error(`Error while looking for an account info ${r.toString()}`);\n  }\n}\nvar Ta = {\n  typeParameters: [],\n  parameters: [new oe(), K.u8(), new oe(), K.u8(), K.u8(), K.u8()]\n};\nasync function Do(n) {\n  let {\n    aptosConfig: e,\n    fromAccount: t,\n    dangerouslySkipVerification: r\n  } = n;\n  if (\"toNewPrivateKey\" in n) return Br({\n    aptosConfig: e,\n    fromAccount: t,\n    toNewPrivateKey: n.toNewPrivateKey\n  });\n  let i;\n  if (\"toAccount\" in n) {\n    if (n.toAccount instanceof ee) return Br({\n      aptosConfig: e,\n      fromAccount: t,\n      toNewPrivateKey: n.toAccount.privateKey\n    });\n    if (n.toAccount instanceof Mn) return Br({\n      aptosConfig: e,\n      fromAccount: t,\n      toAccount: n.toAccount\n    });\n    i = n.toAccount.publicKey.authKey();\n  } else if (\"toAuthKey\" in n) i = n.toAuthKey;else throw new Error(\"Invalid arguments\");\n  let o = await Pa({\n    aptosConfig: e,\n    fromAccount: t,\n    toAuthKey: i\n  });\n  if (r === !0) return o;\n  let s = await je({\n    aptosConfig: e,\n    transactionHash: o.hash\n  });\n  if (!s.success) throw new Error(`Failed to rotate authentication key - ${s}`);\n  let a = await A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x1::account::set_originating_address\",\n      functionArguments: []\n    }\n  });\n  return Ze({\n    aptosConfig: e,\n    signer: n.toAccount,\n    transaction: a\n  });\n}\nasync function Br(n) {\n  let {\n      aptosConfig: e,\n      fromAccount: t\n    } = n,\n    r = await At({\n      aptosConfig: e,\n      accountAddress: t.accountAddress\n    }),\n    i;\n  \"toNewPrivateKey\" in n ? i = Be.fromPrivateKey({\n    privateKey: n.toNewPrivateKey,\n    legacy: !0\n  }) : i = n.toAccount;\n  let s = new Ti({\n      sequenceNumber: BigInt(r.sequence_number),\n      originator: t.accountAddress,\n      currentAuthKey: c.from(r.authentication_key),\n      newPublicKey: i.publicKey\n    }).bcsToBytes(),\n    a = t.sign(s),\n    u = i.sign(s),\n    d = await A({\n      aptosConfig: e,\n      sender: t.accountAddress,\n      data: {\n        function: \"0x1::account::rotate_authentication_key\",\n        functionArguments: [new he(t.signingScheme), P.U8(t.publicKey.toUint8Array()), new he(i.signingScheme), P.U8(i.publicKey.toUint8Array()), P.U8(a.toUint8Array()), P.U8(u.toUint8Array())],\n        abi: Ta\n      }\n    });\n  return Ze({\n    aptosConfig: e,\n    signer: t,\n    transaction: d\n  });\n}\nvar Sa = {\n  typeParameters: [],\n  parameters: [K.u8()]\n};\nasync function Pa(n) {\n  let {\n      aptosConfig: e,\n      fromAccount: t,\n      toAuthKey: r\n    } = n,\n    i = r,\n    o = await A({\n      aptosConfig: e,\n      sender: t.accountAddress,\n      data: {\n        function: \"0x1::account::rotate_authentication_key_call\",\n        functionArguments: [P.U8(i.toUint8Array())],\n        abi: Sa\n      }\n    });\n  return Ze({\n    aptosConfig: e,\n    signer: t,\n    transaction: o\n  });\n}\nasync function te(n) {\n  let {\n      aptosConfig: e,\n      payload: t,\n      options: r\n    } = n,\n    i = await go({\n      ...t,\n      aptosConfig: e\n    }),\n    o = new j();\n  i.serialize(o);\n  let s = o.toUint8Array(),\n    {\n      data: a\n    } = await _t({\n      aptosConfig: e,\n      path: \"view\",\n      originMethod: \"view\",\n      contentType: \"application/x.aptos.view_function+bcs\",\n      params: {\n        ledger_version: r?.ledgerVersion\n      },\n      body: s\n    });\n  return a;\n}\nasync function Ro(n) {\n  let {\n      aptosConfig: e,\n      payload: t,\n      options: r\n    } = n,\n    {\n      data: i\n    } = await _t({\n      aptosConfig: e,\n      originMethod: \"viewJson\",\n      path: \"view\",\n      params: {\n        ledger_version: r?.ledgerVersion\n      },\n      body: {\n        function: t.function,\n        type_arguments: t.typeArguments ?? [],\n        arguments: t.functionArguments ?? []\n      }\n    });\n  return i;\n}\nasync function Oo(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      authenticationFunction: r,\n      options: i\n    } = n,\n    {\n      moduleAddress: o,\n      moduleName: s,\n      functionName: a\n    } = Y(r);\n  return A({\n    aptosConfig: e,\n    sender: t,\n    data: {\n      function: \"0x1::account_abstraction::add_authentication_function\",\n      typeArguments: [],\n      functionArguments: [o, s, a],\n      abi: {\n        typeParameters: [],\n        parameters: [new F(), new m(x()), new m(x())]\n      }\n    },\n    options: i\n  });\n}\nasync function Go(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      authenticationFunction: r,\n      options: i\n    } = n,\n    {\n      moduleAddress: o,\n      moduleName: s,\n      functionName: a\n    } = Y(r);\n  return A({\n    aptosConfig: e,\n    sender: t,\n    data: {\n      function: \"0x1::account_abstraction::remove_authentication_function\",\n      typeArguments: [],\n      functionArguments: [o, s, a],\n      abi: {\n        typeParameters: [],\n        parameters: [new F(), new m(x()), new m(x())]\n      }\n    },\n    options: i\n  });\n}\nasync function Bo(n) {\n  let {\n    aptosConfig: e,\n    sender: t,\n    options: r\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t,\n    data: {\n      function: \"0x1::account_abstraction::remove_authenticator\",\n      typeArguments: [],\n      functionArguments: [],\n      abi: {\n        typeParameters: [],\n        parameters: []\n      }\n    },\n    options: r\n  });\n}\nvar ft = class {\n  constructor(e) {\n    this.config = e;\n    this.isAccountAbstractionEnabled = async e => {\n      let t = await this.getAuthenticationFunction(e),\n        {\n          moduleAddress: r,\n          moduleName: i,\n          functionName: o\n        } = Y(e.authenticationFunction);\n      return t?.some(s => c.fromString(r).equals(s.moduleAddress) && i === s.moduleName && o === s.functionName) ?? !1;\n    };\n    this.enableAccountAbstractionTransaction = this.addAuthenticationFunctionTransaction;\n    this.disableAccountAbstractionTransaction = async e => {\n      let {\n        accountAddress: t,\n        authenticationFunction: r,\n        options: i\n      } = e;\n      return r ? this.removeAuthenticationFunctionTransaction({\n        accountAddress: t,\n        authenticationFunction: r,\n        options: i\n      }) : this.removeDispatchableAuthenticatorTransaction({\n        accountAddress: t,\n        options: i\n      });\n    };\n  }\n  async addAuthenticationFunctionTransaction(e) {\n    let {\n      accountAddress: t,\n      authenticationFunction: r,\n      options: i\n    } = e;\n    return Oo({\n      aptosConfig: this.config,\n      authenticationFunction: r,\n      sender: t,\n      options: i\n    });\n  }\n  async removeAuthenticationFunctionTransaction(e) {\n    let {\n      accountAddress: t,\n      authenticationFunction: r,\n      options: i\n    } = e;\n    return Go({\n      aptosConfig: this.config,\n      sender: t,\n      authenticationFunction: r,\n      options: i\n    });\n  }\n  async removeDispatchableAuthenticatorTransaction(e) {\n    let {\n      accountAddress: t,\n      options: r\n    } = e;\n    return Bo({\n      aptosConfig: this.config,\n      sender: t,\n      options: r\n    });\n  }\n  async getAuthenticationFunction(e) {\n    let {\n        accountAddress: t\n      } = e,\n      [{\n        vec: r\n      }] = await te({\n        aptosConfig: this.config,\n        payload: {\n          function: \"0x1::account_abstraction::dispatchable_authenticator\",\n          functionArguments: [c.from(t)],\n          abi: {\n            typeParameters: [],\n            parameters: [new F()],\n            returnTypes: []\n          }\n        }\n      });\n    if (r.length !== 0) return r[0].map(i => ({\n      moduleAddress: c.fromString(i.module_address),\n      moduleName: i.module_name,\n      functionName: i.function_name\n    }));\n  }\n};\nvar dn = class {\n  constructor(e) {\n    this.config = e;\n    this.abstraction = new ft(e);\n  }\n  async getAccountInfo(e) {\n    return At({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountModules(e) {\n    return To({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountModulesPage(e) {\n    return So({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountModule(e) {\n    return qn({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountTransactions(e) {\n    return Po({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountResources(e) {\n    return xo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountResourcesPage(e) {\n    return Ko({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountResource(e) {\n    return zr({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async lookupOriginalAccountAddress(e) {\n    return $t({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountTokensCount(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"account_transactions_processor\"\n    }), Co({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountOwnedTokens(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), Eo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountOwnedTokensFromCollectionAddress(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), Io({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountCollectionsWithOwnedTokens(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), vo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountTransactionsCount(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"account_transactions_processor\"\n    }), _o({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountCoinsData(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), Nr({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountCoinsCount(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), ko({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountAPTAmount(e) {\n    return this.getAccountCoinAmount({\n      coinType: Ie,\n      faMetadataAddress: si,\n      ...e\n    });\n  }\n  async getAccountCoinAmount(e) {\n    let {\n      accountAddress: t,\n      coinType: r,\n      faMetadataAddress: i,\n      minimumLedgerVersion: o\n    } = e;\n    o && console.warn(`minimumLedgerVersion is not used anymore, here for backward \n        compatibility see https://github.com/aptos-labs/aptos-ts-sdk/pull/519, \n        will be removed in the near future`);\n    let s = r;\n    r === void 0 && i !== void 0 && (s = await kt(async () => {\n      try {\n        let d = (await te({\n          aptosConfig: this.config,\n          payload: {\n            function: \"0x1::coin::paired_coin\",\n            functionArguments: [i]\n          }\n        })).at(0);\n        if (d.vec.length > 0 && yi(d.vec[0])) return mi(d.vec[0]);\n      } catch {}\n    }, `coin-mapping-${i.toString()}`, 1e3 * 60 * 5)());\n    let a;\n    if (r !== void 0 && i !== void 0) a = c.from(i).toStringLong();else if (r !== void 0 && i === void 0) r === Ie ? a = c.A.toStringLong() : a = En(c.A, r).toStringLong();else if (r === void 0 && i !== void 0) {\n      let d = c.from(i);\n      a = d.toStringLong(), d === c.A && (s = Ie);\n    } else throw new Error(\"Either coinType, faMetadataAddress, or both must be provided\");\n    if (s !== void 0) {\n      let [d] = await te({\n        aptosConfig: this.config,\n        payload: {\n          function: \"0x1::coin::balance\",\n          typeArguments: [s],\n          functionArguments: [t]\n        }\n      });\n      return parseInt(d, 10);\n    }\n    let [u] = await te({\n      aptosConfig: this.config,\n      payload: {\n        function: \"0x1::primary_fungible_store::balance\",\n        typeArguments: [\"0x1::object::ObjectCore\"],\n        functionArguments: [t, a]\n      }\n    });\n    return parseInt(u, 10);\n  }\n  async getAccountOwnedObjects(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"default_processor\"\n    }), Fo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async deriveAccountFromPrivateKey(e) {\n    return Uo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nvar xa = {\n  typeParameters: [{\n    constraints: []\n  }],\n  parameters: [new F(), new H()]\n};\nasync function zo(n) {\n  let {\n    aptosConfig: e,\n    sender: t,\n    recipient: r,\n    amount: i,\n    coinType: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t,\n    data: {\n      function: \"0x1::aptos_account::transfer_coins\",\n      typeArguments: [o ?? Ie],\n      functionArguments: [r, i],\n      abi: xa\n    },\n    options: s\n  });\n}\nvar pn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async transferCoinTransaction(e) {\n    return zo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nvar Ye = {\n    BOOLEAN: \"bool\",\n    U8: \"u8\",\n    U16: \"u16\",\n    U32: \"u32\",\n    U64: \"u64\",\n    U128: \"u128\",\n    U256: \"u256\",\n    ADDRESS: \"address\",\n    STRING: \"0x1::string::String\",\n    ARRAY: \"vector<u8>\"\n  },\n  ge = \"0x4::token::Token\";\nasync function No(n) {\n  let {\n      aptosConfig: e,\n      digitalAssetAddress: t\n    } = n,\n    r = {\n      token_data_id: {\n        _eq: c.from(t).toStringLong()\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: {\n      query: Oi,\n      variables: {\n        where_condition: r\n      }\n    },\n    originMethod: \"getDigitalAssetData\"\n  })).current_token_datas_v2[0];\n}\nasync function Mo(n) {\n  let {\n      aptosConfig: e,\n      digitalAssetAddress: t\n    } = n,\n    r = {\n      token_data_id: {\n        _eq: c.from(t).toStringLong()\n      },\n      amount: {\n        _gt: 0\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: {\n      query: lr,\n      variables: {\n        where_condition: r\n      }\n    },\n    originMethod: \"getCurrentDigitalAssetOwnership\"\n  })).current_token_ownerships_v2[0];\n}\nasync function Vo(n) {\n  let {\n      aptosConfig: e,\n      ownerAddress: t,\n      options: r\n    } = n,\n    i = {\n      owner_address: {\n        _eq: c.from(t).toStringLong()\n      },\n      amount: {\n        _gt: 0\n      }\n    },\n    o = {\n      query: lr,\n      variables: {\n        where_condition: i,\n        offset: r?.offset,\n        limit: r?.limit,\n        order_by: r?.orderBy\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: o,\n    originMethod: \"getOwnedDigitalAssets\"\n  })).current_token_ownerships_v2;\n}\nasync function Ho(n) {\n  let {\n      aptosConfig: e,\n      digitalAssetAddress: t,\n      options: r\n    } = n,\n    i = {\n      token_data_id: {\n        _eq: c.from(t).toStringLong()\n      }\n    },\n    o = {\n      query: Ri,\n      variables: {\n        where_condition: i,\n        offset: r?.offset,\n        limit: r?.limit,\n        order_by: r?.orderBy\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: o,\n    originMethod: \"getDigitalAssetActivity\"\n  })).token_activities_v2;\n}\nvar Ka = {\n  typeParameters: [],\n  parameters: [new m(x()), new H(), new m(x()), new m(x()), new G(), new G(), new G(), new G(), new G(), new G(), new G(), new G(), new G(), new H(), new H()]\n};\nasync function Lo(n) {\n  let {\n    aptosConfig: e,\n    options: t,\n    creator: r\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: r.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::create_collection\",\n      functionArguments: [new v(n.description), new be(n.maxSupply ?? Zr), new v(n.name), new v(n.uri), new B(n.mutableDescription ?? !0), new B(n.mutableRoyalty ?? !0), new B(n.mutableURI ?? !0), new B(n.mutableTokenDescription ?? !0), new B(n.mutableTokenName ?? !0), new B(n.mutableTokenProperties ?? !0), new B(n.mutableTokenURI ?? !0), new B(n.tokensBurnableByCreator ?? !0), new B(n.tokensFreezableByCreator ?? !0), new be(n.royaltyNumerator ?? 0), new be(n.royaltyDenominator ?? 1)],\n      abi: Ka\n    },\n    options: t\n  });\n}\nasync function Wt(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = t?.where;\n  t?.tokenStandard && (r.token_standard = {\n    _eq: t?.tokenStandard ?? \"v2\"\n  });\n  let i = {\n    query: vi,\n    variables: {\n      where_condition: r,\n      offset: t?.offset,\n      limit: t?.limit\n    }\n  };\n  return (await w({\n    aptosConfig: e,\n    query: i,\n    originMethod: \"getCollectionData\"\n  })).current_collections_v2[0];\n}\nasync function $o(n) {\n  let {\n      aptosConfig: e,\n      creatorAddress: t,\n      collectionName: r,\n      options: i\n    } = n,\n    o = c.from(t),\n    s = {\n      collection_name: {\n        _eq: r\n      },\n      creator_address: {\n        _eq: o.toStringLong()\n      }\n    };\n  return i?.tokenStandard && (s.token_standard = {\n    _eq: i?.tokenStandard ?? \"v2\"\n  }), Wt({\n    aptosConfig: e,\n    options: {\n      ...i,\n      where: s\n    }\n  });\n}\nasync function qo(n) {\n  let {\n      aptosConfig: e,\n      creatorAddress: t,\n      options: r\n    } = n,\n    o = {\n      creator_address: {\n        _eq: c.from(t).toStringLong()\n      }\n    };\n  return r?.tokenStandard && (o.token_standard = {\n    _eq: r?.tokenStandard ?? \"v2\"\n  }), Wt({\n    aptosConfig: e,\n    options: {\n      ...r,\n      where: o\n    }\n  });\n}\nasync function Wo(n) {\n  let {\n      aptosConfig: e,\n      collectionId: t,\n      options: r\n    } = n,\n    o = {\n      collection_id: {\n        _eq: c.from(t).toStringLong()\n      }\n    };\n  return r?.tokenStandard && (o.token_standard = {\n    _eq: r?.tokenStandard ?? \"v2\"\n  }), Wt({\n    aptosConfig: e,\n    options: {\n      ...r,\n      where: o\n    }\n  });\n}\nasync function jo(n) {\n  let {\n      creatorAddress: e,\n      collectionName: t,\n      options: r,\n      aptosConfig: i\n    } = n,\n    o = c.from(e),\n    s = {\n      collection_name: {\n        _eq: t\n      },\n      creator_address: {\n        _eq: o.toStringLong()\n      }\n    };\n  return r?.tokenStandard && (s.token_standard = {\n    _eq: r?.tokenStandard ?? \"v2\"\n  }), (await Wt({\n    aptosConfig: i,\n    options: {\n      where: s\n    }\n  })).collection_id;\n}\nvar Ca = {\n  typeParameters: [],\n  parameters: [new m(x()), new m(x()), new m(x()), new m(x()), new K(new m(x())), new K(new m(x())), new K(K.u8())]\n};\nasync function Qo(n) {\n  let {\n      aptosConfig: e,\n      options: t,\n      creator: r,\n      collection: i,\n      description: o,\n      name: s,\n      uri: a,\n      propertyKeys: u,\n      propertyTypes: d,\n      propertyValues: l\n    } = n,\n    y = d?.map(p => Ye[p]);\n  return A({\n    aptosConfig: e,\n    sender: r.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint\",\n      functionArguments: [new v(i), new v(o), new v(s), new v(a), P.MoveString(u ?? []), P.MoveString(y ?? []), us(l ?? [], y ?? [])],\n      abi: Ca\n    },\n    options: t\n  });\n}\nvar Ea = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0))), new F()]\n};\nasync function Jo(n) {\n  let {\n    aptosConfig: e,\n    sender: t,\n    digitalAssetAddress: r,\n    recipient: i,\n    digitalAssetType: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x1::object::transfer\",\n      typeArguments: [o ?? ge],\n      functionArguments: [c.from(r), c.from(i)],\n      abi: Ea\n    },\n    options: s\n  });\n}\nvar Ia = {\n  typeParameters: [],\n  parameters: [new m(x()), new m(x()), new m(x()), new m(x()), new K(new m(x())), new K(new m(x())), new K(K.u8()), new F()]\n};\nasync function Zo(n) {\n  let {\n    aptosConfig: e,\n    account: t,\n    collection: r,\n    description: i,\n    name: o,\n    uri: s,\n    recipient: a,\n    propertyKeys: u,\n    propertyTypes: d,\n    propertyValues: l,\n    options: y\n  } = n;\n  if (u?.length !== l?.length) throw new Error(\"Property keys and property values counts do not match\");\n  if (d?.length !== l?.length) throw new Error(\"Property types and property values counts do not match\");\n  let p = d?.map(g => Ye[g]);\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint_soul_bound\",\n      functionArguments: [r, i, o, s, P.MoveString(u ?? []), P.MoveString(p ?? []), us(l ?? [], p ?? []), a],\n      abi: Ia\n    },\n    options: y\n  });\n}\nvar va = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0)))]\n};\nasync function Yo(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    digitalAssetAddress: r,\n    digitalAssetType: i,\n    options: o\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::burn\",\n      typeArguments: [i ?? ge],\n      functionArguments: [c.from(r)],\n      abi: va\n    },\n    options: o\n  });\n}\nvar _a = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0)))]\n};\nasync function Xo(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    digitalAssetAddress: r,\n    digitalAssetType: i,\n    options: o\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::freeze_transfer\",\n      typeArguments: [i ?? ge],\n      functionArguments: [r],\n      abi: _a\n    },\n    options: o\n  });\n}\nvar ka = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0)))]\n};\nasync function es(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    digitalAssetAddress: r,\n    digitalAssetType: i,\n    options: o\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::unfreeze_transfer\",\n      typeArguments: [i ?? ge],\n      functionArguments: [r],\n      abi: ka\n    },\n    options: o\n  });\n}\nvar Fa = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0))), new m(x())]\n};\nasync function ts(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    description: r,\n    digitalAssetAddress: i,\n    digitalAssetType: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_description\",\n      typeArguments: [o ?? ge],\n      functionArguments: [c.from(i), new v(r)],\n      abi: Fa\n    },\n    options: s\n  });\n}\nvar Ua = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0))), new m(x())]\n};\nasync function ns(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    name: r,\n    digitalAssetAddress: i,\n    digitalAssetType: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_name\",\n      typeArguments: [o ?? ge],\n      functionArguments: [c.from(i), new v(r)],\n      abi: Ua\n    },\n    options: s\n  });\n}\nvar Da = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0))), new m(x())]\n};\nasync function rs(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    uri: r,\n    digitalAssetAddress: i,\n    digitalAssetType: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_uri\",\n      typeArguments: [o ?? ge],\n      functionArguments: [c.from(i), new v(r)],\n      abi: Da\n    },\n    options: s\n  });\n}\nvar Ra = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0))), new m(x()), new m(x()), K.u8()]\n};\nasync function is(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    propertyKey: r,\n    propertyType: i,\n    propertyValue: o,\n    digitalAssetAddress: s,\n    digitalAssetType: a,\n    options: u\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_property\",\n      typeArguments: [a ?? ge],\n      functionArguments: [c.from(s), new v(r), new v(Ye[i]), P.U8(Mr(o, Ye[i]))],\n      abi: Ra\n    },\n    options: u\n  });\n}\nvar Oa = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0))), new m(x())]\n};\nasync function os(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    propertyKey: r,\n    digitalAssetAddress: i,\n    digitalAssetType: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::remove_property\",\n      typeArguments: [o ?? ge],\n      functionArguments: [c.from(i), new v(r)],\n      abi: Oa\n    },\n    options: s\n  });\n}\nvar Ga = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }],\n  parameters: [new m(se(new D(0))), new m(x()), new m(x()), K.u8()]\n};\nasync function ss(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    propertyKey: r,\n    propertyType: i,\n    propertyValue: o,\n    digitalAssetAddress: s,\n    digitalAssetType: a,\n    options: u\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_property\",\n      typeArguments: [a ?? ge],\n      functionArguments: [c.from(s), new v(r), new v(Ye[i]), Mr(o, Ye[i])],\n      abi: Ga\n    },\n    options: u\n  });\n}\nvar Ba = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }, {\n    constraints: []\n  }],\n  parameters: [new m(se(new D(0))), new m(x()), new D(1)]\n};\nasync function as(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    propertyKey: r,\n    propertyType: i,\n    propertyValue: o,\n    digitalAssetAddress: s,\n    digitalAssetType: a,\n    options: u\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_typed_property\",\n      typeArguments: [a ?? ge, Ye[i]],\n      functionArguments: [c.from(s), new v(r), o],\n      abi: Ba\n    },\n    options: u\n  });\n}\nvar za = {\n  typeParameters: [{\n    constraints: [\"key\"]\n  }, {\n    constraints: []\n  }],\n  parameters: [new m(se(new D(0))), new m(x()), new D(1)]\n};\nasync function cs(n) {\n  let {\n    aptosConfig: e,\n    creator: t,\n    propertyKey: r,\n    propertyType: i,\n    propertyValue: o,\n    digitalAssetAddress: s,\n    digitalAssetType: a,\n    options: u\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_typed_property\",\n      typeArguments: [a ?? ge, Ye[i]],\n      functionArguments: [c.from(s), new v(r), o],\n      abi: za\n    },\n    options: u\n  });\n}\nfunction us(n, e) {\n  let t = new Array();\n  return e.forEach((r, i) => {\n    t.push(Mr(n[i], r));\n  }), t;\n}\nfunction Mr(n, e) {\n  let t = Ae(e);\n  return yt(n, t, 0, []).bcsToBytes();\n}\nvar ln = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getCollectionData(e) {\n    await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    });\n    let {\n        creatorAddress: t,\n        collectionName: r,\n        options: i\n      } = e,\n      o = c.from(t),\n      s = {\n        collection_name: {\n          _eq: r\n        },\n        creator_address: {\n          _eq: o.toStringLong()\n        }\n      };\n    return i?.tokenStandard && (s.token_standard = {\n      _eq: i?.tokenStandard ?? \"v2\"\n    }), Wt({\n      aptosConfig: this.config,\n      options: {\n        where: s\n      }\n    });\n  }\n  async getCollectionDataByCreatorAddressAndCollectionName(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), $o({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getCollectionDataByCreatorAddress(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), qo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getCollectionDataByCollectionId(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), Wo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getCollectionId(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), jo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getDigitalAssetData(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), No({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getCurrentDigitalAssetOwnership(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), Mo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getOwnedDigitalAssets(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), Vo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getDigitalAssetActivity(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), Ho({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async createCollectionTransaction(e) {\n    return Lo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async mintDigitalAssetTransaction(e) {\n    return Qo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async transferDigitalAssetTransaction(e) {\n    return Jo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async mintSoulBoundTransaction(e) {\n    return Zo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async burnDigitalAssetTransaction(e) {\n    return Yo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async freezeDigitalAssetTransaferTransaction(e) {\n    return Xo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async unfreezeDigitalAssetTransaferTransaction(e) {\n    return es({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async setDigitalAssetDescriptionTransaction(e) {\n    return ts({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async setDigitalAssetNameTransaction(e) {\n    return ns({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async setDigitalAssetURITransaction(e) {\n    return rs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async addDigitalAssetPropertyTransaction(e) {\n    return is({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async removeDigitalAssetPropertyTransaction(e) {\n    return os({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async updateDigitalAssetPropertyTransaction(e) {\n    return ss({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async addDigitalAssetTypedPropertyTransaction(e) {\n    return as({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async updateDigitalAssetTypedPropertyTransaction(e) {\n    return cs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nvar ds = 300,\n  Na = n => {\n    if (n && n.length > ds) throw new Error(`Event type length exceeds the maximum length of ${ds}`);\n  };\nasync function ps(n) {\n  let {\n      aptosConfig: e,\n      eventType: t,\n      options: r\n    } = n,\n    i = {\n      _or: [{\n        account_address: {\n          _eq: t.split(\"::\")[0]\n        }\n      }, {\n        account_address: {\n          _eq: \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n        },\n        sequence_number: {\n          _eq: 0\n        },\n        creation_number: {\n          _eq: 0\n        }\n      }],\n      indexed_type: {\n        _eq: t\n      }\n    };\n  return gn({\n    aptosConfig: e,\n    options: {\n      ...r,\n      where: i\n    }\n  });\n}\nasync function ls(n) {\n  let {\n      accountAddress: e,\n      aptosConfig: t,\n      creationNumber: r,\n      options: i\n    } = n,\n    s = {\n      account_address: {\n        _eq: c.from(e).toStringLong()\n      },\n      creation_number: {\n        _eq: r\n      }\n    };\n  return gn({\n    aptosConfig: t,\n    options: {\n      ...i,\n      where: s\n    }\n  });\n}\nasync function gs(n) {\n  let {\n      accountAddress: e,\n      aptosConfig: t,\n      eventType: r,\n      options: i\n    } = n,\n    s = {\n      account_address: {\n        _eq: c.from(e).toStringLong()\n      },\n      indexed_type: {\n        _eq: r\n      }\n    };\n  return gn({\n    aptosConfig: t,\n    options: {\n      ...i,\n      where: s\n    }\n  });\n}\nasync function gn(n) {\n  let {\n    aptosConfig: e,\n    options: t\n  } = n;\n  Na(t?.where?.indexed_type?._eq);\n  let r = {\n    query: Fi,\n    variables: {\n      where_condition: t?.where,\n      offset: t?.offset,\n      limit: t?.limit,\n      order_by: t?.orderBy\n    }\n  };\n  return (await w({\n    aptosConfig: e,\n    query: r,\n    originMethod: \"getEvents\"\n  })).events;\n}\nvar mn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getModuleEventsByEventType(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"events_processor\"\n    }), ps({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountEventsByCreationNumber(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"events_processor\"\n    }), ls({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountEventsByEventType(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"events_processor\"\n    }), gs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getEvents(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"events_processor\"\n    }), gn({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nasync function ms(n) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      amount: r,\n      options: i\n    } = n,\n    o = i?.timeoutSecs || 20,\n    {\n      data: s\n    } = await hi({\n      aptosConfig: e,\n      path: \"fund\",\n      body: {\n        address: c.from(t).toString(),\n        amount: r\n      },\n      originMethod: \"fundAccount\"\n    }),\n    a = s.txn_hashes[0],\n    u = await je({\n      aptosConfig: e,\n      transactionHash: a,\n      options: {\n        timeoutSecs: o,\n        checkSuccess: i?.checkSuccess\n      }\n    });\n  if (u.type === \"user_transaction\") return u;\n  throw new Error(`Unexpected transaction received for fund account: ${u.type}`);\n}\nvar yn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async fundAccount(e) {\n    let t = await ms({\n      aptosConfig: this.config,\n      ...e\n    });\n    return (e.options?.waitForIndexer === void 0 || e.options?.waitForIndexer) && (await qi({\n      aptosConfig: this.config,\n      minimumLedgerVersion: BigInt(t.version),\n      processorType: \"fungible_asset_processor\"\n    })), t;\n  }\n};\nasync function Zn(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = {\n      query: Di,\n      variables: {\n        where_condition: t?.where,\n        limit: t?.limit,\n        offset: t?.offset\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: r,\n    originMethod: \"getFungibleAssetMetadata\"\n  })).fungible_asset_metadata;\n}\nasync function ys(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = {\n      query: Ui,\n      variables: {\n        where_condition: t?.where,\n        limit: t?.limit,\n        offset: t?.offset\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: r,\n    originMethod: \"getFungibleAssetActivities\"\n  })).fungible_asset_activities;\n}\nasync function As(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = {\n      query: _i,\n      variables: {\n        where_condition: t?.where,\n        limit: t?.limit,\n        offset: t?.offset\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: r,\n    originMethod: \"getCurrentFungibleAssetBalances\"\n  })).current_fungible_asset_balances;\n}\nvar fs = {\n  typeParameters: [{\n    constraints: []\n  }],\n  parameters: [Ae(\"0x1::object::Object\"), new F(), new H()]\n};\nasync function hs(n) {\n  let {\n    aptosConfig: e,\n    sender: t,\n    fungibleAssetMetadataAddress: r,\n    recipient: i,\n    amount: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x1::primary_fungible_store::transfer\",\n      typeArguments: [\"0x1::fungible_asset::Metadata\"],\n      functionArguments: [r, i, o],\n      abi: fs\n    },\n    options: s\n  });\n}\nasync function bs(n) {\n  let {\n    aptosConfig: e,\n    sender: t,\n    fromStore: r,\n    toStore: i,\n    amount: o,\n    options: s\n  } = n;\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x1::dispatchable_fungible_asset::transfer\",\n      typeArguments: [\"0x1::fungible_asset::FungibleStore\"],\n      functionArguments: [r, i, o],\n      abi: fs\n    },\n    options: s\n  });\n}\nvar An = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getFungibleAssetMetadata(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), Zn({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getFungibleAssetMetadataByAssetType(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), (await Zn({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          asset_type: {\n            _eq: e.assetType\n          }\n        }\n      }\n    }))[0];\n  }\n  async getFungibleAssetMetadataByCreatorAddress(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), await Zn({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          creator_address: {\n            _eq: c.from(e.creatorAddress).toStringLong()\n          }\n        }\n      }\n    });\n  }\n  async getFungibleAssetActivities(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), ys({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getCurrentFungibleAssetBalances(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), As({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async transferFungibleAsset(e) {\n    return hs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async transferFungibleAssetBetweenStores(e) {\n    return bs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nvar fn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getLedgerInfo() {\n    return _n({\n      aptosConfig: this.config\n    });\n  }\n  async getChainId() {\n    return (await this.getLedgerInfo()).chain_id;\n  }\n  async getBlockByVersion(e) {\n    return Wi({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getBlockByHeight(e) {\n    return ji({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async view(e) {\n    return te({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async viewJson(e) {\n    return Ro({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getChainTopUserTransactions(e) {\n    return Gi({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async queryIndexer(e) {\n    return w({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getIndexerLastSuccessVersion() {\n    return Bi({\n      aptosConfig: this.config\n    });\n  }\n  async getProcessorStatus(e) {\n    return zi({\n      aptosConfig: this.config,\n      processorType: e\n    });\n  }\n};\nvar ws = [\"A name must be between 3 and 63 characters long,\", \"and can only contain lowercase a-z, 0-9, and hyphens.\", \"A name may not start or end with a hyphen.\"].join(\" \");\nfunction Ts(n) {\n  return !(!n || n.length < 3 || n.length > 63 || !/^[a-z\\d][a-z\\d-]{1,61}[a-z\\d]$/.test(n));\n}\nfunction Xe(n) {\n  let [e, t, ...r] = n.replace(/\\.apt$/, \"\").split(\".\");\n  if (r.length > 0) throw new Error(`${n} is invalid. A name can only have two parts, a domain and a subdomain separated by a \".\"`);\n  if (!Ts(e)) throw new Error(`${e} is not valid. ${ws}`);\n  if (t && !Ts(t)) throw new Error(`${t} is not valid. ${ws}`);\n  return {\n    domainName: t || e,\n    subdomainName: t ? e : void 0\n  };\n}\nvar Ma = (t => (t[t.Independent = 0] = \"Independent\", t[t.FollowsDomain = 1] = \"FollowsDomain\", t))(Ma || {});\nfunction Ss(n) {\n  if (!n) return !1;\n  let e = new Date(n.domain_expiration_timestamp).getTime() < Date.now(),\n    t = new Date(n.expiration_timestamp).getTime() < Date.now();\n  return n.subdomain && e ? !1 : n.subdomain && n.subdomain_expiration_policy === 1 ? !0 : !t;\n}\nvar ch = \"0x37368b46ce665362562c6d1d4ec01a08c8644c488690df5a17e13ba163e20221\",\n  Va = \"0x585fc9f0f0c54183b039ffc770ca282ebd87307916c215a3e692f2f8e4305e82\",\n  Ha = {\n    testnet: \"0x5f8fd2347449685cf41d4db97926ec3a096eaf381332be4f1318ad4d16a8497c\",\n    mainnet: \"0x867ed1f6bf916171b1de3ee92849b8978b7d1b9e0a8cc982a3d19d535dfd9c0c\",\n    local: Va,\n    custom: null,\n    devnet: null\n  };\nfunction Ve(n) {\n  let e = Ha[n.network];\n  if (!e) throw new Error(`The ANS contract is not deployed to ${n.network}`);\n  return e;\n}\nvar Yn = n => {\n  if (n && typeof n == \"object\" && \"vec\" in n && Array.isArray(n.vec)) return n.vec[0];\n};\nasync function Ps(n) {\n  let {\n      aptosConfig: e,\n      name: t\n    } = n,\n    r = Ve(e),\n    {\n      domainName: i,\n      subdomainName: o\n    } = Xe(t),\n    s = await te({\n      aptosConfig: e,\n      payload: {\n        function: `${r}::router::get_owner_addr`,\n        functionArguments: [i, o]\n      }\n    }),\n    a = Yn(s[0]);\n  return a ? c.from(a) : void 0;\n}\nasync function xs(n) {\n  let {\n      aptosConfig: e,\n      expiration: t,\n      name: r,\n      sender: i,\n      targetAddress: o,\n      toAddress: s,\n      options: a,\n      transferable: u\n    } = n,\n    d = Ve(e),\n    {\n      domainName: l,\n      subdomainName: y\n    } = Xe(r),\n    p = t.policy === \"subdomain:independent\" || t.policy === \"subdomain:follow-domain\";\n  if (y && !p) throw new Error(\"Subdomains must have an expiration policy of either 'subdomain:independent' or 'subdomain:follow-domain'\");\n  if (p && !y) throw new Error(`Policy is set to ${t.policy} but no subdomain was provided`);\n  if (t.policy === \"domain\") {\n    let M = t.years ?? 1;\n    if (M !== 1) throw new Error(\"For now, names can only be registered for 1 year at a time\");\n    let Le = M * 31536e3;\n    return await A({\n      aptosConfig: e,\n      sender: i.accountAddress.toString(),\n      data: {\n        function: `${d}::router::register_domain`,\n        functionArguments: [l, Le, o, s]\n      },\n      options: a\n    });\n  }\n  if (!y) throw new Error(`${t.policy} requires a subdomain to be provided.`);\n  let g = await Vr({\n    aptosConfig: e,\n    name: l\n  });\n  if (!g) throw new Error(\"The domain does not exist\");\n  let f = t.policy === \"subdomain:independent\" ? t.expirationDate : g;\n  if (f > g) throw new Error(\"The subdomain expiration time cannot be greater than the domain expiration time\");\n  return await A({\n    aptosConfig: e,\n    sender: i.accountAddress.toString(),\n    data: {\n      function: `${d}::router::register_subdomain`,\n      functionArguments: [l, y, Math.round(f / 1e3), t.policy === \"subdomain:follow-domain\" ? 1 : 0, !!u, o, s]\n    },\n    options: a\n  });\n}\nasync function Vr(n) {\n  let {\n      aptosConfig: e,\n      name: t\n    } = n,\n    r = Ve(e),\n    {\n      domainName: i,\n      subdomainName: o\n    } = Xe(t);\n  try {\n    let s = await te({\n      aptosConfig: e,\n      payload: {\n        function: `${r}::router::get_expiration`,\n        functionArguments: [i, o]\n      }\n    });\n    return Number(s[0]) * 1e3;\n  } catch {\n    return;\n  }\n}\nasync function Ks(n) {\n  let {\n      aptosConfig: e,\n      address: t\n    } = n,\n    r = Ve(e),\n    i = await te({\n      aptosConfig: e,\n      payload: {\n        function: `${r}::router::get_primary_name`,\n        functionArguments: [c.from(t).toString()]\n      }\n    }),\n    o = Yn(i[1]),\n    s = Yn(i[0]);\n  if (o) return [s, o].filter(Boolean).join(\".\");\n}\nasync function Cs(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      name: r,\n      options: i\n    } = n,\n    o = Ve(e);\n  if (!r) return await A({\n    aptosConfig: e,\n    sender: t.accountAddress.toString(),\n    data: {\n      function: `${o}::router::clear_primary_name`,\n      functionArguments: []\n    },\n    options: i\n  });\n  let {\n    domainName: s,\n    subdomainName: a\n  } = Xe(r);\n  return await A({\n    aptosConfig: e,\n    sender: t.accountAddress.toString(),\n    data: {\n      function: `${o}::router::set_primary_name`,\n      functionArguments: [s, a]\n    },\n    options: i\n  });\n}\nasync function Es(n) {\n  let {\n      aptosConfig: e,\n      name: t\n    } = n,\n    r = Ve(e),\n    {\n      domainName: i,\n      subdomainName: o\n    } = Xe(t),\n    s = await te({\n      aptosConfig: e,\n      payload: {\n        function: `${r}::router::get_target_addr`,\n        functionArguments: [i, o]\n      }\n    }),\n    a = Yn(s[0]);\n  return a ? c.from(a) : void 0;\n}\nasync function Is(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      name: r,\n      address: i,\n      options: o\n    } = n,\n    s = Ve(e),\n    {\n      domainName: a,\n      subdomainName: u\n    } = Xe(r);\n  return await A({\n    aptosConfig: e,\n    sender: t.accountAddress.toString(),\n    data: {\n      function: `${s}::router::set_target_addr`,\n      functionArguments: [a, u, i]\n    },\n    options: o\n  });\n}\nasync function vs(n) {\n  let {\n      aptosConfig: e,\n      name: t\n    } = n,\n    {\n      domainName: r,\n      subdomainName: i = \"\"\n    } = Xe(t),\n    a = (await w({\n      aptosConfig: e,\n      query: {\n        query: Ut,\n        variables: {\n          where_condition: {\n            domain: {\n              _eq: r\n            },\n            subdomain: {\n              _eq: i\n            }\n          },\n          limit: 1\n        }\n      },\n      originMethod: \"getName\"\n    })).current_aptos_names[0];\n  return a && (a = hn(a)), Ss(a) ? a : void 0;\n}\nasync function _s(n) {\n  let {\n      aptosConfig: e,\n      options: t,\n      accountAddress: r\n    } = n,\n    i = await Hr({\n      aptosConfig: e\n    });\n  return (await w({\n    aptosConfig: e,\n    originMethod: \"getAccountNames\",\n    query: {\n      query: Ut,\n      variables: {\n        limit: t?.limit,\n        offset: t?.offset,\n        order_by: t?.orderBy,\n        where_condition: {\n          ...(n.options?.where ?? {}),\n          owner_address: {\n            _eq: r.toString()\n          },\n          expiration_timestamp: {\n            _gte: i\n          }\n        }\n      }\n    }\n  })).current_aptos_names.map(hn);\n}\nasync function ks(n) {\n  let {\n      aptosConfig: e,\n      options: t,\n      accountAddress: r\n    } = n,\n    i = await Hr({\n      aptosConfig: e\n    });\n  return (await w({\n    aptosConfig: e,\n    originMethod: \"getAccountDomains\",\n    query: {\n      query: Ut,\n      variables: {\n        limit: t?.limit,\n        offset: t?.offset,\n        order_by: t?.orderBy,\n        where_condition: {\n          ...(n.options?.where ?? {}),\n          owner_address: {\n            _eq: r.toString()\n          },\n          expiration_timestamp: {\n            _gte: i\n          },\n          subdomain: {\n            _eq: \"\"\n          }\n        }\n      }\n    }\n  })).current_aptos_names.map(hn);\n}\nasync function Fs(n) {\n  let {\n      aptosConfig: e,\n      options: t,\n      accountAddress: r\n    } = n,\n    i = await Hr({\n      aptosConfig: e\n    });\n  return (await w({\n    aptosConfig: e,\n    originMethod: \"getAccountSubdomains\",\n    query: {\n      query: Ut,\n      variables: {\n        limit: t?.limit,\n        offset: t?.offset,\n        order_by: t?.orderBy,\n        where_condition: {\n          ...(n.options?.where ?? {}),\n          owner_address: {\n            _eq: r.toString()\n          },\n          expiration_timestamp: {\n            _gte: i\n          },\n          subdomain: {\n            _neq: \"\"\n          }\n        }\n      }\n    }\n  })).current_aptos_names.map(hn);\n}\nasync function Us(n) {\n  let {\n    aptosConfig: e,\n    options: t,\n    domain: r\n  } = n;\n  return (await w({\n    aptosConfig: e,\n    originMethod: \"getDomainSubdomains\",\n    query: {\n      query: Ut,\n      variables: {\n        limit: t?.limit,\n        offset: t?.offset,\n        order_by: t?.orderBy,\n        where_condition: {\n          ...(n.options?.where ?? {}),\n          domain: {\n            _eq: r\n          },\n          subdomain: {\n            _neq: \"\"\n          }\n        }\n      }\n    }\n  })).current_aptos_names.map(hn).filter(Ss);\n}\nasync function Hr(n) {\n  let {\n      aptosConfig: e\n    } = n,\n    t = Ve(e),\n    [r] = await te({\n      aptosConfig: e,\n      payload: {\n        function: `${t}::config::reregistration_grace_sec`,\n        functionArguments: []\n      }\n    }),\n    i = r / 60 / 60 / 24,\n    o = () => new Date();\n  return new Date(o().setDate(o().getDate() - i)).toISOString();\n}\nasync function Ds(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      name: r,\n      years: i = 1,\n      options: o\n    } = n,\n    s = Ve(e),\n    a = i * 31536e3,\n    {\n      domainName: u,\n      subdomainName: d\n    } = Xe(r);\n  if (d) throw new Error(\"Subdomains cannot be renewed\");\n  if (i !== 1) throw new Error(\"Currently, only 1 year renewals are supported\");\n  return await A({\n    aptosConfig: e,\n    sender: t.accountAddress.toString(),\n    data: {\n      function: `${s}::router::renew_domain`,\n      functionArguments: [u, a]\n    },\n    options: o\n  });\n}\nfunction hn(n) {\n  return {\n    ...n,\n    expiration_timestamp: new Date(n.expiration_timestamp).getTime()\n  };\n}\nvar bn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getOwnerAddress(e) {\n    return Ps({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getExpiration(e) {\n    return Vr({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getTargetAddress(e) {\n    return Es({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async setTargetAddress(e) {\n    return Is({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getPrimaryName(e) {\n    return Ks({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async setPrimaryName(e) {\n    return Cs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async registerName(e) {\n    return xs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async renewDomain(e) {\n    return Ds({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getName(e) {\n    return vs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountNames(e) {\n    return _s({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountDomains(e) {\n    return ks({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountSubdomains(e) {\n    return Fs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getDomainSubdomains(e) {\n    return Us({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nasync function Rs(n) {\n  let {\n      aptosConfig: e,\n      poolAddress: t\n    } = n,\n    r = c.from(t).toStringLong(),\n    o = await w({\n      aptosConfig: e,\n      query: {\n        query: pr,\n        variables: {\n          where_condition: {\n            pool_address: {\n              _eq: r\n            }\n          }\n        }\n      }\n    });\n  return o.num_active_delegator_per_pool[0] ? o.num_active_delegator_per_pool[0].num_active_delegator : 0;\n}\nasync function Os(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = {\n      query: pr,\n      variables: {\n        order_by: t?.orderBy\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: r\n  })).num_active_delegator_per_pool;\n}\nasync function Gs(n) {\n  let {\n      aptosConfig: e,\n      delegatorAddress: t,\n      poolAddress: r\n    } = n,\n    i = {\n      query: ki,\n      variables: {\n        delegatorAddress: c.from(t).toStringLong(),\n        poolAddress: c.from(r).toStringLong()\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: i\n  })).delegated_staking_activities;\n}\nvar wn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getNumberOfDelegators(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"stake_processor\"\n    }), Rs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getNumberOfDelegatorsForAllPools(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"stake_processor\"\n    }), Os({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getDelegatedStakingActivities(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e?.minimumLedgerVersion,\n      processorType: \"stake_processor\"\n    }), Gs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nvar Xn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async simple(e) {\n    return A({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async scriptComposer(e) {\n    let t = new jn(this.config);\n    await t.init();\n    let i = (await e.builder(t)).build(),\n      o = await Ur({\n        aptosConfig: this.config,\n        payload: st.load(new L(i)),\n        ...e\n      });\n    return new Gt(o, e.withFeePayer === !0 ? c.ZERO : void 0);\n  }\n  async multiAgent(e) {\n    return A({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nvar jt = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async simple(e) {\n    return Gr({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async multiAgent(e) {\n    return Gr({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nbt([mr], jt.prototype, \"simple\", 1), bt([mr], jt.prototype, \"multiAgent\", 1);\nvar Qt = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async simple(e) {\n    return un({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async multiAgent(e) {\n    return un({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nbt([gr], Qt.prototype, \"simple\", 1), bt([gr], Qt.prototype, \"multiAgent\", 1);\nimport $a from \"eventemitter3\";\nvar er = class {\n  constructor(e, t, r, i, o) {\n    this.lastUncommintedNumber = null;\n    this.currentNumber = null;\n    this.lock = !1;\n    this.aptosConfig = e, this.account = t, this.maxWaitTime = r, this.maximumInFlight = i, this.sleepTime = o;\n  }\n  async nextSequenceNumber() {\n    for (; this.lock;) await Zt(this.sleepTime);\n    this.lock = !0;\n    let e = BigInt(0);\n    try {\n      if ((this.lastUncommintedNumber === null || this.currentNumber === null) && (await this.initialize()), this.currentNumber - this.lastUncommintedNumber >= this.maximumInFlight) {\n        await this.update();\n        let t = ve();\n        for (; this.currentNumber - this.lastUncommintedNumber >= this.maximumInFlight;) await Zt(this.sleepTime), ve() - t > this.maxWaitTime ? (console.warn(`Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`), await this.initialize()) : await this.update();\n      }\n      e = this.currentNumber, this.currentNumber += BigInt(1);\n    } catch (t) {\n      console.error(\"error in getting next sequence number for this account\", t);\n    } finally {\n      this.lock = !1;\n    }\n    return e;\n  }\n  async initialize() {\n    let {\n      sequence_number: e\n    } = await At({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress\n    });\n    this.currentNumber = BigInt(e), this.lastUncommintedNumber = BigInt(e);\n  }\n  async update() {\n    let {\n      sequence_number: e\n    } = await At({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress\n    });\n    return this.lastUncommintedNumber = BigInt(e), this.lastUncommintedNumber;\n  }\n  async synchronize() {\n    if (this.lastUncommintedNumber !== this.currentNumber) {\n      for (; this.lock;) await Zt(this.sleepTime);\n      this.lock = !0;\n      try {\n        await this.update();\n        let e = ve();\n        for (; this.lastUncommintedNumber !== this.currentNumber;) ve() - e > this.maxWaitTime ? (console.warn(`Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`), await this.initialize()) : (await Zt(this.sleepTime), await this.update());\n      } catch (e) {\n        console.error(\"error in synchronizing this account sequence number with the one on chain\", e);\n      } finally {\n        this.lock = !1;\n      }\n    }\n  }\n};\nimport La from \"eventemitter3\";\nvar Bs = \"fulfilled\",\n  zs = (o => (o.TransactionSent = \"transactionSent\", o.TransactionSendFailed = \"transactionSendFailed\", o.TransactionExecuted = \"transactionExecuted\", o.TransactionExecutionFailed = \"transactionExecutionFailed\", o.ExecutionFinish = \"executionFinish\", o))(zs || {}),\n  tr = class extends La {\n    constructor(t, r, i = 30, o = 100, s = 10) {\n      super();\n      this.taskQueue = new Un();\n      this.transactionsQueue = new Un();\n      this.outstandingTransactions = new Un();\n      this.sentTransactions = [];\n      this.executedTransactions = [];\n      this.aptosConfig = t, this.account = r, this.started = !1, this.accountSequnceNumber = new er(t, r, i, o, s);\n    }\n    async submitNextTransaction() {\n      try {\n        for (;;) {\n          let t = await this.accountSequnceNumber.nextSequenceNumber();\n          if (t === null) return;\n          let r = await this.generateNextTransaction(this.account, t);\n          if (!r) return;\n          let i = Ze({\n            aptosConfig: this.aptosConfig,\n            transaction: r,\n            signer: this.account\n          });\n          await this.outstandingTransactions.enqueue([i, t]);\n        }\n      } catch (t) {\n        if (t instanceof yr) return;\n        throw new Error(`Submit transaction failed for ${this.account.accountAddress.toString()} with error ${t}`);\n      }\n    }\n    async processTransactions() {\n      try {\n        for (;;) {\n          let t = [],\n            r = [],\n            [i, o] = await this.outstandingTransactions.dequeue();\n          for (t.push(i), r.push(o); !this.outstandingTransactions.isEmpty();) [i, o] = await this.outstandingTransactions.dequeue(), t.push(i), r.push(o);\n          let s = await Promise.allSettled(t);\n          for (let a = 0; a < s.length && a < r.length; a += 1) {\n            let u = s[a];\n            o = r[a], u.status === Bs ? (this.sentTransactions.push([u.value.hash, o, null]), this.emit(\"transactionSent\", {\n              message: `transaction hash ${u.value.hash} has been committed to chain`,\n              transactionHash: u.value.hash\n            }), await this.checkTransaction(u, o)) : (this.sentTransactions.push([u.status, o, u.reason]), this.emit(\"transactionSendFailed\", {\n              message: `failed to commit transaction ${this.sentTransactions.length} with error ${u.reason}`,\n              error: u.reason\n            }));\n          }\n          this.emit(\"executionFinish\", {\n            message: `execute ${s.length} transactions finished`\n          });\n        }\n      } catch (t) {\n        if (t instanceof yr) return;\n        throw new Error(`Process execution failed for ${this.account.accountAddress.toString()} with error ${t}`);\n      }\n    }\n    async checkTransaction(t, r) {\n      try {\n        let i = [];\n        i.push(je({\n          aptosConfig: this.aptosConfig,\n          transactionHash: t.value.hash\n        }));\n        let o = await Promise.allSettled(i);\n        for (let s = 0; s < o.length; s += 1) {\n          let a = o[s];\n          a.status === Bs ? (this.executedTransactions.push([a.value.hash, r, null]), this.emit(\"transactionExecuted\", {\n            message: `transaction hash ${a.value.hash} has been executed on chain`,\n            transactionHash: t.value.hash\n          })) : (this.executedTransactions.push([a.status, r, a.reason]), this.emit(\"transactionExecutionFailed\", {\n            message: `failed to execute transaction ${this.executedTransactions.length} with error ${a.reason}`,\n            error: a.reason\n          }));\n        }\n      } catch (i) {\n        throw new Error(`Check transaction failed for ${this.account.accountAddress.toString()} with error ${i}`);\n      }\n    }\n    async push(t, r) {\n      this.transactionsQueue.enqueue([t, r]);\n    }\n    async generateNextTransaction(t, r) {\n      if (this.transactionsQueue.isEmpty()) return;\n      let [i, o] = await this.transactionsQueue.dequeue();\n      return A({\n        aptosConfig: this.aptosConfig,\n        sender: t.accountAddress,\n        data: i,\n        options: {\n          ...o,\n          accountSequenceNumber: r\n        }\n      });\n    }\n    async run() {\n      try {\n        for (; !this.taskQueue.isCancelled();) await (await this.taskQueue.dequeue())();\n      } catch (t) {\n        throw new Error(`Unable to start transaction batching: ${t}`);\n      }\n    }\n    start() {\n      if (this.started) throw new Error(\"worker has already started\");\n      this.started = !0, this.taskQueue.enqueue(() => this.submitNextTransaction()), this.taskQueue.enqueue(() => this.processTransactions()), this.run();\n    }\n    stop() {\n      if (this.taskQueue.isCancelled()) throw new Error(\"worker has already stopped\");\n      this.started = !1, this.taskQueue.cancel();\n    }\n  };\nvar nr = class extends $a {\n  constructor(e) {\n    super(), this.config = e;\n  }\n  start(e) {\n    let {\n      sender: t\n    } = e;\n    this.account = t, this.transactionWorker = new tr(this.config, t), this.transactionWorker.start(), this.registerToEvents();\n  }\n  push(e) {\n    let {\n      data: t,\n      options: r\n    } = e;\n    for (let i of t) this.transactionWorker.push(i, r);\n  }\n  registerToEvents() {\n    this.transactionWorker.on(\"transactionSent\", async e => {\n      this.emit(\"transactionSent\", e);\n    }), this.transactionWorker.on(\"transactionSendFailed\", async e => {\n      this.emit(\"transactionSendFailed\", e);\n    }), this.transactionWorker.on(\"transactionExecuted\", async e => {\n      this.emit(\"transactionExecuted\", e);\n    }), this.transactionWorker.on(\"transactionExecutionFailed\", async e => {\n      this.emit(\"transactionExecutionFailed\", e);\n    }), this.transactionWorker.on(\"executionFinish\", async e => {\n      this.emit(\"executionFinish\", e);\n    });\n  }\n  forSingleAccount(e) {\n    try {\n      let {\n        sender: t,\n        data: r,\n        options: i\n      } = e;\n      this.start({\n        sender: t\n      }), this.push({\n        data: r,\n        options: i\n      });\n    } catch (t) {\n      throw new Error(`failed to submit transactions with error: ${t}`);\n    }\n  }\n};\nvar Tn = class {\n  constructor(e) {\n    this.config = e, this.build = new Xn(this.config), this.simulate = new jt(this.config), this.submit = new Qt(this.config), this.batch = new nr(this.config);\n  }\n  async getTransactions(e) {\n    return Vi({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getTransactionByVersion(e) {\n    return Hi({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getTransactionByHash(e) {\n    return Li({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async isPendingTransaction(e) {\n    return $i({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async waitForTransaction(e) {\n    return je({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getGasPriceEstimation() {\n    return Fn({\n      aptosConfig: this.config\n    });\n  }\n  getSigningMessage(e) {\n    return fo(e);\n  }\n  async publishPackageTransaction(e) {\n    return bo({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async rotateAuthKey(e) {\n    return Do({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  sign(e) {\n    return Qn({\n      ...e\n    });\n  }\n  signAsFeePayer(e) {\n    return Jn({\n      ...e\n    });\n  }\n  async batchTransactionsForSingleAccount(e) {\n    try {\n      let {\n        sender: t,\n        data: r,\n        options: i\n      } = e;\n      this.batch.forSingleAccount({\n        sender: t,\n        data: r,\n        options: i\n      });\n    } catch (t) {\n      throw new Error(`failed to submit transactions with error: ${t}`);\n    }\n  }\n  async signAndSubmitTransaction(e) {\n    return Ze({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async signAndSubmitAsFeePayer(e) {\n    return ho({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nimport { jwtDecode as Wa } from \"jwt-decode\";\nasync function rr(n) {\n  let {\n      aptosConfig: e,\n      jwt: t,\n      ephemeralKeyPair: r,\n      uidKey: i = \"sub\",\n      derivationPath: o\n    } = n,\n    s = {\n      jwt_b64: t,\n      epk: r.getPublicKey().bcsToHex().toStringWithoutPrefix(),\n      exp_date_secs: r.expiryDateSecs,\n      epk_blinder: T.fromHexInput(r.blinder).toStringWithoutPrefix(),\n      uid_key: i,\n      derivation_path: o\n    },\n    {\n      data: a\n    } = await bi({\n      aptosConfig: e,\n      path: \"fetch\",\n      body: s,\n      originMethod: \"getPepper\",\n      overrides: {\n        WITH_CREDENTIALS: !1\n      }\n    });\n  return T.fromHexInput(a.pepper).toUint8Array();\n}\nasync function Lr(n) {\n  let {\n    aptosConfig: e,\n    jwt: t,\n    ephemeralKeyPair: r,\n    pepper: i = await rr(n),\n    uidKey: o = \"sub\",\n    maxExpHorizonSecs: s = (await Mt({\n      aptosConfig: e\n    })).maxExpHorizonSecs\n  } = n;\n  if (T.fromHexInput(i).toUint8Array().length !== Ne.PEPPER_LENGTH) throw new Error(`Pepper needs to be ${Ne.PEPPER_LENGTH} bytes`);\n  let a = Wa(t);\n  if (typeof a.iat != \"number\") throw new Error(\"iat was not found\");\n  if (s < r.expiryDateSecs - a.iat) throw Error(`The EphemeralKeyPair is too long lived.  It's lifespan must be less than ${s}`);\n  let u = {\n      jwt_b64: t,\n      epk: r.getPublicKey().bcsToHex().toStringWithoutPrefix(),\n      epk_blinder: T.fromHexInput(r.blinder).toStringWithoutPrefix(),\n      exp_date_secs: r.expiryDateSecs,\n      exp_horizon_secs: s,\n      pepper: T.fromHexInput(i).toStringWithoutPrefix(),\n      uid_key: o\n    },\n    {\n      data: d\n    } = await wi({\n      aptosConfig: e,\n      path: \"prove\",\n      body: u,\n      originMethod: \"getProof\",\n      overrides: {\n        WITH_CREDENTIALS: !1\n      }\n    }),\n    l = d.proof,\n    y = new et({\n      a: l.a,\n      b: l.b,\n      c: l.c\n    });\n  return new ae({\n    proof: new Jt(y, 0),\n    trainingWheelsSignature: We.fromHex(d.training_wheels_signature),\n    expHorizonSecs: s\n  });\n}\nasync function Ns(n) {\n  let {\n      aptosConfig: e,\n      jwt: t,\n      jwkAddress: r,\n      uidKey: i,\n      proofFetchCallback: o,\n      pepper: s = await rr(n)\n    } = n,\n    {\n      verificationKey: a,\n      maxExpHorizonSecs: u\n    } = await Mt({\n      aptosConfig: e\n    }),\n    d = Lr({\n      ...n,\n      pepper: s,\n      maxExpHorizonSecs: u\n    }),\n    l = o ? d : await d;\n  if (r !== void 0) {\n    let g = q.fromJwtAndPepper({\n        jwt: t,\n        pepper: s,\n        jwkAddress: r,\n        uidKey: i\n      }),\n      f = await $t({\n        aptosConfig: e,\n        authenticationKey: g.authKey().derivedAddress()\n      });\n    return mt.create({\n      ...n,\n      address: f,\n      proof: l,\n      pepper: s,\n      proofFetchCallback: o,\n      jwkAddress: r,\n      verificationKey: a\n    });\n  }\n  let y = E.fromJwtAndPepper({\n      jwt: t,\n      pepper: s,\n      uidKey: i\n    }),\n    p = await $t({\n      aptosConfig: e,\n      authenticationKey: y.authKey().derivedAddress()\n    });\n  return Ne.create({\n    ...n,\n    address: p,\n    proof: l,\n    pepper: s,\n    proofFetchCallback: o,\n    verificationKey: a\n  });\n}\nasync function Ms(n) {\n  let {\n      aptosConfig: e,\n      sender: t,\n      iss: r,\n      options: i\n    } = n,\n    {\n      jwksUrl: o\n    } = n;\n  o === void 0 && (ci.test(r) ? o = \"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\" : o = r.endsWith(\"/\") ? `${r}.well-known/jwks.json` : `${r}/.well-known/jwks.json`);\n  let s;\n  try {\n    if (s = await fetch(o), !s.ok) throw new Error(`${s.status} ${s.statusText}`);\n  } catch (u) {\n    let d;\n    throw u instanceof Error ? d = `${u.message}` : d = `error unknown - ${u}`, b.fromErrorType({\n      type: 14,\n      details: `Failed to fetch JWKS at ${o}: ${d}`\n    });\n  }\n  let a = await s.json();\n  return A({\n    aptosConfig: e,\n    sender: t.accountAddress,\n    data: {\n      function: \"0x1::jwks::update_federated_jwk_set\",\n      functionArguments: [r, P.MoveString(a.keys.map(u => u.kid)), P.MoveString(a.keys.map(u => u.alg)), P.MoveString(a.keys.map(u => u.e)), P.MoveString(a.keys.map(u => u.n))]\n    },\n    options: i\n  });\n}\nvar Sn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getPepper(e) {\n    return rr({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getProof(e) {\n    return Lr({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async deriveKeylessAccount(e) {\n    return Ns({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async updateFederatedKeylessJwkSetTransaction(e) {\n    return Ms({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nasync function ja(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = {\n      query: vn,\n      variables: {\n        where_condition: t?.where,\n        offset: t?.offset,\n        limit: t?.limit,\n        order_by: t?.orderBy\n      }\n    };\n  return (await w({\n    aptosConfig: e,\n    query: r,\n    originMethod: \"getObjectData\"\n  })).current_objects;\n}\nasync function Vs(n) {\n  let {\n      aptosConfig: e,\n      objectAddress: t,\n      options: r\n    } = n,\n    o = {\n      object_address: {\n        _eq: c.from(t).toStringLong()\n      }\n    };\n  return (await ja({\n    aptosConfig: e,\n    options: {\n      ...r,\n      where: o\n    }\n  }))[0];\n}\nvar Pn = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getObjectDataByObjectAddress(e) {\n    return await h({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"objects_processor\"\n    }), Vs({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nvar W = class {\n  constructor(e) {\n    this.config = new Qi(e), this.account = new dn(this.config), this.abstraction = new ft(this.config), this.ans = new bn(this.config), this.coin = new pn(this.config), this.digitalAsset = new ln(this.config), this.event = new mn(this.config), this.faucet = new yn(this.config), this.fungibleAsset = new An(this.config), this.general = new fn(this.config), this.staking = new wn(this.config), this.transaction = new Tn(this.config), this.table = new Ar(this.config), this.keyless = new Sn(this.config), this.object = new Pn(this.config);\n  }\n};\nfunction ne(n, e, t) {\n  Object.getOwnPropertyNames(e.prototype).forEach(r => {\n    let i = Object.getOwnPropertyDescriptor(e.prototype, r);\n    i && (i.value = function (...o) {\n      return this[t][r](...o);\n    }, Object.defineProperty(n.prototype, r, i));\n  });\n}\nne(W, dn, \"account\");\nne(W, ft, \"abstraction\");\nne(W, bn, \"ans\");\nne(W, pn, \"coin\");\nne(W, ln, \"digitalAsset\");\nne(W, mn, \"event\");\nne(W, yn, \"faucet\");\nne(W, An, \"fungibleAsset\");\nne(W, fn, \"general\");\nne(W, wn, \"staking\");\nne(W, Tn, \"transaction\");\nne(W, Ar, \"table\");\nne(W, Sn, \"keyless\");\nne(W, Pn, \"object\");\nvar Ya = 1e7,\n  $r = 120,\n  Xa = 30,\n  ec = 330,\n  tc = 120,\n  nc = 350,\n  rc = 300,\n  ic = 93,\n  Ce = class Ce extends qe {\n    constructor(e, t) {\n      super();\n      let r = T.fromHexInput(t).toUint8Array();\n      if (r.length !== Ce.ID_COMMITMENT_LENGTH) throw new Error(`Id Commitment length in bytes should be ${Ce.ID_COMMITMENT_LENGTH}`);\n      this.iss = e, this.idCommitment = r;\n    }\n    authKey() {\n      let e = new j();\n      return e.serializeU32AsUleb128(3), e.serializeFixedBytes(this.bcsToBytes()), Z.fromSchemeAndBytes({\n        scheme: 2,\n        input: e.toUint8Array()\n      });\n    }\n    verifySignature(e) {\n      try {\n        return Dn({\n          ...e,\n          publicKey: this\n        }), !0;\n      } catch (t) {\n        if (t instanceof b) return !1;\n        throw t;\n      }\n    }\n    async verifySignatureAsync(e) {\n      return hr({\n        ...e,\n        publicKey: this\n      });\n    }\n    serialize(e) {\n      e.serializeStr(this.iss), e.serializeBytes(this.idCommitment);\n    }\n    static deserialize(e) {\n      let t = e.deserializeStr(),\n        r = e.deserializeBytes();\n      return new Ce(t, r);\n    }\n    static load(e) {\n      let t = e.deserializeStr(),\n        r = e.deserializeBytes();\n      return new Ce(t, r);\n    }\n    static isPublicKey(e) {\n      return e instanceof Ce;\n    }\n    static create(e) {\n      return Hs(e), new Ce(e.iss, Hs(e));\n    }\n    static fromJwtAndPepper(e) {\n      let {\n          jwt: t,\n          pepper: r,\n          uidKey: i = \"sub\"\n        } = e,\n        o = Ls(t);\n      if (typeof o.iss != \"string\") throw new Error(\"iss was not found\");\n      if (typeof o.aud != \"string\") throw new Error(\"aud was not found or an array of values\");\n      let s = o[i];\n      return Ce.create({\n        iss: o.iss,\n        uidKey: i,\n        uidVal: s,\n        aud: o.aud,\n        pepper: r\n      });\n    }\n    static isInstance(e) {\n      return \"iss\" in e && typeof e.iss == \"string\" && \"idCommitment\" in e && e.idCommitment instanceof Uint8Array;\n    }\n  };\nCe.ID_COMMITMENT_LENGTH = 32;\nvar E = Ce;\nasync function hr(n) {\n  let {\n    aptosConfig: e,\n    publicKey: t,\n    message: r,\n    signature: i,\n    jwk: o,\n    keylessConfig: s = await Mt({\n      aptosConfig: e\n    }),\n    options: a\n  } = n;\n  try {\n    if (!(i instanceof ue)) throw b.fromErrorType({\n      type: 26,\n      details: \"Not a keyless signature\"\n    });\n    return Dn({\n      message: r,\n      publicKey: t,\n      signature: i,\n      jwk: o || (await wr({\n        aptosConfig: e,\n        publicKey: t,\n        kid: i.getJwkKid()\n      })),\n      keylessConfig: s\n    }), !0;\n  } catch (u) {\n    if (a?.throwErrorWithReason) throw u;\n    return !1;\n  }\n}\nfunction Dn(n) {\n  let {\n      publicKey: e,\n      message: t,\n      signature: r,\n      keylessConfig: i,\n      jwk: o\n    } = n,\n    {\n      verificationKey: s,\n      maxExpHorizonSecs: a,\n      trainingWheelsPubkey: u\n    } = i;\n  if (!(r instanceof ue)) throw b.fromErrorType({\n    type: 26,\n    details: \"Not a keyless signature\"\n  });\n  if (!(r.ephemeralCertificate.signature instanceof ae)) throw b.fromErrorType({\n    type: 26,\n    details: \"Unsupported ephemeral certificate variant\"\n  });\n  let d = r.ephemeralCertificate.signature;\n  if (!(d.proof.proof instanceof et)) throw b.fromErrorType({\n    type: 26,\n    details: \"Unsupported proof variant for ZeroKnowledgeSig\"\n  });\n  let l = d.proof.proof;\n  if (r.expiryDateSecs < ve()) throw b.fromErrorType({\n    type: 27,\n    details: \"The expiryDateSecs is in the past\"\n  });\n  if (d.expHorizonSecs > a) throw b.fromErrorType({\n    type: 28\n  });\n  if (!r.ephemeralPublicKey.verifySignature({\n    message: t,\n    signature: r.ephemeralSignature\n  })) throw b.fromErrorType({\n    type: 29\n  });\n  let y = oc({\n    publicKey: e,\n    signature: r,\n    jwk: o,\n    keylessConfig: i\n  });\n  if (!s.verifyProof({\n    publicInputsHash: y,\n    groth16Proof: l\n  })) throw b.fromErrorType({\n    type: 32\n  });\n  if (u) {\n    if (!d.trainingWheelsSignature) throw b.fromErrorType({\n      type: 30\n    });\n    let p = new Wr(l, y);\n    if (!u.verifySignature({\n      message: p.hash(),\n      signature: d.trainingWheelsSignature\n    })) throw b.fromErrorType({\n      type: 31\n    });\n  }\n}\nfunction oc(n) {\n  let {\n      publicKey: e,\n      signature: t,\n      jwk: r,\n      keylessConfig: i\n    } = n,\n    o = e instanceof E ? e : e.keylessPublicKey;\n  if (!(t.ephemeralCertificate.signature instanceof ae)) throw new Error(\"Signature is not a ZeroKnowledgeSig\");\n  let s = t.ephemeralCertificate.signature,\n    a = [];\n  return a.push(...Cn(t.ephemeralPublicKey.toUint8Array(), i.maxCommitedEpkBytes)), a.push(Et(o.idCommitment)), a.push(t.expiryDateSecs), a.push(s.expHorizonSecs), a.push(Te(o.iss, i.maxIssValBytes)), s.extraField ? (a.push(1n), a.push(Te(s.extraField, i.maxExtraFieldBytes))) : (a.push(0n), a.push(Te(\" \", i.maxExtraFieldBytes))), a.push(Te(Za(t.jwtHeader, !0) + \".\", i.maxJwtHeaderB64Bytes)), a.push(r.toScalar()), s.overrideAudVal ? (a.push(Te(s.overrideAudVal, $r)), a.push(1n)) : (a.push(Te(\"\", $r)), a.push(0n)), It(a);\n}\nasync function wr(n) {\n  let {\n      aptosConfig: e,\n      publicKey: t,\n      kid: r\n    } = n,\n    i = t instanceof E ? t : t.keylessPublicKey,\n    {\n      iss: o\n    } = i,\n    s,\n    a = t instanceof q ? t.jwkAddress : void 0;\n  try {\n    s = await cc({\n      aptosConfig: e,\n      jwkAddr: a\n    });\n  } catch (l) {\n    throw b.fromErrorType({\n      type: 24,\n      error: l,\n      details: `Failed to fetch ${a ? \"Federated\" : \"Patched\"}JWKs ${a ? `for address ${a}` : \"0x1\"}`\n    });\n  }\n  let u = s.get(o);\n  if (u === void 0) throw b.fromErrorType({\n    type: 7,\n    details: `JWKs for issuer ${o} not found.`\n  });\n  let d = u.find(l => l.kid === r);\n  if (d === void 0) throw b.fromErrorType({\n    type: 6,\n    details: `JWK with kid '${r}' for issuer '${o}' not found.`\n  });\n  return d;\n}\nfunction Hs(n) {\n  let {\n      uidKey: e,\n      uidVal: t,\n      aud: r,\n      pepper: i\n    } = n,\n    o = [Et(T.fromHexInput(i).toUint8Array()), Te(r, $r), Te(t, ec), Te(e, Xa)];\n  return or(It(o), E.ID_COMMITMENT_LENGTH);\n}\nvar ue = class n extends we {\n    constructor(e) {\n      super();\n      let {\n        jwtHeader: t,\n        ephemeralCertificate: r,\n        expiryDateSecs: i,\n        ephemeralPublicKey: o,\n        ephemeralSignature: s\n      } = e;\n      this.jwtHeader = t, this.ephemeralCertificate = r, this.expiryDateSecs = i, this.ephemeralPublicKey = o, this.ephemeralSignature = s;\n    }\n    getJwkKid() {\n      return dc(this.jwtHeader).kid;\n    }\n    serialize(e) {\n      this.ephemeralCertificate.serialize(e), e.serializeStr(this.jwtHeader), e.serializeU64(this.expiryDateSecs), this.ephemeralPublicKey.serialize(e), this.ephemeralSignature.serialize(e);\n    }\n    static deserialize(e) {\n      let t = Nt.deserialize(e),\n        r = e.deserializeStr(),\n        i = e.deserializeU64(),\n        o = Ct.deserialize(e),\n        s = We.deserialize(e);\n      return new n({\n        jwtHeader: r,\n        expiryDateSecs: Number(i),\n        ephemeralCertificate: t,\n        ephemeralPublicKey: o,\n        ephemeralSignature: s\n      });\n    }\n    static getSimulationSignature() {\n      return new n({\n        jwtHeader: \"{}\",\n        ephemeralCertificate: new Nt(new ae({\n          proof: new Jt(new et({\n            a: new Uint8Array(32),\n            b: new Uint8Array(64),\n            c: new Uint8Array(32)\n          }), 0),\n          expHorizonSecs: 0\n        }), 0),\n        expiryDateSecs: 0,\n        ephemeralPublicKey: new Ct(new R(new Uint8Array(32))),\n        ephemeralSignature: new We(new z(new Uint8Array(64)))\n      });\n    }\n    static isSignature(e) {\n      return e instanceof n;\n    }\n  },\n  Nt = class n extends we {\n    constructor(e, t) {\n      super(), this.signature = e, this.variant = t;\n    }\n    toUint8Array() {\n      return this.signature.toUint8Array();\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(this.variant), this.signature.serialize(e);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32();\n      switch (t) {\n        case 0:\n          return new n(ae.deserialize(e), t);\n        default:\n          throw new Error(`Unknown variant index for EphemeralCertificate: ${t}`);\n      }\n    }\n  },\n  xn = class xn extends S {\n    constructor(e) {\n      if (super(), this.data = T.fromHexInput(e).toUint8Array(), this.data.length !== 32) throw new Error(\"Input needs to be 32 bytes\");\n    }\n    serialize(e) {\n      e.serializeFixedBytes(this.data);\n    }\n    static deserialize(e) {\n      let t = e.deserializeFixedBytes(32);\n      return new xn(t);\n    }\n    toArray() {\n      let e = this.toProjectivePoint();\n      return [e.x.toString(), e.y.toString(), e.pz.toString()];\n    }\n    toProjectivePoint() {\n      let e = new Uint8Array(this.data);\n      e.reverse();\n      let t = (e[0] & 128) >> 7,\n        {\n          Fp: r\n        } = fe.fields,\n        i = r.create(qr(e)),\n        o = r.sqrt(r.add(r.pow(i, 3n), xn.B)),\n        s = r.neg(o),\n        a = o > s == (t === 1) ? o : s;\n      return fe.G1.ProjectivePoint.fromAffine({\n        x: i,\n        y: a\n      });\n    }\n  };\nxn.B = fe.fields.Fp.create(3n);\nvar He = xn;\nfunction qr(n) {\n  if (n.length !== 32) throw new Error(\"Input should be 32 bytes\");\n  let e = new Uint8Array(n);\n  return e[0] = e[0] & 63, Ja(e);\n}\nvar Kn = class Kn extends S {\n  constructor(e) {\n    if (super(), this.data = T.fromHexInput(e).toUint8Array(), this.data.length !== 64) throw new Error(\"Input needs to be 64 bytes\");\n  }\n  serialize(e) {\n    e.serializeFixedBytes(this.data);\n  }\n  static deserialize(e) {\n    let t = e.deserializeFixedBytes(64);\n    return new Kn(t);\n  }\n  toArray() {\n    let e = this.toProjectivePoint();\n    return [[e.x.c0.toString(), e.x.c1.toString()], [e.y.c0.toString(), e.y.c1.toString()], [e.pz.c0.toString(), e.pz.c1.toString()]];\n  }\n  toProjectivePoint() {\n    let e = new Uint8Array(this.data),\n      t = e.slice(0, 32).reverse(),\n      r = e.slice(32, 64).reverse(),\n      i = (r[0] & 128) >> 7,\n      {\n        Fp2: o\n      } = fe.fields,\n      s = o.fromBigTuple([qr(t), qr(r)]),\n      a = o.sqrt(o.add(o.pow(s, 3n), Kn.B)),\n      u = o.neg(a),\n      l = (a.c1 > u.c1 || a.c1 === u.c1 && a.c0 > u.c0) === (i === 1) ? a : u;\n    return fe.G2.ProjectivePoint.fromAffine({\n      x: s,\n      y: l\n    });\n  }\n};\nKn.B = fe.fields.Fp2.fromBigTuple([19485874751759354771024239261021720505790618469301721065564631296452457478373n, 266929791119991161246907387137283842545076965332900288569378510910307636690n]);\nvar ht = Kn,\n  et = class n extends ni {\n    constructor(e) {\n      super();\n      let {\n        a: t,\n        b: r,\n        c: i\n      } = e;\n      this.a = new He(t), this.b = new ht(r), this.c = new He(i);\n    }\n    serialize(e) {\n      this.a.serialize(e), this.b.serialize(e), this.c.serialize(e);\n    }\n    static deserialize(e) {\n      let t = He.deserialize(e).bcsToBytes(),\n        r = ht.deserialize(e).bcsToBytes(),\n        i = He.deserialize(e).bcsToBytes();\n      return new n({\n        a: t,\n        b: r,\n        c: i\n      });\n    }\n    toSnarkJsJson() {\n      return {\n        protocol: \"groth16\",\n        curve: \"bn128\",\n        pi_a: this.a.toArray(),\n        pi_b: this.b.toArray(),\n        pi_c: this.c.toArray()\n      };\n    }\n  },\n  Wr = class n extends S {\n    constructor(t, r) {\n      super();\n      this.domainSeparator = \"APTOS::Groth16ProofAndStatement\";\n      if (this.proof = t, this.publicInputsHash = typeof r == \"bigint\" ? or(r, 32) : T.fromHexInput(r).toUint8Array(), this.publicInputsHash.length !== 32) throw new Error(\"Invalid public inputs hash\");\n    }\n    serialize(t) {\n      this.proof.serialize(t), t.serializeFixedBytes(this.publicInputsHash);\n    }\n    static deserialize(t) {\n      return new n(et.deserialize(t), t.deserializeFixedBytes(32));\n    }\n    hash() {\n      return Je(this.bcsToBytes(), this.domainSeparator);\n    }\n  },\n  Jt = class n extends S {\n    constructor(e, t) {\n      super(), this.proof = e, this.variant = t;\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(this.variant), this.proof.serialize(e);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32();\n      switch (t) {\n        case 0:\n          return new n(et.deserialize(e), t);\n        default:\n          throw new Error(`Unknown variant index for ZkProof: ${t}`);\n      }\n    }\n  },\n  ae = class n extends we {\n    constructor(e) {\n      super();\n      let {\n        proof: t,\n        expHorizonSecs: r,\n        trainingWheelsSignature: i,\n        extraField: o,\n        overrideAudVal: s\n      } = e;\n      this.proof = t, this.expHorizonSecs = r, this.trainingWheelsSignature = i, this.extraField = o, this.overrideAudVal = s;\n    }\n    static fromBytes(e) {\n      return n.deserialize(new L(e));\n    }\n    serialize(e) {\n      this.proof.serialize(e), e.serializeU64(this.expHorizonSecs), e.serializeOption(this.extraField), e.serializeOption(this.overrideAudVal), e.serializeOption(this.trainingWheelsSignature);\n    }\n    static deserialize(e) {\n      let t = Jt.deserialize(e),\n        r = Number(e.deserializeU64()),\n        i = e.deserializeOption(\"string\"),\n        o = e.deserializeOption(\"string\"),\n        s = e.deserializeOption(We);\n      return new n({\n        proof: t,\n        expHorizonSecs: r,\n        trainingWheelsSignature: s,\n        extraField: i,\n        overrideAudVal: o\n      });\n    }\n  },\n  jr = class n {\n    constructor(e) {\n      let {\n        verificationKey: t,\n        trainingWheelsPubkey: r,\n        maxExpHorizonSecs: i = Ya,\n        maxExtraFieldBytes: o = nc,\n        maxJwtHeaderB64Bytes: s = rc,\n        maxIssValBytes: a = tc,\n        maxCommitedEpkBytes: u = ic\n      } = e;\n      this.verificationKey = t, this.maxExpHorizonSecs = i, r && (this.trainingWheelsPubkey = new Ct(new R(r))), this.maxExtraFieldBytes = o, this.maxJwtHeaderB64Bytes = s, this.maxIssValBytes = a, this.maxCommitedEpkBytes = u;\n    }\n    static create(e, t) {\n      return new n({\n        verificationKey: new Qr({\n          alphaG1: e.alpha_g1,\n          betaG2: e.beta_g2,\n          deltaG2: e.delta_g2,\n          gammaAbcG1: e.gamma_abc_g1,\n          gammaG2: e.gamma_g2\n        }),\n        maxExpHorizonSecs: Number(t.max_exp_horizon_secs),\n        trainingWheelsPubkey: t.training_wheels_pubkey.vec[0],\n        maxExtraFieldBytes: t.max_extra_field_bytes,\n        maxJwtHeaderB64Bytes: t.max_jwt_header_b64_bytes,\n        maxIssValBytes: t.max_iss_val_bytes,\n        maxCommitedEpkBytes: t.max_commited_epk_bytes\n      });\n    }\n  },\n  Qr = class n {\n    constructor(e) {\n      let {\n        alphaG1: t,\n        betaG2: r,\n        deltaG2: i,\n        gammaAbcG1: o,\n        gammaG2: s\n      } = e;\n      this.alphaG1 = new He(t), this.betaG2 = new ht(r), this.deltaG2 = new ht(i), this.gammaAbcG1 = [new He(o[0]), new He(o[1])], this.gammaG2 = new ht(s);\n    }\n    hash() {\n      let e = new j();\n      return this.serialize(e), Qa.create().update(e.toUint8Array()).digest();\n    }\n    serialize(e) {\n      this.alphaG1.serialize(e), this.betaG2.serialize(e), this.deltaG2.serialize(e), this.gammaAbcG1[0].serialize(e), this.gammaAbcG1[1].serialize(e), this.gammaG2.serialize(e);\n    }\n    static fromGroth16VerificationKeyResponse(e) {\n      return new n({\n        alphaG1: e.alpha_g1,\n        betaG2: e.beta_g2,\n        deltaG2: e.delta_g2,\n        gammaAbcG1: e.gamma_abc_g1,\n        gammaG2: e.gamma_g2\n      });\n    }\n    verifyProof(e) {\n      let {\n        publicInputsHash: t,\n        groth16Proof: r\n      } = e;\n      try {\n        let i = r.a.toProjectivePoint(),\n          o = r.b.toProjectivePoint(),\n          s = r.c.toProjectivePoint(),\n          a = this.alphaG1.toProjectivePoint(),\n          u = this.betaG2.toProjectivePoint(),\n          d = this.gammaG2.toProjectivePoint(),\n          l = this.deltaG2.toProjectivePoint(),\n          y = this.gammaAbcG1.map($e => $e.toProjectivePoint()),\n          {\n            Fp12: p\n          } = fe.fields,\n          g = y[0].add(y[1].multiply(t)),\n          f = fe.pairing(g, d),\n          C = fe.pairing(i, o),\n          M = fe.pairing(a, u),\n          Ee = fe.pairing(s, l),\n          Le = p.mul(M, p.mul(f, Ee));\n        return p.eql(C, Le);\n      } catch (i) {\n        throw b.fromErrorType({\n          type: 32,\n          error: i,\n          details: \"Error encountered when checking zero knowledge relation\"\n        });\n      }\n    }\n    toSnarkJsJson() {\n      return {\n        protocol: \"groth16\",\n        curve: \"bn128\",\n        nPublic: 1,\n        vk_alpha_1: this.alphaG1.toArray(),\n        vk_beta_2: this.betaG2.toArray(),\n        vk_gamma_2: this.gammaG2.toArray(),\n        vk_delta_2: this.deltaG2.toArray(),\n        IC: this.gammaAbcG1.map(e => e.toArray())\n      };\n    }\n  };\nasync function Mt(n) {\n  let {\n    aptosConfig: e\n  } = n;\n  try {\n    return await kt(async () => {\n      let [t, r] = await Promise.all([sc(n), ac(n)]);\n      return jr.create(r, t);\n    }, `keyless-configuration-${e.network}`, 1e3 * 60 * 5)();\n  } catch (t) {\n    throw t instanceof b ? t : b.fromErrorType({\n      type: 25,\n      error: t\n    });\n  }\n}\nfunction ze(n) {\n  let {\n      jwt: e,\n      uidKey: t = \"sub\"\n    } = n,\n    r;\n  try {\n    r = Ls(e);\n  } catch (o) {\n    throw b.fromErrorType({\n      type: 12,\n      details: `Failed to parse JWT - ${di(o)}`\n    });\n  }\n  if (typeof r.iss != \"string\") throw b.fromErrorType({\n    type: 12,\n    details: \"JWT is missing 'iss' in the payload. This should never happen.\"\n  });\n  if (typeof r.aud != \"string\") throw b.fromErrorType({\n    type: 12,\n    details: \"JWT is missing 'aud' in the payload or 'aud' is an array of values.\"\n  });\n  let i = r[t];\n  return {\n    iss: r.iss,\n    aud: r.aud,\n    uidVal: i\n  };\n}\nasync function sc(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = \"0x1::keyless_account::Configuration\";\n  try {\n    let {\n      data: i\n    } = await tt({\n      aptosConfig: e,\n      originMethod: \"getKeylessConfigurationResource\",\n      path: `accounts/${c.from(\"0x1\").toString()}/resource/${r}`,\n      params: {\n        ledger_version: t?.ledgerVersion\n      }\n    });\n    return i.data;\n  } catch (i) {\n    throw b.fromErrorType({\n      type: 22,\n      error: i\n    });\n  }\n}\nasync function ac(n) {\n  let {\n      aptosConfig: e,\n      options: t\n    } = n,\n    r = \"0x1::keyless_account::Groth16VerificationKey\";\n  try {\n    let {\n      data: i\n    } = await tt({\n      aptosConfig: e,\n      originMethod: \"getGroth16VerificationKeyResource\",\n      path: `accounts/${c.from(\"0x1\").toString()}/resource/${r}`,\n      params: {\n        ledger_version: t?.ledgerVersion\n      }\n    });\n    return i.data;\n  } catch (i) {\n    throw b.fromErrorType({\n      type: 23,\n      error: i\n    });\n  }\n}\nasync function cc(n) {\n  let {\n      aptosConfig: e,\n      jwkAddr: t,\n      options: r\n    } = n,\n    i;\n  if (t) {\n    let s = \"0x1::jwks::FederatedJWKs\",\n      {\n        data: a\n      } = await tt({\n        aptosConfig: e,\n        originMethod: \"getKeylessJWKs\",\n        path: `accounts/${c.from(t).toString()}/resource/${s}`,\n        params: {\n          ledger_version: r?.ledgerVersion\n        }\n      });\n    i = a;\n  } else {\n    let s = \"0x1::jwks::PatchedJWKs\",\n      {\n        data: a\n      } = await tt({\n        aptosConfig: e,\n        originMethod: \"getKeylessJWKs\",\n        path: `accounts/0x1/resource/${s}`,\n        params: {\n          ledger_version: r?.ledgerVersion\n        }\n      });\n    i = a;\n  }\n  let o = new Map();\n  for (let s of i.data.jwks.entries) {\n    let a = [];\n    for (let u of s.jwks) {\n      let {\n          data: d\n        } = u.variant,\n        l = new L(T.fromHexInput(d).toUint8Array()),\n        y = Jr.deserialize(l);\n      a.push(y);\n    }\n    o.set(Yr(s.issuer), a);\n  }\n  return o;\n}\nvar Jr = class n extends S {\n  constructor(e) {\n    super();\n    let {\n      kid: t,\n      kty: r,\n      alg: i,\n      e: o,\n      n: s\n    } = e;\n    this.kid = t, this.kty = r, this.alg = i, this.e = o, this.n = s;\n  }\n  serialize(e) {\n    e.serializeStr(this.kid), e.serializeStr(this.kty), e.serializeStr(this.alg), e.serializeStr(this.e), e.serializeStr(this.n);\n  }\n  static fromMoveStruct(e) {\n    let {\n        data: t\n      } = e.variant,\n      r = new L(T.fromHexInput(t).toUint8Array());\n    return n.deserialize(r);\n  }\n  toScalar() {\n    if (this.alg !== \"RS256\") throw b.fromErrorType({\n      type: 32,\n      details: \"Failed to convert JWK to scalar when calculating the public inputs hash. Only RSA 256 is supported currently\"\n    });\n    let e = gi(this.n),\n      r = uc(e.reverse()).map(i => Et(i));\n    return r.push(256n), It(r);\n  }\n  static deserialize(e) {\n    let t = e.deserializeStr(),\n      r = e.deserializeStr(),\n      i = e.deserializeStr(),\n      o = e.deserializeStr(),\n      s = e.deserializeStr();\n    return new n({\n      kid: t,\n      kty: r,\n      alg: i,\n      n: s,\n      e: o\n    });\n  }\n};\nfunction uc(n) {\n  let e = [];\n  for (let t = 0; t < n.length; t += 24) {\n    let r = n.slice(t, Math.min(t + 24, n.length));\n    if (r.length < 24) {\n      let i = new Uint8Array(24);\n      i.set(r), e.push(i);\n    } else e.push(r);\n  }\n  return e;\n}\nfunction dc(n) {\n  try {\n    let e = JSON.parse(n);\n    if (e.kid === void 0) throw new Error(\"JWT header missing kid\");\n    return e;\n  } catch {\n    throw new Error(\"Failed to parse JWT header.\");\n  }\n}\nexport { Ya as a, $r as b, Xa as c, ec as d, tc as e, nc as f, rc as g, ic as h, E as i, hr as j, Dn as k, wr as l, ue as m, Nt as n, et as o, Wr as p, Jt as q, ae as r, jr as s, Qr as t, Mt as u, ze as v, cc as w, Jr as x, dc as y, q as z, k as A, O as B, Yt as C, Se as D, Pe as E, Dt as F, _e as G, V as H, me as I, ke as J, X as K, xe as L, Rt as M, rt as N, Xt as O, U as P, G as Q, oe as R, Fe as S, Ue as T, H as U, De as V, Re as W, F as X, it as Y, Rn as Z, D as _, K as $, m as aa, Ke as ba, Ju as ca, x as da, Zu as ea, se as fa, qs as ga, ot as ha, st as ia, en as ja, tn as ka, at as la, nn as ma, rn as na, on as oa, pe as pa, On as qa, ct as ra, ut as sa, Oe as ta, dt as ua, Ot as va, pt as wa, lt as xa, Qe as ya, Ge as za, Gt as Aa, Gn as Ba, Bn as Ca, Je as Da, sp as Ea, ye as Fa, ee as Ga, br as Ha, le as Ia, Be as Ja, gt as Ka, Nn as La, ce as Ma, zn as Na, Ne as Oa, mt as Pa, sn as Qa, Mn as Ra, Zi as Sa, eo as Ta, Vn as Ua, no as Va, oa as Wa, N as Xa, Ae as Ya, oo as Za, Me as _a, sa as $a, Hn as ab, Ln as bb, so as cb, ao as db, Sr as eb, $n as fb, Pr as gb, aa as hb, xr as ib, Kr as jb, Cr as kb, Er as lb, Ir as mb, vr as nb, co as ob, I as pb, uo as qb, Vt as rb, kr as sb, Fr as tb, Am as ub, po as vb, lo as wb, fm as xb, Ht as yb, yt as zb, Wn as Ab, pa as Bb, go as Cb, la as Db, Ur as Eb, Dr as Fb, mo as Gb, Lt as Hb, Rr as Ib, yo as Jb, Vm as Kb, jn as Lb, A as Mb, Aa as Nb, fa as Ob, fo as Pb, Qn as Qb, Jn as Rb, Gr as Sb, un as Tb, Ze as Ub, ho as Vb, bo as Wb, At as Xb, To as Yb, So as Zb, qn as _b, Po as $b, xo as ac, Ko as bc, zr as cc, $t as dc, Co as ec, Eo as fc, Io as gc, vo as hc, _o as ic, Wy as jc, Nr as kc, ko as lc, Fo as mc, Uo as nc, wo as oc, Do as pc, te as qc, Ro as rc, Oo as sc, Go as tc, Bo as uc, ft as vc, dn as wc, zo as xc, pn as yc, No as zc, Mo as Ac, Vo as Bc, Ho as Cc, Lo as Dc, Wt as Ec, $o as Fc, qo as Gc, Wo as Hc, jo as Ic, Qo as Jc, Jo as Kc, Zo as Lc, Yo as Mc, Xo as Nc, es as Oc, ts as Pc, ns as Qc, rs as Rc, is as Sc, os as Tc, ss as Uc, as as Vc, cs as Wc, ln as Xc, ps as Yc, ls as Zc, gs as _c, gn as $c, mn as ad, ms as bd, yn as cd, Zn as dd, ys as ed, As as fd, hs as gd, bs as hd, An as id, fn as jd, ws as kd, Ts as ld, Xe as md, Ma as nd, Ss as od, ch as pd, Va as qd, Ps as rd, xs as sd, Vr as td, Ks as ud, Cs as vd, Es as wd, Is as xd, vs as yd, _s as zd, ks as Ad, Fs as Bd, Us as Cd, Ds as Dd, bn as Ed, Rs as Fd, Os as Gd, Gs as Hd, wn as Id, Xn as Jd, jt as Kd, Qt as Ld, er as Md, Bs as Nd, zs as Od, tr as Pd, nr as Qd, Tn as Rd, rr as Sd, Lr as Td, Ns as Ud, Ms as Vd, Sn as Wd, ja as Xd, Vs as Yd, Pn as Zd, W as _d };","map":{"version":3,"names":["jwtDecode","Ls","sha3_256","Qa","bn254","fe","bytesToNumberBE","Ja","q","n","qe","constructor","e","t","jwkAddress","c","from","keylessPublicKey","authKey","j","serializeU32AsUleb128","serializeFixedBytes","bcsToBytes","Z","fromSchemeAndBytes","scheme","input","toUint8Array","verifySignature","Dn","publicKey","serialize","deserialize","r","E","isPublicKey","verifySignatureAsync","hr","create","fromJwtAndPepper","isInstance","encode","Za","k","R","variant","Ft","Error","message","signature","O","options","throwErrorWithReason","deserializeUleb128AsU32","isEd25519","isSecp256k1PublicKey","we","z","dr","ue","console","warn","$s","Yt","publicKeys","createBitmap","bits","i","Uint8Array","o","Set","forEach","s","a","length","has","add","u","Math","floor","d","getIndex","findIndex","toString","Se","signaturesRequired","map","signatures","bitMapToSignerIndices","Pe","serializeVector","serializeU8","deserializeVector","deserializeU8","re","bitmap","MAX_SIGNATURES_SUPPORTED","BITMAP_LEN","reduce","push","serializeBytes","deserializeBytes","de","threshold","MAX_KEYS","MIN_KEYS","MIN_THRESHOLD","_e","LENGTH","set","subarray","Dt","ie","V","S","me","load","ke","X","xe","Rt","rt","isMultiEd25519","isSingleKey","isMultiKey","public_key","public_keys","vt","functionInfo","authenticator","signingMessageDigest","T","fromHexInput","accountIdentity","moduleAddress","moduleName","functionName","Y","fromString","serializeStr","deserializeStr","deserializeFixedBytes","remaining","Ws","Xt","address","name","fromStr","split","_","U","Ke","G","oe","H","De","F","it","K","m","Fe","Ue","Re","D","isBool","isAddress","isGeneric","isSigner","isVector","isStruct","isU8","isU16","isU32","isU64","isU128","isU256","isPrimitive","Rn","value","serializeU32","deserializeU32","u8","typeArgs","join","identifier","isTypeTag","equals","isString","ONE","isOption","isObject","isDelegationKey","isRateLimiter","Ju","x","Zu","se","qs","he","be","xt","P","B","St","Pt","Kt","ei","ot","st","en","tn","script","nn","entryFunction","at","multiSig","rn","module_name","function_name","type_args","args","build","serializeForEntryFunction","Array","Xr","bytecode","serializeForScriptFunction","multisig_address","transaction_payload","serializeBool","deserializeBool","on","pe","sender","sequence_number","payload","max_gas_amount","gas_unit_price","expiration_timestamp_secs","chain_id","serializeU64","deserializeU64","In","On","ct","ut","raw_txn","secondary_signer_addresses","fee_payer_address","Oe","dt","Ot","pt","lt","Qe","isMultiAgent","isFeePayer","isSingleSender","secondary_signers","fee_payer","Ge","Gt","rawTransaction","feePayerAddress","Gn","secondarySignerAddresses","Bn","Je","startsWith","update","digest","sp","ye","ar","ai","ee","signingScheme","privateKey","accountAddress","derivedAddress","generate","$","fromDerivationPath","path","mnemonic","signWithAuthenticator","sign","signTransactionWithAuthenticator","signTransaction","br","getAnyPublicKey","le","nt","fromEd25519Account","Be","legacy","fromPrivateKey","fromPrivateKeyAndAddress","randomBytes","Qs","Js","Bt","expiryDateSecs","blinder","Ct","pi","ve","Zs","Cn","BigInt","Et","It","nonce","getPublicKey","isExpired","Date","now","Number","fromBytes","L","We","BLINDER_LENGTH","gt","Xs","ea","Nn","checkKeylessAccountValidity","zt","ephemeralKeyPair","uidKey","uidVal","aud","pepper","proof","l","proofFetchCallback","y","jwt","p","verificationKeyHash","g","emitter","proofOrPromise","ae","C","removeAllListeners","init","f","PEPPER_LENGTH","hexInputToUint8Array","emit","status","error","serializeOption","partialDeserialize","deserializeOption","waitForProofFetch","Promise","b","fromErrorType","type","header","kid","details","verificationKey","Mt","aptosConfig","hexInputToString","hash","fetchJWK","jwtHeader","li","ephemeralCertificate","Nt","ephemeralPublicKey","ephemeralSignature","zn","getSigningMessage","wr","ce","domainSeparator","transaction","Ne","iss","ze","mt","audless","fromHex","sn","multiKey","signers","sort","signerIndicies","signaturesBitmap","fromPublicKeysAndSigners","isMultiKeySigner","filter","all","Mn","signerIndices","Zi","Object","values","Q","includes","Yi","Xi","eo","toBytes","hexInputToStringWithoutPrefix","toHexStringWithoutPrefix","toHexString","M","Ee","Le","$e","keylessAccountFromHex","federatedKeylessAccountFromHex","multiKeyAccountFromHex","singleKeyAccountFromHex","ed25519AccountFromHex","to","Vn","signer","authenticationFunction","ti","ir","fromPermissionedSigner","setSigner","Tr","an","abstractPublicKey","computeAccountAddress","ADDRESS_DOMAIN_SEPERATOR","no","da","ro","match","io","ta","na","ra","ia","oa","InvalidTypeTag","UnexpectedGenericType","UnexpectedTypeArgumentClose","UnexpectedWhitespaceCharacter","UnexpectedComma","TypeArgumentCountMismatch","MissingTypeArgumentClose","MissingTypeArgument","UnexpectedPrimitiveTypeArguments","UnexpectedVectorTypeArgumentCount","UnexpectedStructFormat","InvalidModuleNameCharacter","InvalidStructNameCharacter","InvalidAddress","N","Ae","allowGenerics","savedExpectedTypes","savedStr","savedTypes","cn","pop","trim","toLowerCase","substring","oo","Me","sa","Hn","parseInt","Ln","so","ao","Sr","xr","Kr","Cr","Er","Ir","vr","$n","Pr","aa","J","v","wt","co","I","uo","params","ca","TextEncoder","Vt","kr","qn","abi","Fr","exposed_functions","find","Am","typeParameters","generic_type_params","parameters","po","is_entry","lo","is_view","return","returnTypes","fm","Tt","newBytes","Ht","yt","_r","ua","U8","ArrayBuffer","JSON","parse","isArray","structs","fields","allowUnknownStructs","Wn","ga","function","Ao","key","fetch","pa","typeArguments","functionArguments","multisigAddress","go","la","Ur","getChainId","sr","network","chainId","_n","getGasUnitPrice","gasUnitPrice","gasEstimate","Fn","gas_estimate","getSequenceNumberForAny","getSequenceNumber","accountSequenceNumber","kn","ZERO","maxGasAmount","expireTimestamp","Dr","mo","signerPublicKey","secondarySignersPublicKeys","feePayerPublicKey","Lt","getSimulationSignature","fill","Rr","feePayerAuthenticator","additionalSignersAuthenticators","ui","senderAuthenticator","yo","ma","Vm","kt","ScriptComposerWasm","Or","jn","config","builder","transactionComposer","TransactionComposer","initSync","isInitialized","module","wasm","single_signer","addBatchedCalls","getRequestUrl","load_module","load_type_tag","add_batched_call","generate_batched_calls","A","Aa","fa","data","ha","ba","withFeePayer","fo","Qn","Jn","Gr","_t","body","estimate_gas_unit_price","estimateGasUnitPrice","estimate_max_gas_amount","estimateMaxGasAmount","estimate_prioritized_gas_unit_price","estimatePrioritizedGasUnitPrice","originMethod","contentType","un","getJwkKid","Ze","feePayer","ho","wa","bo","account","metadataBytes","moduleBytecode","At","To","cr","ledger_version","ledgerVersion","limit","So","response","cursor","ur","modules","Ni","Po","fi","start","offset","xo","Ko","resources","zr","resourceType","tt","$t","authenticationKey","address_map","handle","Mi","key_type","value_type","Ai","error_code","Co","owner_address","_eq","toStringLong","amount","_gt","w","query","Ei","variables","where_condition","current_token_ownerships_v2_aggregate","aggregate","count","Eo","tokenStandard","token_standard","Ki","order_by","orderBy","current_token_ownerships_v2","Io","collectionAddress","current_token_data","collection_id","Ci","vo","current_collection","xi","current_collection_ownership_v2_view","_o","Ii","account_transactions_aggregate","Wy","coinType","faMetadataAddress","Ie","En","asset_type","_in","Nr","where","Pi","current_fungible_asset_balances","ko","Si","current_fungible_asset_balances_aggregate","Fo","vn","current_objects","Uo","fromPublicKey","wo","Ta","Do","fromAccount","dangerouslySkipVerification","Br","toNewPrivateKey","toAccount","toAuthKey","Pa","je","transactionHash","success","Ti","sequenceNumber","originator","currentAuthKey","authentication_key","newPublicKey","Sa","te","Ro","type_arguments","arguments","Oo","Go","Bo","ft","isAccountAbstractionEnabled","getAuthenticationFunction","some","enableAccountAbstractionTransaction","addAuthenticationFunctionTransaction","disableAccountAbstractionTransaction","removeAuthenticationFunctionTransaction","removeDispatchableAuthenticatorTransaction","vec","module_address","dn","abstraction","getAccountInfo","getAccountModules","getAccountModulesPage","getAccountModule","getAccountTransactions","getAccountResources","getAccountResourcesPage","getAccountResource","lookupOriginalAccountAddress","getAccountTokensCount","h","minimumLedgerVersion","processorType","getAccountOwnedTokens","getAccountOwnedTokensFromCollectionAddress","getAccountCollectionsWithOwnedTokens","getAccountTransactionsCount","getAccountCoinsData","getAccountCoinsCount","getAccountAPTAmount","getAccountCoinAmount","si","yi","mi","getAccountOwnedObjects","deriveAccountFromPrivateKey","xa","constraints","zo","recipient","pn","transferCoinTransaction","Ye","BOOLEAN","U16","U32","U64","U128","U256","ADDRESS","STRING","ARRAY","ge","No","digitalAssetAddress","token_data_id","Oi","current_token_datas_v2","Mo","lr","Vo","ownerAddress","Ho","Ri","token_activities_v2","Ka","Lo","creator","description","maxSupply","Zr","uri","mutableDescription","mutableRoyalty","mutableURI","mutableTokenDescription","mutableTokenName","mutableTokenProperties","mutableTokenURI","tokensBurnableByCreator","tokensFreezableByCreator","royaltyNumerator","royaltyDenominator","Wt","vi","current_collections_v2","$o","creatorAddress","collectionName","collection_name","creator_address","qo","Wo","collectionId","jo","Ca","Qo","collection","propertyKeys","propertyTypes","propertyValues","MoveString","us","Ea","Jo","digitalAssetType","Ia","Zo","va","Yo","_a","Xo","ka","es","Fa","ts","Ua","ns","Da","rs","Ra","is","propertyKey","propertyType","propertyValue","Mr","Oa","os","Ga","ss","Ba","as","za","cs","ln","getCollectionData","getCollectionDataByCreatorAddressAndCollectionName","getCollectionDataByCreatorAddress","getCollectionDataByCollectionId","getCollectionId","getDigitalAssetData","getCurrentDigitalAssetOwnership","getOwnedDigitalAssets","getDigitalAssetActivity","createCollectionTransaction","mintDigitalAssetTransaction","transferDigitalAssetTransaction","mintSoulBoundTransaction","burnDigitalAssetTransaction","freezeDigitalAssetTransaferTransaction","unfreezeDigitalAssetTransaferTransaction","setDigitalAssetDescriptionTransaction","setDigitalAssetNameTransaction","setDigitalAssetURITransaction","addDigitalAssetPropertyTransaction","removeDigitalAssetPropertyTransaction","updateDigitalAssetPropertyTransaction","addDigitalAssetTypedPropertyTransaction","updateDigitalAssetTypedPropertyTransaction","ds","Na","ps","eventType","_or","account_address","creation_number","indexed_type","gn","ls","creationNumber","gs","Fi","events","mn","getModuleEventsByEventType","getAccountEventsByCreationNumber","getAccountEventsByEventType","getEvents","ms","timeoutSecs","hi","txn_hashes","checkSuccess","yn","fundAccount","waitForIndexer","qi","version","Zn","Di","fungible_asset_metadata","ys","Ui","fungible_asset_activities","As","_i","fs","hs","fungibleAssetMetadataAddress","bs","fromStore","toStore","An","getFungibleAssetMetadata","getFungibleAssetMetadataByAssetType","assetType","getFungibleAssetMetadataByCreatorAddress","getFungibleAssetActivities","getCurrentFungibleAssetBalances","transferFungibleAsset","transferFungibleAssetBetweenStores","fn","getLedgerInfo","getBlockByVersion","Wi","getBlockByHeight","ji","view","viewJson","getChainTopUserTransactions","Gi","queryIndexer","getIndexerLastSuccessVersion","Bi","getProcessorStatus","zi","ws","Ts","test","Xe","replace","domainName","subdomainName","Ma","Independent","FollowsDomain","Ss","domain_expiration_timestamp","getTime","expiration_timestamp","subdomain","subdomain_expiration_policy","ch","Va","Ha","testnet","mainnet","local","custom","devnet","Ve","Yn","Ps","xs","expiration","targetAddress","toAddress","transferable","policy","years","Vr","expirationDate","round","Ks","Boolean","Cs","Es","Is","vs","Ut","domain","current_aptos_names","hn","_s","Hr","_gte","ks","Fs","_neq","Us","setDate","getDate","toISOString","Ds","bn","getOwnerAddress","getExpiration","getTargetAddress","setTargetAddress","getPrimaryName","setPrimaryName","registerName","renewDomain","getName","getAccountNames","getAccountDomains","getAccountSubdomains","getDomainSubdomains","Rs","poolAddress","pr","pool_address","num_active_delegator_per_pool","num_active_delegator","Os","Gs","delegatorAddress","ki","delegated_staking_activities","wn","getNumberOfDelegators","getNumberOfDelegatorsForAllPools","getDelegatedStakingActivities","Xn","simple","scriptComposer","multiAgent","jt","bt","mr","prototype","Qt","gr","$a","er","lastUncommintedNumber","currentNumber","lock","maxWaitTime","maximumInFlight","sleepTime","nextSequenceNumber","Zt","initialize","synchronize","La","Bs","zs","TransactionSent","TransactionSendFailed","TransactionExecuted","TransactionExecutionFailed","ExecutionFinish","tr","taskQueue","Un","transactionsQueue","outstandingTransactions","sentTransactions","executedTransactions","started","accountSequnceNumber","submitNextTransaction","generateNextTransaction","enqueue","yr","processTransactions","dequeue","isEmpty","allSettled","checkTransaction","reason","run","isCancelled","stop","cancel","nr","transactionWorker","registerToEvents","forSingleAccount","Tn","simulate","submit","batch","getTransactions","Vi","getTransactionByVersion","Hi","getTransactionByHash","Li","isPendingTransaction","$i","waitForTransaction","getGasPriceEstimation","publishPackageTransaction","rotateAuthKey","signAsFeePayer","batchTransactionsForSingleAccount","signAndSubmitTransaction","signAndSubmitAsFeePayer","Wa","rr","derivationPath","jwt_b64","epk","bcsToHex","toStringWithoutPrefix","exp_date_secs","epk_blinder","uid_key","derivation_path","bi","overrides","WITH_CREDENTIALS","Lr","maxExpHorizonSecs","iat","exp_horizon_secs","wi","et","Jt","trainingWheelsSignature","training_wheels_signature","expHorizonSecs","Ns","Ms","jwksUrl","ci","endsWith","ok","statusText","json","keys","alg","Sn","getPepper","getProof","deriveKeylessAccount","updateFederatedKeylessJwkSetTransaction","ja","Vs","objectAddress","object_address","Pn","getObjectDataByObjectAddress","W","Qi","ans","coin","digitalAsset","event","faucet","fungibleAsset","general","staking","table","Ar","keyless","object","ne","getOwnPropertyNames","getOwnPropertyDescriptor","defineProperty","Ya","$r","Xa","ec","tc","nc","rc","ic","Ce","ID_COMMITMENT_LENGTH","idCommitment","Hs","jwk","keylessConfig","trainingWheelsPubkey","oc","verifyProof","publicInputsHash","groth16Proof","Wr","maxCommitedEpkBytes","Te","maxIssValBytes","extraField","maxExtraFieldBytes","maxJwtHeaderB64Bytes","toScalar","overrideAudVal","cc","jwkAddr","get","or","dc","isSignature","xn","toArray","toProjectivePoint","pz","reverse","Fp","qr","sqrt","pow","neg","G1","ProjectivePoint","fromAffine","He","Kn","c0","c1","slice","Fp2","fromBigTuple","G2","ht","ni","toSnarkJsJson","protocol","curve","pi_a","pi_b","pi_c","jr","Qr","alphaG1","alpha_g1","betaG2","beta_g2","deltaG2","delta_g2","gammaAbcG1","gamma_abc_g1","gammaG2","gamma_g2","max_exp_horizon_secs","training_wheels_pubkey","max_extra_field_bytes","max_jwt_header_b64_bytes","max_iss_val_bytes","max_commited_epk_bytes","fromGroth16VerificationKeyResponse","Fp12","multiply","pairing","mul","eql","nPublic","vk_alpha_1","vk_beta_2","vk_gamma_2","vk_delta_2","IC","sc","ac","di","Map","jwks","entries","Jr","Yr","issuer","kty","fromMoveStruct","gi","uc","min","qa","ya","ab","bb","cb","db","eb","fb","gb","hb","ib","jb","kb","lb","mb","nb","ob","pb","qb","rb","sb","tb","ub","vb","wb","xb","yb","zb","Ab","Bb","Cb","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","Nb","Ob","Pb","Qb","Rb","Sb","Tb","Ub","Vb","Wb","Xb","Yb","Zb","_b","$b","bc","fc","gc","hc","jc","kc","lc","mc","pc","qc","vc","wc","xc","yc","zc","Ac","Bc","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Pc","Qc","Rc","Sc","Tc","Uc","Vc","Wc","Xc","Yc","Zc","_c","$c","ad","bd","cd","dd","ed","fd","gd","hd","id","jd","kd","ld","md","nd","od","pd","qd","rd","sd","td","ud","vd","wd","xd","yd","zd","Ad","Bd","Cd","Dd","Ed","Fd","Gd","Hd","Id","Jd","Kd","Ld","Md","Nd","Od","Pd","Qd","Rd","Sd","Td","Ud","Vd","Wd","Xd","Yd","Zd","_d"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\keyless.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\federatedKeyless.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\singleKey.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\multiKey.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\multiEd25519.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\authenticator\\account.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\transactionBuilder\\signingMessage.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\moduleId.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\typeTag\\index.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\transactionPayload.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\rawTransaction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\authenticator\\transaction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\signedTransaction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\simpleTransaction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\multiAgentTransaction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\Ed25519Account.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\SingleKeyAccount.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\Account.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\EphemeralKeyPair.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\AbstractKeylessAccount.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\KeylessAccount.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\FederatedKeylessAccount.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\MultiKeyAccount.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\MultiEd25519Account.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\utils.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\AccountUtils.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\AbstractedAccount.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\account\\DerivableAbstractedAccount.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\transactionBuilder\\transactionBuilder.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\typeTag\\parser.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\transactionBuilder\\helpers.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\transactionBuilder\\remoteAbi.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\scriptComposer\\index.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\transactionSubmission.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\account.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\view.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\abstraction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\account\\abstraction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\account.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\coin.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\coin.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\digitalAsset.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\digitalAsset.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\event.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\event.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\faucet.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\faucet.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\fungibleAsset.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\fungibleAsset.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\general.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\ans.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\ans.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\staking.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\staking.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\transactionSubmission\\build.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\transactionSubmission\\simulate.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\transactionSubmission\\submit.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\transactionSubmission\\management.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\management\\accountSequenceNumber.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\management\\transactionWorker.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\transaction.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\keyless.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\keyless.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\object.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\object.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\aptos.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n// eslint-disable-next-line max-classes-per-file\nimport { JwtPayload, jwtDecode } from \"jwt-decode\";\nimport { sha3_256 } from \"@noble/hashes/sha3\";\nimport { AccountPublicKey, PublicKey } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { Deserializer, Serializable, Serializer } from \"../../bcs\";\nimport { Hex, hexToAsciiString } from \"../hex\";\nimport {\n  HexInput,\n  EphemeralCertificateVariant,\n  AnyPublicKeyVariant,\n  SigningScheme,\n  ZkpVariant,\n  LedgerVersionArg,\n  MoveResource,\n} from \"../../types\";\nimport { EphemeralPublicKey, EphemeralSignature } from \"./ephemeral\";\nimport { bigIntToBytesLE, bytesToBigIntLE, hashStrToField, padAndPackBytesWithLen, poseidonHash } from \"./poseidon\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Proof } from \"./proof\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport {\n  Groth16VerificationKeyResponse,\n  KeylessConfigurationResponse,\n  MoveAnyStruct,\n  PatchedJWKsResponse,\n} from \"../../types/keyless\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { getAptosFullNode } from \"../../client\";\nimport { memoizeAsync } from \"../../utils/memoize\";\nimport { AccountAddress, AccountAddressInput } from \"../accountAddress\";\nimport { base64UrlToBytes, getErrorMessage, nowInSeconds } from \"../../utils\";\nimport { KeylessError, KeylessErrorType } from \"../../errors\";\nimport { bn254 } from \"@noble/curves/bn254\";\nimport { bytesToNumberBE } from \"@noble/curves/abstract/utils\";\nimport { FederatedKeylessPublicKey } from \"./federatedKeyless\";\nimport { encode } from \"js-base64\";\nimport { generateSigningMessage } from \"../..\";\nimport { ProjPointType } from \"@noble/curves/abstract/weierstrass\";\nimport { Fp2 } from \"@noble/curves/abstract/tower\";\n\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const EPK_HORIZON_SECS = 10000000;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_AUD_VAL_BYTES = 120;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_UID_KEY_BYTES = 30;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_UID_VAL_BYTES = 330;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_ISS_VAL_BYTES = 120;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_EXTRA_FIELD_BYTES = 350;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_JWT_HEADER_B64_BYTES = 300;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_COMMITED_EPK_BYTES = 93;\n\n/**\n * Represents a Keyless Public Key used for authentication.\n *\n * This class encapsulates the public key functionality for keyless authentication,\n * including methods for generating and verifying signatures, as well as serialization\n * and deserialization of the key. The KeylessPublicKey is represented in the SDK\n * as `AnyPublicKey`.\n * @group Implementation\n * @category Serialization\n */\nexport class KeylessPublicKey extends AccountPublicKey {\n  /**\n   * The number of bytes that `idCommitment` should be\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly ID_COMMITMENT_LENGTH: number = 32;\n\n  /**\n   * The value of the 'iss' claim on the JWT which identifies the OIDC provider.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly iss: string;\n\n  /**\n   * A value representing a cryptographic commitment to a user identity.\n   *\n   * It is calculated from the aud, uidKey, uidVal, pepper.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly idCommitment: Uint8Array;\n\n  /**\n   * Constructs an instance with the specified parameters for cryptographic operations.\n   *\n   * @param args - The parameters required to initialize the instance.\n   * @param args.alphaG1 - The hex representation of the alpha G1 value.\n   * @param args.betaG2 - The hex representation of the beta G2 value.\n   * @param args.deltaG2 - The hex representation of the delta G2 value.\n   * @param args.gammaAbcG1 - An array containing two hex representations for gamma ABC G1 values.\n   * @param args.gammaG2 - The hex representation of the gamma G2 value.\n   * @group Implementation\n   * @category Serialization\n   */\n  // TODO: Fix the JSDoc for the below values\n  constructor(iss: string, idCommitment: HexInput) {\n    super();\n    const idcBytes = Hex.fromHexInput(idCommitment).toUint8Array();\n    if (idcBytes.length !== KeylessPublicKey.ID_COMMITMENT_LENGTH) {\n      throw new Error(`Id Commitment length in bytes should be ${KeylessPublicKey.ID_COMMITMENT_LENGTH}`);\n    }\n    this.iss = iss;\n    this.idCommitment = idcBytes;\n  }\n\n  /**\n   * Get the authentication key for the keyless public key.\n   *\n   * @returns AuthenticationKey - The authentication key derived from the keyless public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    const serializer = new Serializer();\n    serializer.serializeU32AsUleb128(AnyPublicKeyVariant.Keyless);\n    serializer.serializeFixedBytes(this.bcsToBytes());\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: SigningScheme.SingleKey,\n      input: serializer.toUint8Array(),\n    });\n  }\n\n  /**\n   * Verifies the validity of a signature for a given message.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify against the message.\n   * @param args.jwk - The JWK to use for verification.\n   * @param args.keylessConfig - The keyless configuration to use for verification.\n   * @returns true if the signature is valid; otherwise, false.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: {\n    message: HexInput;\n    signature: Signature;\n    jwk: MoveJWK;\n    keylessConfig: KeylessConfiguration;\n  }): boolean {\n    try {\n      verifyKeylessSignatureWithJwkAndConfig({ ...args, publicKey: this });\n      return true;\n    } catch (error) {\n      if (error instanceof KeylessError) {\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Verifies a keyless signature for a given message.  It will fetch the keyless configuration and the JWK to\n   * use for verification from the appropriate network as defined by the aptosConfig.\n   *\n   * @param args.aptosConfig The aptos config to use for fetching the keyless configuration.\n   * @param args.message The message to verify the signature against.\n   * @param args.signature The signature to verify.\n   * @param args.options.throwErrorWithReason Whether to throw an error with the reason for the failure instead of returning false.\n   * @returns true if the signature is valid\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return verifyKeylessSignature({\n      ...args,\n      publicKey: this,\n    });\n  }\n\n  /**\n   * Serializes the current instance into a format suitable for transmission or storage.\n   * This function ensures that all relevant fields are properly serialized, including the proof and optional fields.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @param serializer.proof - The proof to be serialized.\n   * @param serializer.expHorizonSecs - The expiration horizon in seconds.\n   * @param serializer.extraField - An optional additional field for serialization.\n   * @param serializer.overrideAudVal - An optional override value for auditing.\n   * @param serializer.trainingWheelsSignature - An optional signature for training wheels.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.iss);\n    serializer.serializeBytes(this.idCommitment);\n  }\n\n  /**\n   * Deserializes a ZeroKnowledgeSig object from the provided deserializer.\n   * This function allows you to reconstruct a ZeroKnowledgeSig instance from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @returns A new instance of ZeroKnowledgeSig.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): KeylessPublicKey {\n    const iss = deserializer.deserializeStr();\n    const addressSeed = deserializer.deserializeBytes();\n    return new KeylessPublicKey(iss, addressSeed);\n  }\n\n  /**\n   * Loads a KeylessPublicKey instance from the provided deserializer.\n   * This function is used to deserialize the necessary components to create a KeylessPublicKey.\n   *\n   * @param deserializer - The deserializer used to extract the string and byte data.\n   * @param deserializer.deserializeStr - A method to deserialize a string value.\n   * @param deserializer.deserializeBytes - A method to deserialize byte data.\n   * @returns A new instance of KeylessPublicKey.\n   * @group Implementation\n   * @category Serialization\n   */\n  static load(deserializer: Deserializer): KeylessPublicKey {\n    const iss = deserializer.deserializeStr();\n    const addressSeed = deserializer.deserializeBytes();\n    return new KeylessPublicKey(iss, addressSeed);\n  }\n\n  /**\n   * Determines if the provided public key is an instance of KeylessPublicKey.\n   *\n   * @param publicKey - The public key to check.\n   * @returns A boolean indicating whether the public key is a KeylessPublicKey instance.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: PublicKey): publicKey is KeylessPublicKey {\n    return publicKey instanceof KeylessPublicKey;\n  }\n\n  /**\n   * Creates a KeylessPublicKey from the JWT components plus pepper\n   *\n   * @param args.iss the iss of the identity\n   * @param args.uidKey the key to use to get the uidVal in the JWT token\n   * @param args.uidVal the value of the uidKey in the JWT token\n   * @param args.aud the client ID of the application\n   * @param args.pepper The pepper used to maintain privacy of the account\n   * @returns KeylessPublicKey\n   * @group Implementation\n   * @category Serialization\n   */\n  static create(args: {\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n  }): KeylessPublicKey {\n    computeIdCommitment(args);\n    return new KeylessPublicKey(args.iss, computeIdCommitment(args));\n  }\n\n  /**\n   * Creates a KeylessPublicKey instance from a JWT and a pepper value.\n   * This function is useful for generating a public key that can be used for authentication based on the provided JWT claims and pepper.\n   *\n   * @param args - The arguments for creating the KeylessPublicKey.\n   * @param args.jwt - The JSON Web Token to decode.\n   * @param args.pepper - The pepper value used in the key creation process.\n   * @param args.uidKey - An optional key to retrieve the unique identifier from the JWT payload, defaults to \"sub\".\n   * @returns A KeylessPublicKey instance created from the provided JWT and pepper.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromJwtAndPepper(args: { jwt: string; pepper: HexInput; uidKey?: string }): KeylessPublicKey {\n    const { jwt, pepper, uidKey = \"sub\" } = args;\n    const jwtPayload = jwtDecode<JwtPayload & { [key: string]: string }>(jwt);\n    if (typeof jwtPayload.iss !== \"string\") {\n      throw new Error(\"iss was not found\");\n    }\n    if (typeof jwtPayload.aud !== \"string\") {\n      throw new Error(\"aud was not found or an array of values\");\n    }\n    const uidVal = jwtPayload[uidKey];\n    return KeylessPublicKey.create({ iss: jwtPayload.iss, uidKey, uidVal, aud: jwtPayload.aud, pepper });\n  }\n\n  /**\n   * Checks if the provided public key is a valid instance by verifying its structure and types.\n   *\n   * @param publicKey - The public key to validate.\n   * @returns A boolean indicating whether the public key is a valid instance.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isInstance(publicKey: PublicKey) {\n    return (\n      \"iss\" in publicKey &&\n      typeof publicKey.iss === \"string\" &&\n      \"idCommitment\" in publicKey &&\n      publicKey.idCommitment instanceof Uint8Array\n    );\n  }\n}\n\nexport async function verifyKeylessSignature(args: {\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  aptosConfig: AptosConfig;\n  message: HexInput;\n  signature: Signature;\n  keylessConfig?: KeylessConfiguration;\n  jwk?: MoveJWK;\n  options?: { throwErrorWithReason?: boolean };\n}): Promise<boolean> {\n  const {\n    aptosConfig,\n    publicKey,\n    message,\n    signature,\n    jwk,\n    keylessConfig = await getKeylessConfig({ aptosConfig }),\n    options,\n  } = args;\n  try {\n    if (!(signature instanceof KeylessSignature)) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n        details: \"Not a keyless signature\",\n      });\n    }\n    verifyKeylessSignatureWithJwkAndConfig({\n      message,\n      publicKey,\n      signature,\n      jwk: jwk ? jwk : await fetchJWK({ aptosConfig, publicKey, kid: signature.getJwkKid() }),\n      keylessConfig,\n    });\n    return true;\n  } catch (error) {\n    if (options?.throwErrorWithReason) {\n      throw error;\n    }\n    return false;\n  }\n}\n\n/**\n * Syncronously verifies a keyless signature for a given message.  You need to provide the keyless configuration and the\n * JWK to use for verification.\n *\n * @param args.message The message to verify the signature against.\n * @param args.signature The signature to verify.\n * @param args.keylessConfig The keyless configuration.\n * @param args.jwk The JWK to use for verification.\n * @returns true if the signature is valid\n * @throws KeylessError if the signature is invalid\n */\nexport function verifyKeylessSignatureWithJwkAndConfig(args: {\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  message: HexInput;\n  signature: Signature;\n  keylessConfig: KeylessConfiguration;\n  jwk: MoveJWK;\n}): void {\n  const { publicKey, message, signature, keylessConfig, jwk } = args;\n  const { verificationKey, maxExpHorizonSecs, trainingWheelsPubkey } = keylessConfig;\n  if (!(signature instanceof KeylessSignature)) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n      details: \"Not a keyless signature\",\n    });\n  }\n  if (!(signature.ephemeralCertificate.signature instanceof ZeroKnowledgeSig)) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n      details: \"Unsupported ephemeral certificate variant\",\n    });\n  }\n  const zkSig = signature.ephemeralCertificate.signature;\n  if (!(zkSig.proof.proof instanceof Groth16Zkp)) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n      details: \"Unsupported proof variant for ZeroKnowledgeSig\",\n    });\n  }\n  const groth16Proof = zkSig.proof.proof;\n  if (signature.expiryDateSecs < nowInSeconds()) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_EXPIRED,\n      details: \"The expiryDateSecs is in the past\",\n    });\n  }\n  if (zkSig.expHorizonSecs > maxExpHorizonSecs) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.MAX_EXPIRY_HORIZON_EXCEEDED,\n    });\n  }\n  if (!signature.ephemeralPublicKey.verifySignature({ message, signature: signature.ephemeralSignature })) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.EPHEMERAL_SIGNATURE_VERIFICATION_FAILED,\n    });\n  }\n  const publicInputsHash = getPublicInputsHash({ publicKey, signature, jwk, keylessConfig });\n  if (!verificationKey.verifyProof({ publicInputsHash, groth16Proof })) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.PROOF_VERIFICATION_FAILED,\n    });\n  }\n  if (trainingWheelsPubkey) {\n    if (!zkSig.trainingWheelsSignature) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.TRAINING_WHEELS_SIGNATURE_MISSING,\n      });\n    }\n    const proofAndStatement = new Groth16ProofAndStatement(groth16Proof, publicInputsHash);\n    if (\n      !trainingWheelsPubkey.verifySignature({\n        message: proofAndStatement.hash(),\n        signature: zkSig.trainingWheelsSignature,\n      })\n    ) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.TRAINING_WHEELS_SIGNATURE_VERIFICATION_FAILED,\n      });\n    }\n  }\n}\n\n/**\n * Get the public inputs hash for the keyless signature.\n *\n * @param args.signature The signature\n * @param args.jwk The JWK to use for the public inputs hash\n * @param args.keylessConfig The keyless configuration which defines the byte lengths to use when hashing fields.\n * @returns The public inputs hash\n */\nfunction getPublicInputsHash(args: {\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  signature: KeylessSignature;\n  jwk: MoveJWK;\n  keylessConfig: KeylessConfiguration;\n}): bigint {\n  const { publicKey, signature, jwk, keylessConfig } = args;\n  const innerKeylessPublicKey = publicKey instanceof KeylessPublicKey ? publicKey : publicKey.keylessPublicKey;\n  if (!(signature.ephemeralCertificate.signature instanceof ZeroKnowledgeSig)) {\n    throw new Error(\"Signature is not a ZeroKnowledgeSig\");\n  }\n  const proof = signature.ephemeralCertificate.signature;\n  const fields = [];\n  fields.push(\n    ...padAndPackBytesWithLen(signature.ephemeralPublicKey.toUint8Array(), keylessConfig.maxCommitedEpkBytes),\n  );\n  fields.push(bytesToBigIntLE(innerKeylessPublicKey.idCommitment));\n  fields.push(signature.expiryDateSecs);\n  fields.push(proof.expHorizonSecs);\n  fields.push(hashStrToField(innerKeylessPublicKey.iss, keylessConfig.maxIssValBytes));\n  if (!proof.extraField) {\n    fields.push(0n);\n    fields.push(hashStrToField(\" \", keylessConfig.maxExtraFieldBytes));\n  } else {\n    fields.push(1n);\n    fields.push(hashStrToField(proof.extraField, keylessConfig.maxExtraFieldBytes));\n  }\n  fields.push(hashStrToField(encode(signature.jwtHeader, true) + \".\", keylessConfig.maxJwtHeaderB64Bytes));\n  fields.push(jwk.toScalar());\n  if (!proof.overrideAudVal) {\n    fields.push(hashStrToField(\"\", MAX_AUD_VAL_BYTES));\n    fields.push(0n);\n  } else {\n    fields.push(hashStrToField(proof.overrideAudVal, MAX_AUD_VAL_BYTES));\n    fields.push(1n);\n  }\n  return poseidonHash(fields);\n}\n\n/**\n * Fetches the JWK from the issuer's well-known JWKS endpoint.\n *\n * @param args.publicKey The keyless public key which contains the issuer the address to fetch the JWK from (0x1 if not federated).\n * @param args.kid The kid of the JWK to fetch\n * @returns A JWK matching the `kid` in the JWT header.\n * @throws {KeylessError} If the JWK cannot be fetched\n */\nexport async function fetchJWK(args: {\n  aptosConfig: AptosConfig;\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  kid: string;\n}): Promise<MoveJWK> {\n  const { aptosConfig, publicKey, kid } = args;\n  const keylessPubKey = publicKey instanceof KeylessPublicKey ? publicKey : publicKey.keylessPublicKey;\n  const { iss } = keylessPubKey;\n\n  let allJWKs: Map<string, MoveJWK[]>;\n  const jwkAddr = publicKey instanceof FederatedKeylessPublicKey ? publicKey.jwkAddress : undefined;\n  try {\n    allJWKs = await getKeylessJWKs({ aptosConfig, jwkAddr });\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_JWKS_LOOKUP_ERROR,\n      error,\n      details: `Failed to fetch ${jwkAddr ? \"Federated\" : \"Patched\"}JWKs ${jwkAddr ? `for address ${jwkAddr}` : \"0x1\"}`,\n    });\n  }\n\n  // Find the corresponding JWK set by `iss`\n  const jwksForIssuer = allJWKs.get(iss);\n\n  if (jwksForIssuer === undefined) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.INVALID_JWT_ISS_NOT_RECOGNIZED,\n      details: `JWKs for issuer ${iss} not found.`,\n    });\n  }\n\n  // Find the corresponding JWK by `kid`\n  const jwk = jwksForIssuer.find((key) => key.kid === kid);\n\n  if (jwk === undefined) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.INVALID_JWT_JWK_NOT_FOUND,\n      details: `JWK with kid '${kid}' for issuer '${iss}' not found.`,\n    });\n  }\n\n  return jwk;\n}\n\nfunction computeIdCommitment(args: { uidKey: string; uidVal: string; aud: string; pepper: HexInput }): Uint8Array {\n  const { uidKey, uidVal, aud, pepper } = args;\n\n  const fields = [\n    bytesToBigIntLE(Hex.fromHexInput(pepper).toUint8Array()),\n    hashStrToField(aud, MAX_AUD_VAL_BYTES),\n    hashStrToField(uidVal, MAX_UID_VAL_BYTES),\n    hashStrToField(uidKey, MAX_UID_KEY_BYTES),\n  ];\n\n  return bigIntToBytesLE(poseidonHash(fields), KeylessPublicKey.ID_COMMITMENT_LENGTH);\n}\n\n/**\n * Represents a signature of a message signed via a Keyless Account, utilizing proofs or a JWT token for authentication.\n * @group Implementation\n * @category Serialization\n */\nexport class KeylessSignature extends Signature {\n  /**\n   * The inner signature ZeroKnowledgeSignature or OpenIdSignature\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly ephemeralCertificate: EphemeralCertificate;\n\n  /**\n   * The jwt header in the token used to create the proof/signature.  In json string representation.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly jwtHeader: string;\n\n  /**\n   * The expiry timestamp in seconds of the EphemeralKeyPair used to sign\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly expiryDateSecs: number;\n\n  /**\n   * The ephemeral public key used to verify the signature\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly ephemeralPublicKey: EphemeralPublicKey;\n\n  /**\n   * The signature resulting from signing with the private key of the EphemeralKeyPair\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly ephemeralSignature: EphemeralSignature;\n\n  constructor(args: {\n    jwtHeader: string;\n    ephemeralCertificate: EphemeralCertificate;\n    expiryDateSecs: number;\n    ephemeralPublicKey: EphemeralPublicKey;\n    ephemeralSignature: EphemeralSignature;\n  }) {\n    super();\n    const { jwtHeader, ephemeralCertificate, expiryDateSecs, ephemeralPublicKey, ephemeralSignature } = args;\n    this.jwtHeader = jwtHeader;\n    this.ephemeralCertificate = ephemeralCertificate;\n    this.expiryDateSecs = expiryDateSecs;\n    this.ephemeralPublicKey = ephemeralPublicKey;\n    this.ephemeralSignature = ephemeralSignature;\n  }\n\n  /**\n   * Get the kid of the JWT used to derive the Keyless Account used to sign.\n   *\n   * @returns the kid as a string\n   */\n  getJwkKid(): string {\n    return parseJwtHeader(this.jwtHeader).kid;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.ephemeralCertificate.serialize(serializer);\n    serializer.serializeStr(this.jwtHeader);\n    serializer.serializeU64(this.expiryDateSecs);\n    this.ephemeralPublicKey.serialize(serializer);\n    this.ephemeralSignature.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): KeylessSignature {\n    const ephemeralCertificate = EphemeralCertificate.deserialize(deserializer);\n    const jwtHeader = deserializer.deserializeStr();\n    const expiryDateSecs = deserializer.deserializeU64();\n    const ephemeralPublicKey = EphemeralPublicKey.deserialize(deserializer);\n    const ephemeralSignature = EphemeralSignature.deserialize(deserializer);\n    return new KeylessSignature({\n      jwtHeader,\n      expiryDateSecs: Number(expiryDateSecs),\n      ephemeralCertificate,\n      ephemeralPublicKey,\n      ephemeralSignature,\n    });\n  }\n\n  static getSimulationSignature(): KeylessSignature {\n    return new KeylessSignature({\n      jwtHeader: \"{}\",\n      ephemeralCertificate: new EphemeralCertificate(\n        new ZeroKnowledgeSig({\n          proof: new ZkProof(\n            new Groth16Zkp({ a: new Uint8Array(32), b: new Uint8Array(64), c: new Uint8Array(32) }),\n            ZkpVariant.Groth16,\n          ),\n          expHorizonSecs: 0,\n        }),\n        EphemeralCertificateVariant.ZkProof,\n      ),\n      expiryDateSecs: 0,\n      ephemeralPublicKey: new EphemeralPublicKey(new Ed25519PublicKey(new Uint8Array(32))),\n      ephemeralSignature: new EphemeralSignature(new Ed25519Signature(new Uint8Array(64))),\n    });\n  }\n\n  static isSignature(signature: Signature): signature is KeylessSignature {\n    return signature instanceof KeylessSignature;\n  }\n}\n\n/**\n * Represents an ephemeral certificate containing a signature, specifically a ZeroKnowledgeSig.\n * This class can be extended to support additional signature types, such as OpenIdSignature.\n *\n * @extends Signature\n * @group Implementation\n * @category Serialization\n */\nexport class EphemeralCertificate extends Signature {\n  public readonly signature: Signature;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly variant: EphemeralCertificateVariant;\n\n  constructor(signature: Signature, variant: EphemeralCertificateVariant) {\n    super();\n    this.signature = signature;\n    this.variant = variant;\n  }\n\n  /**\n   * Get the public key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the public key\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.signature.toUint8Array();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.signature.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): EphemeralCertificate {\n    const variant = deserializer.deserializeUleb128AsU32();\n    switch (variant) {\n      case EphemeralCertificateVariant.ZkProof:\n        return new EphemeralCertificate(ZeroKnowledgeSig.deserialize(deserializer), variant);\n      default:\n        throw new Error(`Unknown variant index for EphemeralCertificate: ${variant}`);\n    }\n  }\n}\n\n/**\n * Represents a fixed-size byte array of 32 bytes, extending the Serializable class.\n * This class is used for handling and serializing G1 bytes in cryptographic operations.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nclass G1Bytes extends Serializable {\n  private static readonly B = bn254.fields.Fp.create(3n);\n\n  data: Uint8Array;\n\n  constructor(data: HexInput) {\n    super();\n    this.data = Hex.fromHexInput(data).toUint8Array();\n    if (this.data.length !== 32) {\n      throw new Error(\"Input needs to be 32 bytes\");\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data);\n  }\n\n  static deserialize(deserializer: Deserializer): G1Bytes {\n    const bytes = deserializer.deserializeFixedBytes(32);\n    return new G1Bytes(bytes);\n  }\n\n  // Convert the projective coordinates to strings\n  toArray(): string[] {\n    const point = this.toProjectivePoint();\n    return [point.x.toString(), point.y.toString(), point.pz.toString()];\n  }\n\n  /**\n   * Converts the G1 bytes to a projective point.\n   * @returns The projective point.\n   */\n  toProjectivePoint(): ProjPointType<bigint> {\n    const bytes = new Uint8Array(this.data);\n    // Reverse the bytes to convert from little-endian to big-endian.\n    bytes.reverse();\n    // This gets the flag bit to determine which y to use.\n    const yFlag = (bytes[0] & 0x80) >> 7;\n    const { Fp } = bn254.fields;\n    const x = Fp.create(bytesToBn254FpBE(bytes));\n    const y = Fp.sqrt(Fp.add(Fp.pow(x, 3n), G1Bytes.B));\n    const negY = Fp.neg(y);\n    const yToUse = y > negY === (yFlag === 1) ? y : negY;\n    return bn254.G1.ProjectivePoint.fromAffine({\n      x: x,\n      y: yToUse,\n    });\n  }\n}\n\nfunction bytesToBn254FpBE(bytes: Uint8Array): bigint {\n  if (bytes.length !== 32) {\n    throw new Error(\"Input should be 32 bytes\");\n  }\n  // Clear the first two bits of the first byte which removes any flags.\n  const result = new Uint8Array(bytes);\n  result[0] = result[0] & 0x3f; // 0x3F = 00111111 in binary\n  return bytesToNumberBE(result);\n}\n\n/**\n * Represents a 64-byte G2 element in a cryptographic context.\n * This class provides methods for serialization and deserialization of G2 bytes.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nclass G2Bytes extends Serializable {\n  /**\n   * The constant b value used in G2 point calculations\n   */\n  private static readonly B = bn254.fields.Fp2.fromBigTuple([\n    19485874751759354771024239261021720505790618469301721065564631296452457478373n,\n    266929791119991161246907387137283842545076965332900288569378510910307636690n,\n  ]);\n\n  data: Uint8Array;\n\n  constructor(data: HexInput) {\n    super();\n    this.data = Hex.fromHexInput(data).toUint8Array();\n    if (this.data.length !== 64) {\n      throw new Error(\"Input needs to be 64 bytes\");\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data);\n  }\n\n  static deserialize(deserializer: Deserializer): G2Bytes {\n    const bytes = deserializer.deserializeFixedBytes(64);\n    return new G2Bytes(bytes);\n  }\n\n  // Convert the projective coordinates to strings\n  toArray(): [string, string][] {\n    const point = this.toProjectivePoint();\n    return [\n      [\n        point.x.c0.toString(), // x real part\n        point.x.c1.toString(),\n      ], // x imaginary part\n      [\n        point.y.c0.toString(), // y real part\n        point.y.c1.toString(),\n      ], // y imaginary part\n      [\n        point.pz.c0.toString(), // z real part\n        point.pz.c1.toString(),\n      ], // z imaginary part\n    ];\n  }\n\n  toProjectivePoint(): ProjPointType<Fp2> {\n    const bytes = new Uint8Array(this.data);\n    // Reverse the bytes to convert from little-endian to big-endian for each part of x.\n    const x0 = bytes.slice(0, 32).reverse();\n    const x1 = bytes.slice(32, 64).reverse();\n    // This gets the flag bit to determine which y to use.\n    const yFlag = (x1[0] & 0x80) >> 7;\n    const { Fp2 } = bn254.fields;\n    const x = Fp2.fromBigTuple([bytesToBn254FpBE(x0), bytesToBn254FpBE(x1)]);\n    const y = Fp2.sqrt(Fp2.add(Fp2.pow(x, 3n), G2Bytes.B));\n    const negY = Fp2.neg(y);\n    const isYGreaterThanNegY = y.c1 > negY.c1 || (y.c1 === negY.c1 && y.c0 > negY.c0);\n    const yToUse = isYGreaterThanNegY === (yFlag === 1) ? y : negY;\n    return bn254.G2.ProjectivePoint.fromAffine({\n      x: x,\n      y: yToUse,\n    });\n  }\n}\n\n/**\n * Represents a Groth16 zero-knowledge proof, consisting of three proof points in compressed serialization format.\n * The points are the compressed serialization of affine representation of the proof.\n *\n * @extends Proof\n * @group Implementation\n * @category Serialization\n */\nexport class Groth16Zkp extends Proof {\n  /**\n   * The bytes of G1 proof point a\n   * @group Implementation\n   * @category Serialization\n   */\n  a: G1Bytes;\n\n  /**\n   * The bytes of G2 proof point b\n   * @group Implementation\n   * @category Serialization\n   */\n  b: G2Bytes;\n\n  /**\n   * The bytes of G1 proof point c\n   * @group Implementation\n   * @category Serialization\n   */\n  c: G1Bytes;\n\n  constructor(args: { a: HexInput; b: HexInput; c: HexInput }) {\n    super();\n    const { a, b, c } = args;\n    this.a = new G1Bytes(a);\n    this.b = new G2Bytes(b);\n    this.c = new G1Bytes(c);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.a.serialize(serializer);\n    this.b.serialize(serializer);\n    this.c.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): Groth16Zkp {\n    const a = G1Bytes.deserialize(deserializer).bcsToBytes();\n    const b = G2Bytes.deserialize(deserializer).bcsToBytes();\n    const c = G1Bytes.deserialize(deserializer).bcsToBytes();\n    return new Groth16Zkp({ a, b, c });\n  }\n\n  toSnarkJsJson() {\n    return {\n      protocol: \"groth16\",\n      curve: \"bn128\",\n      pi_a: this.a.toArray(),\n      pi_b: this.b.toArray(),\n      pi_c: this.c.toArray(),\n    };\n  }\n}\n\n/**\n * Represents a Groth16 proof and statement, consisting of a Groth16 proof and a public inputs hash.\n * This is used to generate the signing message for the training wheels signature.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nexport class Groth16ProofAndStatement extends Serializable {\n  /**\n   * The Groth16 proof\n   * @group Implementation\n   * @category Serialization\n   */\n  proof: Groth16Zkp;\n\n  /**\n   * The public inputs hash as a 32 byte Uint8Array\n   * @group Implementation\n   * @category Serialization\n   */\n  publicInputsHash: Uint8Array;\n\n  /**\n   * The domain separator prefix used when hashing.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly domainSeparator = \"APTOS::Groth16ProofAndStatement\";\n\n  constructor(proof: Groth16Zkp, publicInputsHash: HexInput | bigint) {\n    super();\n    this.proof = proof;\n    this.publicInputsHash =\n      typeof publicInputsHash === \"bigint\"\n        ? bigIntToBytesLE(publicInputsHash, 32)\n        : Hex.fromHexInput(publicInputsHash).toUint8Array();\n    if (this.publicInputsHash.length !== 32) {\n      throw new Error(\"Invalid public inputs hash\");\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    this.proof.serialize(serializer);\n    serializer.serializeFixedBytes(this.publicInputsHash);\n  }\n\n  static deserialize(deserializer: Deserializer): Groth16ProofAndStatement {\n    return new Groth16ProofAndStatement(Groth16Zkp.deserialize(deserializer), deserializer.deserializeFixedBytes(32));\n  }\n\n  hash(): Uint8Array {\n    return generateSigningMessage(this.bcsToBytes(), this.domainSeparator);\n  }\n}\n\n/**\n * Represents a container for different types of zero-knowledge proofs.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nexport class ZkProof extends Serializable {\n  public readonly proof: Proof;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly variant: ZkpVariant;\n\n  constructor(proof: Proof, variant: ZkpVariant) {\n    super();\n    this.proof = proof;\n    this.variant = variant;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.proof.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ZkProof {\n    const variant = deserializer.deserializeUleb128AsU32();\n    switch (variant) {\n      case ZkpVariant.Groth16:\n        return new ZkProof(Groth16Zkp.deserialize(deserializer), variant);\n      default:\n        throw new Error(`Unknown variant index for ZkProof: ${variant}`);\n    }\n  }\n}\n\n/**\n * Represents a zero-knowledge signature, encapsulating the proof and its associated metadata.\n *\n * @extends Signature\n * @group Implementation\n * @category Serialization\n */\nexport class ZeroKnowledgeSig extends Signature {\n  /**\n   * The proof\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly proof: ZkProof;\n\n  /**\n   * The max lifespan of the proof\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly expHorizonSecs: number;\n\n  /**\n   * A key value pair on the JWT token that can be specified on the signature which would reveal the value on chain.\n   * Can be used to assert identity or other attributes.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly extraField?: string;\n\n  /**\n   * The 'aud' value of the recovery service which is set when recovering an account.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly overrideAudVal?: string;\n\n  /**\n   * The training wheels signature\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly trainingWheelsSignature?: EphemeralSignature;\n\n  constructor(args: {\n    proof: ZkProof;\n    expHorizonSecs: number;\n    extraField?: string;\n    overrideAudVal?: string;\n    trainingWheelsSignature?: EphemeralSignature;\n  }) {\n    super();\n    const { proof, expHorizonSecs, trainingWheelsSignature, extraField, overrideAudVal } = args;\n    this.proof = proof;\n    this.expHorizonSecs = expHorizonSecs;\n    this.trainingWheelsSignature = trainingWheelsSignature;\n    this.extraField = extraField;\n    this.overrideAudVal = overrideAudVal;\n  }\n\n  /**\n   * Deserialize a ZeroKnowledgeSig object from its BCS serialization in bytes.\n   *\n   * @param bytes - The bytes representing the serialized ZeroKnowledgeSig.\n   * @returns ZeroKnowledgeSig - The deserialized ZeroKnowledgeSig object.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromBytes(bytes: Uint8Array): ZeroKnowledgeSig {\n    return ZeroKnowledgeSig.deserialize(new Deserializer(bytes));\n  }\n\n  serialize(serializer: Serializer): void {\n    this.proof.serialize(serializer);\n    serializer.serializeU64(this.expHorizonSecs);\n    serializer.serializeOption(this.extraField);\n    serializer.serializeOption(this.overrideAudVal);\n    serializer.serializeOption(this.trainingWheelsSignature);\n  }\n\n  static deserialize(deserializer: Deserializer): ZeroKnowledgeSig {\n    const proof = ZkProof.deserialize(deserializer);\n    const expHorizonSecs = Number(deserializer.deserializeU64());\n    const extraField = deserializer.deserializeOption(\"string\");\n    const overrideAudVal = deserializer.deserializeOption(\"string\");\n    const trainingWheelsSignature = deserializer.deserializeOption(EphemeralSignature);\n    return new ZeroKnowledgeSig({ proof, expHorizonSecs, trainingWheelsSignature, extraField, overrideAudVal });\n  }\n}\n\n/**\n * Represents the on-chain configuration for how Keyless accounts operate.\n *\n * @remarks\n * This class encapsulates the verification key and the maximum lifespan of ephemeral key pairs,\n * which are essential for the functionality of Keyless accounts.\n * @group Implementation\n * @category Serialization\n */\nexport class KeylessConfiguration {\n  /**\n   * The verification key used to verify Groth16 proofs on chain\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly verificationKey: Groth16VerificationKey;\n\n  /**\n   * The maximum lifespan of an ephemeral key pair.  This is configured on chain.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxExpHorizonSecs: number;\n\n  /**\n   * The public key of the training wheels account.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly trainingWheelsPubkey?: EphemeralPublicKey;\n\n  /**\n   * The maximum number of bytes that can be used for the extra field.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxExtraFieldBytes: number;\n\n  /**\n   * The maximum number of bytes that can be used for the JWT header.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxJwtHeaderB64Bytes: number;\n\n  /**\n   * The maximum number of bytes that can be used for the issuer value.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxIssValBytes: number;\n\n  /**\n   * The maximum number of bytes that can be used for the committed ephemeral public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxCommitedEpkBytes: number;\n\n  constructor(args: {\n    verificationKey: Groth16VerificationKey;\n    trainingWheelsPubkey?: HexInput;\n    maxExpHorizonSecs?: number;\n    maxExtraFieldBytes?: number;\n    maxJwtHeaderB64Bytes?: number;\n    maxIssValBytes?: number;\n    maxCommitedEpkBytes?: number;\n  }) {\n    const {\n      verificationKey,\n      trainingWheelsPubkey,\n      maxExpHorizonSecs = EPK_HORIZON_SECS,\n      maxExtraFieldBytes = MAX_EXTRA_FIELD_BYTES,\n      maxJwtHeaderB64Bytes = MAX_JWT_HEADER_B64_BYTES,\n      maxIssValBytes = MAX_ISS_VAL_BYTES,\n      maxCommitedEpkBytes = MAX_COMMITED_EPK_BYTES,\n    } = args;\n\n    this.verificationKey = verificationKey;\n    this.maxExpHorizonSecs = maxExpHorizonSecs;\n    if (trainingWheelsPubkey) {\n      this.trainingWheelsPubkey = new EphemeralPublicKey(new Ed25519PublicKey(trainingWheelsPubkey));\n    }\n    this.maxExtraFieldBytes = maxExtraFieldBytes;\n    this.maxJwtHeaderB64Bytes = maxJwtHeaderB64Bytes;\n    this.maxIssValBytes = maxIssValBytes;\n    this.maxCommitedEpkBytes = maxCommitedEpkBytes;\n  }\n\n  /**\n   * Creates a new KeylessConfiguration instance from a Groth16VerificationKeyResponse and a KeylessConfigurationResponse.\n   * @param res - The Groth16VerificationKeyResponse object containing the verification key data.\n   * @param config - The KeylessConfigurationResponse object containing the configuration data.\n   * @returns A new KeylessConfiguration instance.\n   */\n  static create(res: Groth16VerificationKeyResponse, config: KeylessConfigurationResponse): KeylessConfiguration {\n    return new KeylessConfiguration({\n      verificationKey: new Groth16VerificationKey({\n        alphaG1: res.alpha_g1,\n        betaG2: res.beta_g2,\n        deltaG2: res.delta_g2,\n        gammaAbcG1: res.gamma_abc_g1,\n        gammaG2: res.gamma_g2,\n      }),\n      maxExpHorizonSecs: Number(config.max_exp_horizon_secs),\n      trainingWheelsPubkey: config.training_wheels_pubkey.vec[0],\n      maxExtraFieldBytes: config.max_extra_field_bytes,\n      maxJwtHeaderB64Bytes: config.max_jwt_header_b64_bytes,\n      maxIssValBytes: config.max_iss_val_bytes,\n      maxCommitedEpkBytes: config.max_commited_epk_bytes,\n    });\n  }\n}\n\n/**\n * Represents the verification key stored on-chain used to verify Groth16 proofs.\n * @group Implementation\n * @category Serialization\n */\nexport class Groth16VerificationKey {\n  // The docstrings below are borrowed from ark-groth16\n\n  /**\n   * The `alpha * G`, where `G` is the generator of G1\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly alphaG1: G1Bytes;\n\n  /**\n   * The `alpha * H`, where `H` is the generator of G2\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly betaG2: G2Bytes;\n\n  /**\n   * The `delta * H`, where `H` is the generator of G2\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly deltaG2: G2Bytes;\n\n  /**\n   * The `gamma^{-1} * (beta * a_i + alpha * b_i + c_i) * H`, where H is the generator of G1\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly gammaAbcG1: [G1Bytes, G1Bytes];\n\n  /**\n   * The `gamma * H`, where `H` is the generator of G2\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly gammaG2: G2Bytes;\n\n  constructor(args: {\n    alphaG1: HexInput;\n    betaG2: HexInput;\n    deltaG2: HexInput;\n    gammaAbcG1: [HexInput, HexInput];\n    gammaG2: HexInput;\n  }) {\n    const { alphaG1, betaG2, deltaG2, gammaAbcG1, gammaG2 } = args;\n    this.alphaG1 = new G1Bytes(alphaG1);\n    this.betaG2 = new G2Bytes(betaG2);\n    this.deltaG2 = new G2Bytes(deltaG2);\n    this.gammaAbcG1 = [new G1Bytes(gammaAbcG1[0]), new G1Bytes(gammaAbcG1[1])];\n    this.gammaG2 = new G2Bytes(gammaG2);\n  }\n\n  /**\n   * Calculates the hash of the serialized form of the verification key.\n   * This is useful for comparing verification keys or using them as unique identifiers.\n   *\n   * @returns The SHA3-256 hash of the serialized verification key as a Uint8Array\n   */\n  public hash(): Uint8Array {\n    const serializer = new Serializer();\n    this.serialize(serializer);\n    return sha3_256.create().update(serializer.toUint8Array()).digest();\n  }\n\n  serialize(serializer: Serializer): void {\n    this.alphaG1.serialize(serializer);\n    this.betaG2.serialize(serializer);\n    this.deltaG2.serialize(serializer);\n    this.gammaAbcG1[0].serialize(serializer);\n    this.gammaAbcG1[1].serialize(serializer);\n    this.gammaG2.serialize(serializer);\n  }\n\n  /**\n   * Converts a Groth16VerificationKeyResponse object into a Groth16VerificationKey instance.\n   *\n   * @param res - The Groth16VerificationKeyResponse object containing the verification key data.\n   * @param res.alpha_g1 - The alpha G1 value from the response.\n   * @param res.beta_g2 - The beta G2 value from the response.\n   * @param res.delta_g2 - The delta G2 value from the response.\n   * @param res.gamma_abc_g1 - The gamma ABC G1 value from the response.\n   * @param res.gamma_g2 - The gamma G2 value from the response.\n   * @returns A Groth16VerificationKey instance constructed from the provided response data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromGroth16VerificationKeyResponse(res: Groth16VerificationKeyResponse): Groth16VerificationKey {\n    return new Groth16VerificationKey({\n      alphaG1: res.alpha_g1,\n      betaG2: res.beta_g2,\n      deltaG2: res.delta_g2,\n      gammaAbcG1: res.gamma_abc_g1,\n      gammaG2: res.gamma_g2,\n    });\n  }\n\n  /**\n   * Verifies a Groth16 proof using the verification key given the public inputs hash and the proof.\n   *\n   * @param args.publicInputsHash The public inputs hash\n   * @param args.groth16Proof The Groth16 proof\n   * @returns true if the proof is valid\n   */\n  verifyProof(args: { publicInputsHash: bigint; groth16Proof: Groth16Zkp }): boolean {\n    const { publicInputsHash, groth16Proof } = args;\n\n    try {\n      // Get proof points\n      const proofA = groth16Proof.a.toProjectivePoint();\n      const proofB = groth16Proof.b.toProjectivePoint();\n      const proofC = groth16Proof.c.toProjectivePoint();\n\n      // Get verification key points\n      const vkAlpha1 = this.alphaG1.toProjectivePoint();\n      const vkBeta2 = this.betaG2.toProjectivePoint();\n      const vkGamma2 = this.gammaG2.toProjectivePoint();\n      const vkDelta2 = this.deltaG2.toProjectivePoint();\n      const vkIC = this.gammaAbcG1.map((g1) => g1.toProjectivePoint());\n\n      const { Fp12 } = bn254.fields;\n\n      // Check that the following pairing equation holds:\n      // e(A_1, B_2) = e(\\alpha_1, \\beta_2) + e(\\ic_0 + public_inputs_hash \\ic_1, \\gamma_2) + e(C_1, \\delta_2)\n      // Where A_1, B_2, C_1 are the proof points and \\alpha_1, \\beta_2, \\gamma_2, \\delta_2, \\ic_0, \\ic_1\n      // are the verification key points\n\n      // \\ic_0 + public_inputs_hash \\ic_1\n      let accum = vkIC[0].add(vkIC[1].multiply(publicInputsHash));\n      // e(\\ic_0 + public_inputs_hash \\ic_1, \\gamma_2)\n      const pairingAccumGamma = bn254.pairing(accum, vkGamma2);\n      // e(A_1, B_2)\n      const pairingAB = bn254.pairing(proofA, proofB);\n      // e(\\alpha_1, \\beta_2)\n      const pairingAlphaBeta = bn254.pairing(vkAlpha1, vkBeta2);\n      // e(C_1, \\delta_2)\n      const pairingCDelta = bn254.pairing(proofC, vkDelta2);\n      // Get the result of the right hand side of the pairing equation\n      const product = Fp12.mul(pairingAlphaBeta, Fp12.mul(pairingAccumGamma, pairingCDelta));\n      // Check if the left hand side equals the right hand side\n      return Fp12.eql(pairingAB, product);\n    } catch (error) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_VERIFICATION_FAILED,\n        error,\n        details: \"Error encountered when checking zero knowledge relation\",\n      });\n    }\n  }\n\n  /**\n   * Converts the verification key to a JSON format compatible with snarkjs groth16.verify\n   *\n   * @returns An object containing the verification key in snarkjs format\n   * @group Implementation\n   * @category Serialization\n   */\n  toSnarkJsJson() {\n    return {\n      protocol: \"groth16\",\n      curve: \"bn128\",\n      nPublic: 1,\n      vk_alpha_1: this.alphaG1.toArray(),\n      vk_beta_2: this.betaG2.toArray(),\n      vk_gamma_2: this.gammaG2.toArray(),\n      vk_delta_2: this.deltaG2.toArray(),\n      IC: this.gammaAbcG1.map((g1) => g1.toArray()),\n    };\n  }\n}\n\n/**\n * Retrieves the configuration parameters for Keyless Accounts on the blockchain, including the verifying key and the maximum\n * expiry horizon.\n *\n * @param args - The arguments for retrieving the keyless configuration.\n * @param args.aptosConfig - The Aptos configuration object containing network details.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - The ledger version to query; if not provided, the latest version will be used.\n * @returns KeylessConfiguration - The configuration object containing the verifying key and maximum expiry horizon.\n * @group Implementation\n * @category Serialization\n */\nexport async function getKeylessConfig(args: {\n  aptosConfig: AptosConfig;\n  options?: LedgerVersionArg;\n}): Promise<KeylessConfiguration> {\n  const { aptosConfig } = args;\n  try {\n    return await memoizeAsync(\n      async () => {\n        const [config, vk] = await Promise.all([\n          getKeylessConfigurationResource(args),\n          getGroth16VerificationKeyResource(args),\n        ]);\n        return KeylessConfiguration.create(vk, config);\n      },\n      `keyless-configuration-${aptosConfig.network}`,\n      1000 * 60 * 5, // 5 minutes\n    )();\n  } catch (error) {\n    if (error instanceof KeylessError) {\n      throw error;\n    }\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_OTHER,\n      error,\n    });\n  }\n}\n\n/**\n * Parses a JWT and returns the 'iss', 'aud', and 'uid' values.\n *\n * @param args - The arguments for parsing the JWT.\n * @param args.jwt - The JWT to parse.\n * @param args.uidKey - The key to use for the 'uid' value; defaults to 'sub'.\n * @returns The 'iss', 'aud', and 'uid' values from the JWT.\n */\nexport function getIssAudAndUidVal(args: { jwt: string; uidKey?: string }): {\n  iss: string;\n  aud: string;\n  uidVal: string;\n} {\n  const { jwt, uidKey = \"sub\" } = args;\n  let jwtPayload: JwtPayload & { [key: string]: string };\n  try {\n    jwtPayload = jwtDecode<JwtPayload & { [key: string]: string }>(jwt);\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWT_PARSING_ERROR,\n      details: `Failed to parse JWT - ${getErrorMessage(error)}`,\n    });\n  }\n  if (typeof jwtPayload.iss !== \"string\") {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWT_PARSING_ERROR,\n      details: \"JWT is missing 'iss' in the payload. This should never happen.\",\n    });\n  }\n  if (typeof jwtPayload.aud !== \"string\") {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWT_PARSING_ERROR,\n      details: \"JWT is missing 'aud' in the payload or 'aud' is an array of values.\",\n    });\n  }\n  const uidVal = jwtPayload[uidKey];\n  return { iss: jwtPayload.iss, aud: jwtPayload.aud, uidVal };\n}\n\n/**\n * Retrieves the KeylessConfiguration set on chain.\n *\n * @param args - The arguments for retrieving the configuration.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n * @returns KeylessConfigurationResponse - The response containing the keyless configuration data.\n * @group Implementation\n * @category Serialization\n */\nasync function getKeylessConfigurationResource(args: {\n  aptosConfig: AptosConfig;\n  options?: LedgerVersionArg;\n}): Promise<KeylessConfigurationResponse> {\n  const { aptosConfig, options } = args;\n  const resourceType = \"0x1::keyless_account::Configuration\";\n  try {\n    const { data } = await getAptosFullNode<{}, MoveResource<KeylessConfigurationResponse>>({\n      aptosConfig,\n      originMethod: \"getKeylessConfigurationResource\",\n      path: `accounts/${AccountAddress.from(\"0x1\").toString()}/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    return data.data;\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_CONFIG_LOOKUP_ERROR,\n      error,\n    });\n  }\n}\n\n/**\n * Retrieves the Groth16VerificationKey set on the blockchain.\n *\n * @param args - The arguments for retrieving the verification key.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n * @returns Groth16VerificationKeyResponse - The response containing the Groth16 verification key data.\n * @group Implementation\n * @category Serialization\n */\nasync function getGroth16VerificationKeyResource(args: {\n  aptosConfig: AptosConfig;\n  options?: LedgerVersionArg;\n}): Promise<Groth16VerificationKeyResponse> {\n  const { aptosConfig, options } = args;\n  const resourceType = \"0x1::keyless_account::Groth16VerificationKey\";\n  try {\n    const { data } = await getAptosFullNode<{}, MoveResource<Groth16VerificationKeyResponse>>({\n      aptosConfig,\n      originMethod: \"getGroth16VerificationKeyResource\",\n      path: `accounts/${AccountAddress.from(\"0x1\").toString()}/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    return data.data;\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_VERIFICATION_KEY_LOOKUP_ERROR,\n      error,\n    });\n  }\n}\n\nexport async function getKeylessJWKs(args: {\n  aptosConfig: AptosConfig;\n  jwkAddr?: AccountAddressInput;\n  options?: LedgerVersionArg;\n}): Promise<Map<string, MoveJWK[]>> {\n  const { aptosConfig, jwkAddr, options } = args;\n  let resource: MoveResource<PatchedJWKsResponse>;\n  if (!jwkAddr) {\n    const resourceType = \"0x1::jwks::PatchedJWKs\";\n    const { data } = await getAptosFullNode<{}, MoveResource<PatchedJWKsResponse>>({\n      aptosConfig,\n      originMethod: \"getKeylessJWKs\",\n      path: `accounts/0x1/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    resource = data;\n  } else {\n    const resourceType = \"0x1::jwks::FederatedJWKs\";\n    const { data } = await getAptosFullNode<{}, MoveResource<PatchedJWKsResponse>>({\n      aptosConfig,\n      originMethod: \"getKeylessJWKs\",\n      path: `accounts/${AccountAddress.from(jwkAddr).toString()}/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    resource = data;\n  }\n\n  // Create a map of issuer to JWK arrays\n  const jwkMap = new Map<string, MoveJWK[]>();\n  for (const entry of resource.data.jwks.entries) {\n    const jwks: MoveJWK[] = [];\n    for (const jwkStruct of entry.jwks) {\n      const { data: jwkData } = jwkStruct.variant;\n      const deserializer = new Deserializer(Hex.fromHexInput(jwkData).toUint8Array());\n      const jwk = MoveJWK.deserialize(deserializer);\n      jwks.push(jwk);\n    }\n    jwkMap.set(hexToAsciiString(entry.issuer), jwks);\n  }\n\n  return jwkMap;\n}\n\nexport class MoveJWK extends Serializable {\n  public kid: string;\n\n  public kty: string;\n\n  public alg: string;\n\n  public e: string;\n\n  public n: string;\n\n  constructor(args: { kid: string; kty: string; alg: string; e: string; n: string }) {\n    super();\n    const { kid, kty, alg, e, n } = args;\n    this.kid = kid;\n    this.kty = kty;\n    this.alg = alg;\n    this.e = e;\n    this.n = n;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.kid);\n    serializer.serializeStr(this.kty);\n    serializer.serializeStr(this.alg);\n    serializer.serializeStr(this.e);\n    serializer.serializeStr(this.n);\n  }\n\n  static fromMoveStruct(struct: MoveAnyStruct): MoveJWK {\n    const { data } = struct.variant;\n    const deserializer = new Deserializer(Hex.fromHexInput(data).toUint8Array());\n    return MoveJWK.deserialize(deserializer);\n  }\n\n  toScalar(): bigint {\n    if (this.alg !== \"RS256\") {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_VERIFICATION_FAILED,\n        details:\n          \"Failed to convert JWK to scalar when calculating the public inputs hash. Only RSA 256 is supported currently\",\n      });\n    }\n    const uint8Array = base64UrlToBytes(this.n);\n    const chunks = chunkInto24Bytes(uint8Array.reverse());\n    const scalars = chunks.map((chunk) => bytesToBigIntLE(chunk));\n    scalars.push(256n); // Add the modulus size\n    return poseidonHash(scalars);\n  }\n\n  static deserialize(deserializer: Deserializer): MoveJWK {\n    const kid = deserializer.deserializeStr();\n    const kty = deserializer.deserializeStr();\n    const alg = deserializer.deserializeStr();\n    const e = deserializer.deserializeStr();\n    const n = deserializer.deserializeStr();\n    return new MoveJWK({ kid, kty, alg, n, e });\n  }\n}\n\nfunction chunkInto24Bytes(data: Uint8Array): Uint8Array[] {\n  const chunks: Uint8Array[] = [];\n  for (let i = 0; i < data.length; i += 24) {\n    const chunk = data.slice(i, Math.min(i + 24, data.length));\n    // Pad last chunk with zeros if needed\n    if (chunk.length < 24) {\n      const paddedChunk = new Uint8Array(24);\n      paddedChunk.set(chunk);\n      chunks.push(paddedChunk);\n    } else {\n      chunks.push(chunk);\n    }\n  }\n  return chunks;\n}\n\ninterface JwtHeader {\n  kid: string; // Key ID\n}\n/**\n * Safely parses the JWT header.\n * @param jwtHeader The JWT header string\n * @returns Parsed JWT header as an object.\n */\nexport function parseJwtHeader(jwtHeader: string): JwtHeader {\n  try {\n    const header = JSON.parse(jwtHeader);\n    if (header.kid === undefined) {\n      throw new Error(\"JWT header missing kid\");\n    }\n    return header;\n  } catch (error) {\n    throw new Error(\"Failed to parse JWT header.\");\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountPublicKey, PublicKey } from \"./publicKey\";\nimport { Deserializer, Serializer } from \"../../bcs\";\nimport { HexInput, AnyPublicKeyVariant, SigningScheme } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { AccountAddress, AccountAddressInput } from \"../accountAddress\";\nimport {\n  KeylessConfiguration,\n  KeylessPublicKey,\n  KeylessSignature,\n  MoveJWK,\n  verifyKeylessSignature,\n  verifyKeylessSignatureWithJwkAndConfig,\n} from \"./keyless\";\nimport { AptosConfig } from \"../../api\";\nimport { Signature } from \"..\";\n\n/**\n * Represents the FederatedKeylessPublicKey public key\n *\n * These keys use an on-chain address as a source of truth for the JWK used to verify signatures.\n *\n * FederatedKeylessPublicKey authentication key is represented in the SDK as `AnyPublicKey`.\n * @group Implementation\n * @category Serialization\n */\nexport class FederatedKeylessPublicKey extends AccountPublicKey {\n  /**\n   * The address that contains the JWK set to be used for verification.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly jwkAddress: AccountAddress;\n\n  /**\n   * The inner public key which contains the standard Keyless public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly keylessPublicKey: KeylessPublicKey;\n\n  constructor(jwkAddress: AccountAddressInput, keylessPublicKey: KeylessPublicKey) {\n    super();\n    this.jwkAddress = AccountAddress.from(jwkAddress);\n    this.keylessPublicKey = keylessPublicKey;\n  }\n\n  /**\n   * Get the authentication key for the federated keyless public key\n   *\n   * @returns AuthenticationKey\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    const serializer = new Serializer();\n    serializer.serializeU32AsUleb128(AnyPublicKeyVariant.FederatedKeyless);\n    serializer.serializeFixedBytes(this.bcsToBytes());\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: SigningScheme.SingleKey,\n      input: serializer.toUint8Array(),\n    });\n  }\n\n  /**\n   * Verifies a signed data with a public key\n   *\n   * @param args.message message\n   * @param args.signature The signature\n   * @param args.jwk - The JWK to use for verification.\n   * @param args.keylessConfig - The keyless configuration to use for verification.\n   * @returns true if the signature is valid\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: {\n    message: HexInput;\n    signature: Signature;\n    jwk: MoveJWK;\n    keylessConfig: KeylessConfiguration;\n  }): boolean {\n    try {\n      verifyKeylessSignatureWithJwkAndConfig({ ...args, publicKey: this });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    this.jwkAddress.serialize(serializer);\n    this.keylessPublicKey.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): FederatedKeylessPublicKey {\n    const jwkAddress = AccountAddress.deserialize(deserializer);\n    const keylessPublicKey = KeylessPublicKey.deserialize(deserializer);\n    return new FederatedKeylessPublicKey(jwkAddress, keylessPublicKey);\n  }\n\n  static isPublicKey(publicKey: PublicKey): publicKey is FederatedKeylessPublicKey {\n    return publicKey instanceof FederatedKeylessPublicKey;\n  }\n\n  /**\n   * Verifies a keyless signature for a given message.  It will fetch the keyless configuration and the JWK to\n   * use for verification from the appropriate network as defined by the aptosConfig.\n   *\n   * @param args.aptosConfig The aptos config to use for fetching the keyless configuration.\n   * @param args.message The message to verify the signature against.\n   * @param args.signature The signature to verify.\n   * @param args.options.throwErrorWithReason Whether to throw an error with the reason for the failure instead of returning false.\n   * @returns true if the signature is valid\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: KeylessSignature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return verifyKeylessSignature({\n      ...args,\n      publicKey: this,\n    });\n  }\n\n  /**\n   * Creates a FederatedKeylessPublicKey from the JWT components plus pepper\n   *\n   * @param args.iss the iss of the identity\n   * @param args.uidKey the key to use to get the uidVal in the JWT token\n   * @param args.uidVal the value of the uidKey in the JWT token\n   * @param args.aud the client ID of the application\n   * @param args.pepper The pepper used to maintain privacy of the account\n   * @returns FederatedKeylessPublicKey\n   * @group Implementation\n   * @category Serialization\n   */\n  static create(args: {\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    jwkAddress: AccountAddressInput;\n  }): FederatedKeylessPublicKey {\n    return new FederatedKeylessPublicKey(args.jwkAddress, KeylessPublicKey.create(args));\n  }\n\n  static fromJwtAndPepper(args: {\n    jwt: string;\n    pepper: HexInput;\n    jwkAddress: AccountAddressInput;\n    uidKey?: string;\n  }): FederatedKeylessPublicKey {\n    return new FederatedKeylessPublicKey(args.jwkAddress, KeylessPublicKey.fromJwtAndPepper(args));\n  }\n\n  static isInstance(publicKey: PublicKey) {\n    return (\n      \"jwkAddress\" in publicKey &&\n      publicKey.jwkAddress instanceof AccountAddress &&\n      \"keylessPublicKey\" in publicKey &&\n      publicKey.keylessPublicKey instanceof KeylessPublicKey\n    );\n  }\n}\n","import { Deserializer, Serializer } from \"../../bcs\";\nimport {\n  AnyPublicKeyVariant,\n  AnySignatureVariant,\n  SigningScheme as AuthenticationKeyScheme,\n  HexInput,\n} from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Ed25519PrivateKey, Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { AccountPublicKey, PublicKey } from \"./publicKey\";\nimport { Secp256k1PrivateKey, Secp256k1PublicKey, Secp256k1Signature } from \"./secp256k1\";\nimport { KeylessPublicKey, KeylessSignature } from \"./keyless\";\nimport { Signature } from \"./signature\";\nimport { FederatedKeylessPublicKey } from \"./federatedKeyless\";\nimport { AptosConfig } from \"../../api\";\n\nexport type PrivateKeyInput = Ed25519PrivateKey | Secp256k1PrivateKey;\n\n/**\n * Represents any public key supported by Aptos.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n *\n * Any unified authentication key is represented in the SDK as `AnyPublicKey`.\n * @group Implementation\n * @category Serialization\n */\nexport class AnyPublicKey extends AccountPublicKey {\n  /**\n   * Reference to the inner public key\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKey: PublicKey;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly variant: AnyPublicKeyVariant;\n\n  // region Constructors\n\n  /**\n   * Creates an instance of the signature class based on the provided signature type.\n   * This allows for the handling of different signature variants such as Ed25519, Secp256k1, and Keyless.\n   *\n   * @param publicKey - The publicKey object which determines the variant to be used.\n   * @throws Error if the provided signature type is unsupported.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(publicKey: PublicKey) {\n    super();\n    this.publicKey = publicKey;\n    if (publicKey instanceof Ed25519PublicKey) {\n      this.variant = AnyPublicKeyVariant.Ed25519;\n    } else if (publicKey instanceof Secp256k1PublicKey) {\n      this.variant = AnyPublicKeyVariant.Secp256k1;\n    } else if (publicKey instanceof KeylessPublicKey) {\n      this.variant = AnyPublicKeyVariant.Keyless;\n    } else if (publicKey instanceof FederatedKeylessPublicKey) {\n      this.variant = AnyPublicKeyVariant.FederatedKeyless;\n    } else {\n      throw new Error(\"Unsupported public key type\");\n    }\n  }\n\n  // endregion\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by confirming that the signature is valid.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify, which must be an instance of AnySignature.\n   * @returns A boolean indicating whether the signature is valid for the given message.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: AnySignature }): boolean {\n    const { message, signature } = args;\n    if (this.publicKey instanceof KeylessPublicKey) {\n      throw new Error(\"Use verifySignatureAsync to verify Keyless signatures\");\n    }\n    return this.publicKey.verifySignature({\n      message,\n      signature: signature.signature,\n    });\n  }\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by confirming that the signature is valid.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify, which must be an instance of AnySignature.\n   * @returns A boolean indicating whether the signature is valid for the given message.\n   * @group Implementation\n   * @category Serialization\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    if (!(args.signature instanceof AnySignature)) {\n      if (args.options?.throwErrorWithReason) {\n        throw new Error(\"Signature must be an instance of AnySignature\");\n      }\n      return false;\n    }\n    return await this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature.signature,\n    });\n  }\n\n  /**\n   * Generates an authentication key from the current instance's byte representation.\n   * This function is essential for creating a unique identifier for authentication purposes.\n   *\n   * @returns {AuthenticationKey} The generated authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.SingleKey,\n      input: this.toUint8Array(),\n    });\n  }\n\n  /**\n   * Get the signature in bytes (Uint8Array).\n   *\n   * This function is a warning that it will soon return the underlying signature bytes directly.\n   * Use AnySignature.bcsToBytes() instead.\n   *\n   * @returns Uint8Array representation of the signature.\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the current object using the provided serializer.\n   * This function helps in converting the object into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.publicKey.serialize(serializer);\n  }\n\n  /**\n   * Deserializes an AnySignature from the provided deserializer.\n   * This function helps in reconstructing the AnySignature object from its serialized form, allowing for further processing or validation.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): AnyPublicKey {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let publicKey: PublicKey;\n    switch (variantIndex) {\n      case AnyPublicKeyVariant.Ed25519:\n        publicKey = Ed25519PublicKey.deserialize(deserializer);\n        break;\n      case AnyPublicKeyVariant.Secp256k1:\n        publicKey = Secp256k1PublicKey.deserialize(deserializer);\n        break;\n      case AnyPublicKeyVariant.Keyless:\n        publicKey = KeylessPublicKey.deserialize(deserializer);\n        break;\n      case AnyPublicKeyVariant.FederatedKeyless:\n        publicKey = FederatedKeylessPublicKey.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for AnyPublicKey: ${variantIndex}`);\n    }\n    return new AnyPublicKey(publicKey);\n  }\n  // endregion\n\n  /**\n   * Determines if the provided public key is an instance of AnyPublicKey.\n   *\n   * @param publicKey - The public key to check.\n   * @deprecated Use `instanceof AnyPublicKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: AccountPublicKey): publicKey is AnyPublicKey {\n    return publicKey instanceof AnyPublicKey;\n  }\n\n  /**\n   * Determines if the current public key is an instance of Ed25519PublicKey.\n   *\n   * @deprecated use `publicKey instanceof Ed25519PublicKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  isEd25519(): boolean {\n    return this.publicKey instanceof Ed25519PublicKey;\n  }\n\n  /**\n   * Checks if the public key is an instance of Secp256k1PublicKey.\n   *\n   * @deprecated use `publicKey instanceof Secp256k1PublicKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  isSecp256k1PublicKey(): boolean {\n    return this.publicKey instanceof Secp256k1PublicKey;\n  }\n\n  /**\n   * Determines if the provided publicKey is an instance of a valid PublicKey object.\n   *\n   * @param publicKey - The publicKey to be checked for validity.\n   * @param publicKey.publicKey - The actual publicKey object that needs to be validated.\n   * @returns True if the signature is a valid instance; otherwise, false.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isInstance(publicKey: PublicKey): publicKey is AnyPublicKey {\n    return \"publicKey\" in publicKey && \"variant\" in publicKey;\n  }\n}\n\n/**\n * Represents a signature that utilizes the SingleKey authentication scheme.\n * This class is designed to encapsulate various types of signatures, which can\n * only be generated by a `SingleKeySigner` due to the shared authentication mechanism.\n *\n * @extends Signature\n * @group Implementation\n * @category Serialization\n */\nexport class AnySignature extends Signature {\n  public readonly signature: Signature;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  private readonly variant: AnySignatureVariant;\n\n  // region Constructors\n\n  constructor(signature: Signature) {\n    super();\n    this.signature = signature;\n\n    if (signature instanceof Ed25519Signature) {\n      this.variant = AnySignatureVariant.Ed25519;\n    } else if (signature instanceof Secp256k1Signature) {\n      this.variant = AnySignatureVariant.Secp256k1;\n    } else if (signature instanceof KeylessSignature) {\n      this.variant = AnySignatureVariant.Keyless;\n    } else {\n      throw new Error(\"Unsupported signature type\");\n    }\n  }\n\n  // endregion\n\n  // region AccountSignature\n\n  toUint8Array(): Uint8Array {\n    // TODO: keep this warning around for a bit, and eventually change this to return `this.signature.toUint8Array()`.\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"[Aptos SDK] Calls to AnySignature.toUint8Array() will soon return the underlying signature bytes. \" +\n        \"Use AnySignature.bcsToBytes() instead.\",\n    );\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.signature.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): AnySignature {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let signature: Signature;\n    switch (variantIndex) {\n      case AnySignatureVariant.Ed25519:\n        signature = Ed25519Signature.deserialize(deserializer);\n        break;\n      case AnySignatureVariant.Secp256k1:\n        signature = Secp256k1Signature.deserialize(deserializer);\n        break;\n      case AnySignatureVariant.Keyless:\n        signature = KeylessSignature.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for AnySignature: ${variantIndex}`);\n    }\n    return new AnySignature(signature);\n  }\n\n  // endregion\n\n  static isInstance(signature: Signature): signature is AnySignature {\n    return (\n      \"signature\" in signature &&\n      typeof signature.signature === \"object\" &&\n      signature.signature !== null &&\n      \"toUint8Array\" in signature.signature\n    );\n  }\n}\n","import { SigningScheme as AuthenticationKeyScheme, HexInput } from \"../../types\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializer } from \"../../bcs/serializer\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { AccountPublicKey, PublicKey, VerifySignatureAsyncArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { AnyPublicKey, AnySignature } from \"./singleKey\";\nimport { AptosConfig } from \"../../api\";\n\n/**\n * Counts the number of set bits (1s) in a byte.\n * This function can help you determine the population count of a given byte value.\n *\n * @param byte - The byte value for which to count the number of set bits.\n * @group Implementation\n * @category Serialization\n */\n/* eslint-disable no-bitwise */\nfunction bitCount(byte: number) {\n  let n = byte;\n  n -= (n >> 1) & 0x55555555;\n  n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n  return (((n + (n >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n/* eslint-enable no-bitwise */\n\nexport abstract class AbstractMultiKey extends AccountPublicKey {\n  publicKeys: PublicKey[];\n\n  constructor(args: { publicKeys: PublicKey[] }) {\n    super();\n    this.publicKeys = args.publicKeys;\n  }\n\n  /**\n   * Create a bitmap that holds the mapping from the original public keys\n   * to the signatures passed in\n   *\n   * @param args.bits array of the index mapping to the matching public keys\n   * @returns Uint8array bit map\n   * @group Implementation\n   * @category Serialization\n   */\n  createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, idx: number) => {\n      if (idx + 1 > this.publicKeys.length) {\n        throw new Error(`Signature index ${idx + 1} is out of public keys range, ${this.publicKeys.length}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(`Duplicate bit ${bit} detected.`);\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  /**\n   * Get the index of the provided public key.\n   *\n   * This function retrieves the index of a specified public key within the MultiKey.\n   * If the public key does not exist, it throws an error.\n   *\n   * @param publicKey - The public key to find the index for.\n   * @returns The corresponding index of the public key, if it exists.\n   * @throws Error - If the public key is not found in the MultiKey.\n   * @group Implementation\n   * @category Serialization\n   */\n  getIndex(publicKey: PublicKey): number {\n    const index = this.publicKeys.findIndex((pk) => pk.toString() === publicKey.toString());\n\n    if (index !== -1) {\n      return index;\n    }\n    throw new Error(`Public key ${publicKey} not found in multi key set ${this.publicKeys}`);\n  }\n}\n\n/**\n * Represents a multi-key authentication scheme for accounts, allowing multiple public keys\n * to be associated with a single account. This class enforces a minimum number of valid signatures\n * required to authorize actions, ensuring enhanced security for multi-agent accounts.\n *\n * The public keys of each individual agent can be any type of public key supported by Aptos.\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263), Aptos supports\n * `Legacy` and `Unified` authentication keys.\n * @group Implementation\n * @category Serialization\n */\nexport class MultiKey extends AbstractMultiKey {\n  /**\n   * List of any public keys\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKeys: AnyPublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signaturesRequired: number;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   * This constructor initializes a multi-signature transaction with the provided signatures and bitmap.\n   *\n   * @param args An object containing the parameters for the multi-signature transaction.\n   * @param args.signatures A list of signatures.\n   * @param args.bitmap A bitmap represented as a Uint8Array or an array of numbers, where each bit indicates whether a\n   * corresponding signature is present. A maximum of 32 signatures is supported, and the length of the bitmap must be 4 bytes.\n   *\n   * @throws Error if the number of signatures exceeds the maximum supported, if the bitmap length is incorrect, or if the number\n   * of signatures does not match the bitmap.\n   * @group Implementation\n   * @category Serialization\n   */\n  // region Constructors\n  constructor(args: { publicKeys: Array<PublicKey>; signaturesRequired: number }) {\n    const { publicKeys, signaturesRequired } = args;\n    super({ publicKeys });\n\n    // Validate number of public keys is greater than signature required\n    if (signaturesRequired < 1) {\n      throw new Error(\"The number of required signatures needs to be greater than 0\");\n    }\n\n    // Validate number of public keys is greater than signature required\n    if (publicKeys.length < signaturesRequired) {\n      throw new Error(\n        `Provided ${publicKeys.length} public keys is smaller than the ${signaturesRequired} required signatures`,\n      );\n    }\n\n    // Make sure that all keys are normalized to the SingleKey authentication scheme\n    this.publicKeys = publicKeys.map((publicKey) =>\n      publicKey instanceof AnyPublicKey ? publicKey : new AnyPublicKey(publicKey),\n    );\n\n    this.signaturesRequired = signaturesRequired;\n  }\n\n  // endregion\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by checking if the signature is valid.\n   *\n   * Note: This function will fail if a keyless signature is used.  Use `verifySignatureAsync` instead.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: MultiKeySignature }): boolean {\n    const { message, signature } = args;\n    if (signature.signatures.length !== this.signaturesRequired) {\n      throw new Error(\"The number of signatures does not match the number of required signatures\");\n    }\n    const signerIndices = signature.bitMapToSignerIndices();\n    for (let i = 0; i < signature.signatures.length; i += 1) {\n      const singleSignature = signature.signatures[i];\n      const publicKey = this.publicKeys[signerIndices[i]];\n      if (!publicKey.verifySignature({ message, signature: singleSignature })) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by checking if the signature is valid.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The Aptos configuration to use\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify.\n   * @group Implementation\n   * @category Serialization\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    const { signature } = args;\n    try {\n      if (!(signature instanceof MultiKeySignature)) {\n        throw new Error(\"Signature is not a MultiKeySignature\");\n      }\n      if (signature.signatures.length !== this.signaturesRequired) {\n        throw new Error(\"The number of signatures does not match the number of required signatures\");\n      }\n      const signerIndices = signature.bitMapToSignerIndices();\n      for (let i = 0; i < signature.signatures.length; i += 1) {\n        const singleSignature = signature.signatures[i];\n        const publicKey = this.publicKeys[signerIndices[i]];\n        if (!(await publicKey.verifySignatureAsync({ ...args, signature: singleSignature }))) {\n          return false;\n        }\n      }\n      return true;\n    } catch (error) {\n      if (args.options?.throwErrorWithReason) {\n        throw error;\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Generates an authentication key based on the current instance's byte representation.\n   * This key can be used for secure authentication processes within the system.\n   *\n   * @returns {AuthenticationKey} The generated authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.MultiKey,\n      input: this.toUint8Array(),\n    });\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the object by writing its signatures and bitmap to the provided serializer.\n   * This allows the object to be converted into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.publicKeys);\n    serializer.serializeU8(this.signaturesRequired);\n  }\n\n  /**\n   * Deserializes a MultiKeySignature from the provided deserializer.\n   * This function retrieves the signatures and bitmap necessary for creating a MultiKeySignature object.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): MultiKey {\n    const keys = deserializer.deserializeVector(AnyPublicKey);\n    const signaturesRequired = deserializer.deserializeU8();\n\n    return new MultiKey({ publicKeys: keys, signaturesRequired });\n  }\n\n  // endregion\n\n  /**\n   * Get the index of the provided public key.\n   *\n   * This function retrieves the index of a specified public key within the MultiKey.\n   * If the public key does not exist, it throws an error.\n   *\n   * @param publicKey - The public key to find the index for.\n   * @returns The corresponding index of the public key, if it exists.\n   * @throws Error - If the public key is not found in the MultiKey.\n   * @group Implementation\n   */\n  getIndex(publicKey: PublicKey): number {\n    const anyPublicKey = publicKey instanceof AnyPublicKey ? publicKey : new AnyPublicKey(publicKey);\n    return super.getIndex(anyPublicKey);\n  }\n\n  public static isInstance(value: PublicKey): value is MultiKey {\n    return \"publicKeys\" in value && \"signaturesRequired\" in value;\n  }\n}\n\n/**\n * Represents a multi-signature transaction using Ed25519 signatures.\n * This class allows for the creation and management of a K-of-N multi-signature scheme,\n * where a specified number of signatures are required to authorize a transaction.\n *\n * It includes functionality to validate the number of signatures against a bitmap,\n * which indicates which public keys have signed the transaction.\n * @group Implementation\n * @category Serialization\n */\nexport class MultiKeySignature extends Signature {\n  /**\n   * Number of bytes in the bitmap representing who signed the transaction (32-bits)\n   * @group Implementation\n   * @category Serialization\n   */\n  static BITMAP_LEN: number = 4;\n\n  /**\n   * Maximum number of Ed25519 signatures supported\n   * @group Implementation\n   * @category Serialization\n   */\n  static MAX_SIGNATURES_SUPPORTED = MultiKeySignature.BITMAP_LEN * 8;\n\n  /**\n   * The list of underlying Ed25519 signatures\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signatures: AnySignature[];\n\n  /**\n   * 32-bit Bitmap representing who signed the transaction\n   *\n   * This is represented where each public key can be masked to determine whether the message was signed by that key.\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly bitmap: Uint8Array;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param args.signatures A list of signatures\n   * @param args.bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(args: { signatures: Array<Signature | AnySignature>; bitmap: Uint8Array | number[] }) {\n    super();\n    const { signatures, bitmap } = args;\n\n    if (signatures.length > MultiKeySignature.MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`The number of signatures cannot be greater than ${MultiKeySignature.MAX_SIGNATURES_SUPPORTED}`);\n    }\n\n    // Make sure that all signatures are normalized to the SingleKey authentication scheme\n    this.signatures = signatures.map((signature) =>\n      signature instanceof AnySignature ? signature : new AnySignature(signature),\n    );\n\n    if (!(bitmap instanceof Uint8Array)) {\n      this.bitmap = MultiKeySignature.createBitmap({ bits: bitmap });\n    } else if (bitmap.length !== MultiKeySignature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiKeySignature.BITMAP_LEN}`);\n    } else {\n      this.bitmap = bitmap;\n    }\n\n    const nSignatures = this.bitmap.reduce((acc, byte) => acc + bitCount(byte), 0);\n    if (nSignatures !== this.signatures.length) {\n      throw new Error(`Expecting ${nSignatures} signatures from the bitmap, but got ${this.signatures.length}`);\n    }\n  }\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param args.bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   * @group Implementation\n   * @category Serialization\n   */\n  static createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number) => {\n      if (bit >= MultiKeySignature.MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Cannot have a signature larger than ${MultiKeySignature.MAX_SIGNATURES_SUPPORTED - 1}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicate bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  /**\n   * Converts the bitmap to an array of signer indices.\n   *\n   * Example:\n   *\n   * bitmap: [0b10001000, 0b01000000, 0b00000000, 0b00000000]\n   * signerIndices: [0, 4, 9]\n   *\n   * @returns An array of signer indices.\n   * @group Implementation\n   * @category Serialization\n   */\n  bitMapToSignerIndices(): number[] {\n    const signerIndices: number[] = [];\n    for (let i = 0; i < this.bitmap.length; i += 1) {\n      const byte = this.bitmap[i];\n      for (let bit = 0; bit < 8; bit += 1) {\n        if ((byte & (128 >> bit)) !== 0) {\n          signerIndices.push(i * 8 + bit);\n        }\n      }\n    }\n    return signerIndices;\n  }\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    // Note: we should not need to serialize the vector length, as it can be derived from the bitmap\n    serializer.serializeVector(this.signatures);\n    serializer.serializeBytes(this.bitmap);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiKeySignature {\n    const signatures = deserializer.deserializeVector(AnySignature);\n    const bitmap = deserializer.deserializeBytes();\n    return new MultiKeySignature({ signatures, bitmap });\n  }\n\n  // endregion\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../../api\";\nimport { Deserializer, Serializer } from \"../../bcs\";\nimport { SigningScheme as AuthenticationKeyScheme, HexInput } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { AbstractMultiKey } from \"./multiKey\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents the public key of a K-of-N Ed25519 multi-sig transaction.\n *\n * A K-of-N multi-sig transaction requires at least K out of N authorized signers to sign the transaction\n * for it to be executed. This class encapsulates the logic for managing the public keys and the threshold\n * for valid signatures.\n *\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction/ | Creating a Signed Transaction}\n * @group Implementation\n * @category Serialization\n */\nexport class MultiEd25519PublicKey extends AbstractMultiKey {\n  /**\n   * Maximum number of public keys supported\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly MAX_KEYS = 32;\n\n  /**\n   * Minimum number of public keys needed\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly MIN_KEYS = 2;\n\n  /**\n   * Minimum threshold for the number of valid signatures required\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly MIN_THRESHOLD = 1;\n\n  /**\n   * List of Ed25519 public keys for this LegacyMultiEd25519PublicKey\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKeys: Ed25519PublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly threshold: number;\n\n  /**\n   * Public key for a K-of-N multi-sig transaction. A K-of-N multi-sig transaction means that for such a\n   * transaction to be executed, at least K out of the N authorized signers have signed the transaction\n   * and passed the check conducted by the chain.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   * @param args - A wrapper to let you choose the param order.\n   * @param args.publicKeys A list of public keys\n   * @param args.threshold At least \"threshold\" signatures must be valid\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(args: { publicKeys: Ed25519PublicKey[]; threshold: number }) {\n    const { publicKeys, threshold } = args;\n    super({ publicKeys });\n\n    // Validate number of public keys\n    if (publicKeys.length > MultiEd25519PublicKey.MAX_KEYS || publicKeys.length < MultiEd25519PublicKey.MIN_KEYS) {\n      throw new Error(\n        `Must have between ${MultiEd25519PublicKey.MIN_KEYS} and ` +\n          `${MultiEd25519PublicKey.MAX_KEYS} public keys, inclusive`,\n      );\n    }\n\n    // Validate threshold: must be between 1 and the number of public keys, inclusive\n    if (threshold < MultiEd25519PublicKey.MIN_THRESHOLD || threshold > publicKeys.length) {\n      throw new Error(\n        `Threshold must be between ${MultiEd25519PublicKey.MIN_THRESHOLD} and ${publicKeys.length}, inclusive`,\n      );\n    }\n\n    this.publicKeys = publicKeys;\n    this.threshold = threshold;\n  }\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies a multi-signature against a given message.\n   * This function ensures that the provided signatures meet the required threshold and are valid for the given message.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The multi-signature containing multiple signatures and a bitmap indicating which signatures are valid.\n   * @returns True if the signature is valid; otherwise, false.\n   * @throws Error if the bitmap and signatures length mismatch or if there are not enough valid signatures.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: Signature }): boolean {\n    const { message, signature } = args;\n    if (!(signature instanceof MultiEd25519Signature)) {\n      return false;\n    }\n\n    const indices: number[] = [];\n    for (let i = 0; i < 4; i += 1) {\n      for (let j = 0; j < 8; j += 1) {\n        // eslint-disable-next-line no-bitwise\n        const bitIsSet = (signature.bitmap[i] & (1 << (7 - j))) !== 0;\n        if (bitIsSet) {\n          const index = i * 8 + j;\n          indices.push(index);\n        }\n      }\n    }\n\n    if (indices.length !== signature.signatures.length) {\n      throw new Error(\"Bitmap and signatures length mismatch\");\n    }\n\n    if (indices.length < this.threshold) {\n      throw new Error(\"Not enough signatures\");\n    }\n\n    for (let i = 0; i < indices.length; i += 1) {\n      const publicKey = this.publicKeys[indices[i]];\n      if (!publicKey.verifySignature({ message, signature: signature.signatures[i] })) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.verifySignature(args);\n  }\n\n  /**\n   * Generates an authentication key based on the current instance's byte representation.\n   * This function is essential for creating a secure authentication key that can be used for various cryptographic operations.\n   *\n   * @returns {AuthenticationKey} The generated authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.MultiEd25519,\n      input: this.toUint8Array(),\n    });\n  }\n\n  /**\n   * Converts a PublicKeys into Uint8Array (bytes) with: bytes = p1_bytes | ... | pn_bytes | threshold\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.publicKeys.length * Ed25519PublicKey.LENGTH + 1);\n    this.publicKeys.forEach((k: Ed25519PublicKey, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519PublicKey.LENGTH);\n    });\n\n    bytes[this.publicKeys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n\n    return bytes;\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the current instance into bytes using the provided serializer.\n   * This allows for the conversion of the instance's data into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer used to convert the instance into bytes.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  /**\n   * Deserializes a MultiEd25519Signature from the provided deserializer.\n   * This function helps in reconstructing a MultiEd25519Signature object from its serialized byte representation.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): MultiEd25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n\n    const keys: Ed25519PublicKey[] = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey({ publicKeys: keys, threshold });\n  }\n\n  // endregion\n\n  /**\n   * Get the index of the provided public key.\n   *\n   * This function retrieves the index of a specified public key within the MultiKey.\n   * If the public key does not exist, it throws an error.\n   *\n   * @param publicKey - The public key to find the index for.\n   * @returns The corresponding index of the public key, if it exists.\n   * @throws Error - If the public key is not found in the MultiKey.\n   * @group Implementation\n   */\n  getIndex(publicKey: Ed25519PublicKey): number {\n    return super.getIndex(publicKey);\n  }\n}\n\n/**\n * Represents the signature of a K-of-N Ed25519 multi-sig transaction.\n *\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n * @group Implementation\n * @category Serialization\n */\nexport class MultiEd25519Signature extends Signature {\n  /**\n   * Maximum number of Ed25519 signatures supported\n   * @group Implementation\n   * @category Serialization\n   */\n  static MAX_SIGNATURES_SUPPORTED = 32;\n\n  /**\n   * Number of bytes in the bitmap representing who signed the transaction (32-bits)\n   * @group Implementation\n   * @category Serialization\n   */\n  static BITMAP_LEN: number = 4;\n\n  /**\n   * The list of underlying Ed25519 signatures\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signatures: Ed25519Signature[];\n\n  /**\n   * 32-bit Bitmap representing who signed the transaction\n   *\n   * This is represented where each public key can be masked to determine whether the message was signed by that key.\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly bitmap: Uint8Array;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param args.signatures A list of signatures\n   * @param args.bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right.\n   * Alternatively, you can specify an array of bitmap positions.\n   * Valid position should range between 0 and 31.\n   * @see MultiEd25519Signature.createBitmap\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(args: { signatures: Ed25519Signature[]; bitmap: Uint8Array | number[] }) {\n    super();\n    const { signatures, bitmap } = args;\n\n    if (signatures.length > MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(\n        `The number of signatures cannot be greater than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED}`,\n      );\n    }\n    this.signatures = signatures;\n\n    if (!(bitmap instanceof Uint8Array)) {\n      this.bitmap = MultiEd25519Signature.createBitmap({ bits: bitmap });\n    } else if (bitmap.length !== MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiEd25519Signature.BITMAP_LEN}`);\n    } else {\n      this.bitmap = bitmap;\n    }\n  }\n\n  // region AccountSignature\n\n  /**\n   * Converts a MultiSignature into Uint8Array (bytes) with `bytes = s1_bytes | ... | sn_bytes | bitmap`\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k: Ed25519Signature, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519Signature.LENGTH);\n    });\n\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n\n    return bytes;\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n\n    const signatures: Ed25519Signature[] = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      signatures.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new MultiEd25519Signature({ signatures, bitmap });\n  }\n\n  // endregion\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions.\n   * This function allows you to set specific bits in a 32-bit long bitmap based on the provided positions.\n   *\n   * @param args The arguments for creating the bitmap.\n   * @param args.bits The bitmap positions that should be set. A position starts at index 0. Valid positions should range between 0 and 31.\n   *\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32 bits long.\n   * @group Implementation\n   * @category Serialization\n   */\n  static createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, index) => {\n      if (bit >= MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Cannot have a signature larger than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED - 1}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicate bits detected.\");\n      }\n\n      if (index > 0 && bit <= bits[index - 1]) {\n        throw new Error(\"The bits need to be sorted in ascending order.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Serializer, Deserializer, Serializable } from \"../../bcs\";\nimport { AnyPublicKey, AnySignature } from \"../../core/crypto\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { MultiKey, MultiKeySignature } from \"../../core/crypto/multiKey\";\nimport { AccountAuthenticatorVariant, HexInput, MoveFunctionId } from \"../../types\";\nimport { AbstractionAuthDataVariant } from \"../../types/abstraction\";\nimport { AccountAddress, Hex } from \"../../core\";\nimport { getFunctionParts, isValidFunctionInfo } from \"../../utils/helpers\";\n\n/**\n * Represents an account authenticator that can handle multiple authentication variants.\n * This class serves as a base for different types of account authenticators, allowing for serialization\n * and deserialization of various authenticator types.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class AccountAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserializes an AccountAuthenticator from the provided deserializer.\n   * This function helps in reconstructing the AccountAuthenticator object based on the variant index.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): AccountAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case AccountAuthenticatorVariant.Ed25519:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.MultiEd25519:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.SingleKey:\n        return AccountAuthenticatorSingleKey.load(deserializer);\n      case AccountAuthenticatorVariant.MultiKey:\n        return AccountAuthenticatorMultiKey.load(deserializer);\n      case AccountAuthenticatorVariant.NoAccountAuthenticator:\n        return AccountAuthenticatorNoAccountAuthenticator.load(deserializer);\n      case AccountAuthenticatorVariant.Abstraction:\n        return AccountAuthenticatorAbstraction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n\n  /**\n   * Determines if the current instance is an Ed25519 account authenticator.\n   *\n   * @returns {boolean} True if the instance is of type AccountAuthenticatorEd25519, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isEd25519(): this is AccountAuthenticatorEd25519 {\n    return this instanceof AccountAuthenticatorEd25519;\n  }\n\n  /**\n   * Determines if the current instance is of type AccountAuthenticatorMultiEd25519.\n   *\n   * @returns {boolean} True if the instance is a multi-signature Ed25519 account authenticator, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isMultiEd25519(): this is AccountAuthenticatorMultiEd25519 {\n    return this instanceof AccountAuthenticatorMultiEd25519;\n  }\n\n  /**\n   * Determines if the current instance is of the type AccountAuthenticatorSingleKey.\n   *\n   * @returns {boolean} True if the instance is an AccountAuthenticatorSingleKey, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isSingleKey(): this is AccountAuthenticatorSingleKey {\n    return this instanceof AccountAuthenticatorSingleKey;\n  }\n\n  /**\n   * Determine if the current instance is of type AccountAuthenticatorMultiKey.\n   *\n   * @returns {boolean} Returns true if the instance is an AccountAuthenticatorMultiKey, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isMultiKey(): this is AccountAuthenticatorMultiKey {\n    return this instanceof AccountAuthenticatorMultiKey;\n  }\n}\n\n/**\n * Represents an Ed25519 transaction authenticator for multi-signer transactions.\n * This class encapsulates the account's Ed25519 public key and signature.\n *\n * @param public_key - The Ed25519 public key associated with the account.\n * @param signature - The Ed25519 signature for the account.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorEd25519 extends AccountAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  /**\n   * Creates an instance of the class with the specified public keys and signatures.\n   *\n   * @param public_key The public key used for verification.\n   * @param signature The signatures corresponding to the public keys.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  /**\n   * Serializes the account authenticator data into the provided serializer.\n   * This function captures the multi-key variant, public keys, and signatures for serialization.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  /**\n   * Loads an instance of AccountAuthenticatorMultiKey from the provided deserializer.\n   * This function helps in reconstructing the authenticator object using the deserialized public keys and signatures.\n   *\n   * @param deserializer - The deserializer used to extract the necessary data for loading the authenticator.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): AccountAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents a transaction authenticator for Multi Ed25519, designed for multi-signer transactions.\n *\n * @param public_key - The MultiEd25519 public key of the account.\n * @param signature - The MultiEd25519 signature of the account.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents an account authenticator that utilizes a single key for signing.\n * This class is designed to handle authentication using a public key and its corresponding signature.\n *\n * @param public_key - The public key used for authentication.\n * @param signature - The signature associated with the public key.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorSingleKey extends AccountAuthenticator {\n  public readonly public_key: AnyPublicKey;\n\n  public readonly signature: AnySignature;\n\n  constructor(public_key: AnyPublicKey, signature: AnySignature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.SingleKey);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorSingleKey {\n    const public_key = AnyPublicKey.deserialize(deserializer);\n    const signature = AnySignature.deserialize(deserializer);\n    return new AccountAuthenticatorSingleKey(public_key, signature);\n  }\n}\n\n/**\n * Represents an account authenticator that supports multiple keys and signatures for multi-signature scenarios.\n *\n * @param public_keys - The public keys used for authentication.\n * @param signatures - The signatures corresponding to the public keys.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorMultiKey extends AccountAuthenticator {\n  public readonly public_keys: MultiKey;\n\n  public readonly signatures: MultiKeySignature;\n\n  constructor(public_keys: MultiKey, signatures: MultiKeySignature) {\n    super();\n    this.public_keys = public_keys;\n    this.signatures = signatures;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiKey);\n    this.public_keys.serialize(serializer);\n    this.signatures.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiKey {\n    const public_keys = MultiKey.deserialize(deserializer);\n    const signatures = MultiKeySignature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiKey(public_keys, signatures);\n  }\n}\n\n/**\n * AccountAuthenticatorNoAccountAuthenticator for no account authenticator\n * It represents the absence of a public key for transaction simulation.\n * It allows skipping the public/auth key check during the simulation.\n */\nexport class AccountAuthenticatorNoAccountAuthenticator extends AccountAuthenticator {\n  // eslint-disable-next-line class-methods-use-this\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.NoAccountAuthenticator);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static load(deserializer: Deserializer): AccountAuthenticatorNoAccountAuthenticator {\n    return new AccountAuthenticatorNoAccountAuthenticator();\n  }\n}\n\nexport class AccountAuthenticatorAbstraction extends AccountAuthenticator {\n  public readonly functionInfo: string;\n\n  public readonly signingMessageDigest: Hex;\n\n  public readonly authenticator: Uint8Array;\n\n  /**\n   * DAA, which is extended of the AA module, requires an account identity\n   */\n  public readonly accountIdentity?: Uint8Array;\n\n  constructor(\n    functionInfo: string,\n    signingMessageDigest: HexInput,\n    authenticator: Uint8Array,\n    accountIdentity?: Uint8Array,\n  ) {\n    super();\n    if (!isValidFunctionInfo(functionInfo)) {\n      throw new Error(`Invalid function info ${functionInfo} passed into AccountAuthenticatorAbstraction`);\n    }\n    this.functionInfo = functionInfo;\n    this.authenticator = authenticator;\n    this.signingMessageDigest = Hex.fromHexInput(Hex.fromHexInput(signingMessageDigest).toUint8Array());\n    this.accountIdentity = accountIdentity;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.Abstraction);\n    const { moduleAddress, moduleName, functionName } = getFunctionParts(this.functionInfo as MoveFunctionId);\n    AccountAddress.fromString(moduleAddress).serialize(serializer);\n    serializer.serializeStr(moduleName);\n    serializer.serializeStr(functionName);\n    if (this.accountIdentity) {\n      serializer.serializeU32AsUleb128(AbstractionAuthDataVariant.DerivableV1);\n    } else {\n      serializer.serializeU32AsUleb128(AbstractionAuthDataVariant.V1);\n    }\n    serializer.serializeBytes(this.signingMessageDigest.toUint8Array());\n    if (this.accountIdentity) {\n      serializer.serializeBytes(this.authenticator);\n    } else {\n      serializer.serializeFixedBytes(this.authenticator);\n    }\n\n    if (this.accountIdentity) {\n      serializer.serializeBytes(this.accountIdentity);\n    }\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorAbstraction {\n    const moduleAddress = AccountAddress.deserialize(deserializer);\n    const moduleName = deserializer.deserializeStr();\n    const functionName = deserializer.deserializeStr();\n    const variant = deserializer.deserializeUleb128AsU32();\n    if (variant === AbstractionAuthDataVariant.V1) {\n      const signingMessageDigest = deserializer.deserializeBytes();\n      const authenticator = deserializer.deserializeFixedBytes(deserializer.remaining());\n      return new AccountAuthenticatorAbstraction(\n        `${moduleAddress}::${moduleName}::${functionName}`,\n        signingMessageDigest,\n        authenticator,\n      );\n    }\n    if (variant === AbstractionAuthDataVariant.DerivableV1) {\n      const signingMessageDigest = deserializer.deserializeBytes();\n      const abstractSignature = deserializer.deserializeBytes();\n\n      const abstractPublicKey = deserializer.deserializeBytes();\n      return new AccountAuthenticatorAbstraction(\n        `${moduleAddress}::${moduleName}::${functionName}`,\n        signingMessageDigest,\n        abstractSignature,\n        abstractPublicKey,\n      );\n    }\n    throw new Error(`Unknown variant index for AccountAuthenticatorAbstraction: ${variant}`);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file handles the generation of the signing message.\n * @group Implementation\n * @category Transactions\n */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { RAW_TRANSACTION_SALT, RAW_TRANSACTION_WITH_DATA_SALT } from \"../../utils/const\";\nimport { FeePayerRawTransaction, MultiAgentRawTransaction } from \"../instances\";\nimport { AnyRawTransaction, AnyRawTransactionInstance } from \"../types\";\nimport { Serializable } from \"../../bcs\";\n\n/**\n * Derives the appropriate raw transaction type based on the provided transaction details.\n * This function helps in identifying whether the transaction is a FeePayerRawTransaction,\n * MultiAgentRawTransaction, or a standard RawTransaction.\n *\n * @param transaction - An object representing an Aptos transaction, which may include:\n *   - feePayerAddress - The address of the fee payer (optional).\n *   - secondarySignerAddresses - An array of secondary signer addresses (optional).\n *   - rawTransaction - The raw transaction data.\n *\n * @returns FeePayerRawTransaction | MultiAgentRawTransaction | RawTransaction\n * @group Implementation\n * @category Transactions\n */\nexport function deriveTransactionType(transaction: AnyRawTransaction): AnyRawTransactionInstance {\n  if (transaction.feePayerAddress) {\n    return new FeePayerRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n  }\n  if (transaction.secondarySignerAddresses) {\n    return new MultiAgentRawTransaction(transaction.rawTransaction, transaction.secondarySignerAddresses);\n  }\n\n  return transaction.rawTransaction;\n}\n\n/**\n * Generates the 'signing message' form of a message to be signed.\n * This function combines a domain separator with the byte representation of the message to create a signing message.\n *\n * @param bytes - The byte representation of the message to be signed and sent to the chain.\n * @param domainSeparator - A domain separator that starts with 'APTOS::'.\n *\n * @returns The Uint8Array of the signing message.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSigningMessage(bytes: Uint8Array, domainSeparator: string): Uint8Array {\n  const hash = sha3Hash.create();\n\n  if (!domainSeparator.startsWith(\"APTOS::\")) {\n    throw new Error(`Domain separator needs to start with 'APTOS::'.  Provided - ${domainSeparator}`);\n  }\n\n  hash.update(domainSeparator);\n\n  const prefix = hash.digest();\n\n  const body = bytes;\n\n  const mergedArray = new Uint8Array(prefix.length + body.length);\n  mergedArray.set(prefix);\n  mergedArray.set(body, prefix.length);\n\n  return mergedArray;\n}\n\n/**\n * @deprecated\n * Use CryptoHashable instead by having your class implement it and call hash() to get the signing message.\n *\n * Generates the 'signing message' form of a serializable value by serializing it and using the constructor name as the domain\n * separator.\n *\n * @param serializable - An object that has a BCS serialized form.\n *\n * @returns The Uint8Array of the signing message.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSigningMessageForSerializable(serializable: Serializable): Uint8Array {\n  return generateSigningMessage(serializable.bcsToBytes(), `APTOS::${serializable.constructor.name}`);\n}\n\n/**\n * Generates the 'signing message' form of a transaction by deriving the type of transaction and applying the appropriate domain\n * separator based on the presence of a fee payer or secondary signers.\n *\n * @param transaction - A transaction that is to be signed, which can include a fee payer address or secondary signer addresses.\n *\n * @returns The Uint8Array of the signing message.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSigningMessageForTransaction(transaction: AnyRawTransaction): Uint8Array {\n  const rawTxn = deriveTransactionType(transaction);\n  if (transaction.feePayerAddress) {\n    return generateSigningMessage(rawTxn.bcsToBytes(), RAW_TRANSACTION_WITH_DATA_SALT);\n  }\n  if (transaction.secondarySignerAddresses) {\n    return generateSigningMessage(rawTxn.bcsToBytes(), RAW_TRANSACTION_WITH_DATA_SALT);\n  }\n  return generateSigningMessage(rawTxn.bcsToBytes(), RAW_TRANSACTION_SALT);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { MoveModuleId } from \"../../types\";\n\n/**\n * Represents a ModuleId that can be serialized and deserialized.\n * A ModuleId consists of a module address (e.g., \"0x1\") and a module name (e.g., \"coin\").\n * @group Implementation\n * @category Transactions\n */\nexport class ModuleId extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly name: Identifier;\n\n  /**\n   * Initializes a new instance of the module with the specified account address and name.\n   *\n   * @param address - The account address, e.g., \"0x1\".\n   * @param name - The module name under the specified address, e.g., \"coin\".\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(address: AccountAddress, name: Identifier) {\n    super();\n    this.address = address;\n    this.name = name;\n  }\n\n  /**\n   * Converts a string literal in the format \"account_address::module_name\" to a ModuleId.\n   * @param moduleId - A string literal representing the module identifier.\n   * @throws Error if the provided moduleId is not in the correct format.\n   * @returns ModuleId - The corresponding ModuleId object.\n   * @group Implementation\n   * @category Transactions\n   */\n  static fromStr(moduleId: MoveModuleId): ModuleId {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromString(parts[0]), new Identifier(parts[1]));\n  }\n\n  /**\n   * Serializes the address and name properties using the provided serializer.\n   * This function is essential for converting the object's data into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  /**\n   * Deserializes a ModuleId from the provided deserializer.\n   * This function retrieves the account address and identifier to construct a ModuleId instance.\n   *\n   * @param deserializer - The deserializer instance used to read the data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): ModuleId {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\nimport { TypeTagVariants } from \"../../types\";\n\n/**\n * Represents a type tag in the serialization framework, serving as a base class for various specific type tags.\n * This class provides methods for serialization and deserialization of type tags, as well as type checking methods\n * to determine the specific type of the tag at runtime.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class TypeTag extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserializes a StructTag from the provided deserializer.\n   * This function allows you to reconstruct a StructTag object from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializer.deserializeVector(TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n\n  static deserialize(deserializer: Deserializer): TypeTag {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TypeTagVariants.Bool:\n        return TypeTagBool.load(deserializer);\n      case TypeTagVariants.U8:\n        return TypeTagU8.load(deserializer);\n      case TypeTagVariants.U64:\n        return TypeTagU64.load(deserializer);\n      case TypeTagVariants.U128:\n        return TypeTagU128.load(deserializer);\n      case TypeTagVariants.Address:\n        return TypeTagAddress.load(deserializer);\n      case TypeTagVariants.Signer:\n        return TypeTagSigner.load(deserializer);\n      case TypeTagVariants.Vector:\n        return TypeTagVector.load(deserializer);\n      case TypeTagVariants.Struct:\n        return TypeTagStruct.load(deserializer);\n      case TypeTagVariants.U16:\n        return TypeTagU16.load(deserializer);\n      case TypeTagVariants.U32:\n        return TypeTagU32.load(deserializer);\n      case TypeTagVariants.U256:\n        return TypeTagU256.load(deserializer);\n      case TypeTagVariants.Generic:\n        // This is only used for ABI representation, and cannot actually be used as a type.\n        return TypeTagGeneric.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n\n  abstract toString(): string;\n\n  /**\n   * Determines if the current instance is of type TypeTagBool.\n   *\n   * @returns {boolean} True if the instance is a TypeTagBool, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isBool(): this is TypeTagBool {\n    return this instanceof TypeTagBool;\n  }\n\n  /**\n   * Determines if the current instance is of type TypeTagAddress.\n   *\n   * @returns {boolean} True if the instance is a TypeTagAddress, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isAddress(): this is TypeTagAddress {\n    return this instanceof TypeTagAddress;\n  }\n\n  /**\n   * Determines if the current instance is of type TypeTagGeneric.\n   *\n   * @returns {boolean} Returns true if the instance is a TypeTagGeneric, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isGeneric(): this is TypeTagGeneric {\n    return this instanceof TypeTagGeneric;\n  }\n\n  /**\n   * Determine if the current instance is a TypeTagSigner.\n   *\n   * @returns {boolean} Returns true if the instance is a TypeTagSigner, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isSigner(): this is TypeTagSigner {\n    return this instanceof TypeTagSigner;\n  }\n\n  /**\n   * Checks if the current instance is a vector type.\n   * This can help determine the specific type of data structure being used.\n   *\n   * @returns {boolean} True if the instance is of type TypeTagVector, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isVector(): this is TypeTagVector {\n    return this instanceof TypeTagVector;\n  }\n\n  /**\n   * Determines if the current instance is a structure type.\n   *\n   * @returns {boolean} True if the instance is of type TypeTagStruct, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isStruct(): this is TypeTagStruct {\n    return this instanceof TypeTagStruct;\n  }\n\n  /**\n   * Determines if the current instance is of type `TypeTagU8`.\n   *\n   * @returns {boolean} Returns true if the instance is of type `TypeTagU8`, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU8(): this is TypeTagU8 {\n    return this instanceof TypeTagU8;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU16.\n   *\n   * @returns {boolean} True if the instance is TypeTagU16, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU16(): this is TypeTagU16 {\n    return this instanceof TypeTagU16;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU32.\n   *\n   * @returns {boolean} Returns true if the instance is TypeTagU32, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU32(): this is TypeTagU32 {\n    return this instanceof TypeTagU32;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU64.\n   *\n   * @returns {boolean} True if the instance is a TypeTagU64, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU64(): this is TypeTagU64 {\n    return this instanceof TypeTagU64;\n  }\n\n  /**\n   * Determines if the current instance is of the TypeTagU128 type.\n   *\n   * @returns {boolean} True if the instance is of TypeTagU128, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU128(): this is TypeTagU128 {\n    return this instanceof TypeTagU128;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU256.\n   *\n   * @returns {boolean} Returns true if the instance is of type TypeTagU256, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU256(): this is TypeTagU256 {\n    return this instanceof TypeTagU256;\n  }\n\n  isPrimitive(): boolean {\n    return (\n      this instanceof TypeTagSigner ||\n      this instanceof TypeTagAddress ||\n      this instanceof TypeTagBool ||\n      this instanceof TypeTagU8 ||\n      this instanceof TypeTagU16 ||\n      this instanceof TypeTagU32 ||\n      this instanceof TypeTagU64 ||\n      this instanceof TypeTagU128 ||\n      this instanceof TypeTagU256\n    );\n  }\n}\n\n/**\n * Represents a boolean type tag in the type system.\n * This class extends the base TypeTag class and provides\n * methods for serialization and deserialization of the boolean\n * type tag.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagBool extends TypeTag {\n  /**\n   * Returns the string representation of the object.\n   *\n   * @returns {string} The string representation of the object.\n   * @group Implementation\n   * @category Transactions\n   */\n  toString(): string {\n    return \"bool\";\n  }\n\n  /**\n   * Serializes the current instance's properties into a provided serializer.\n   * This function ensures that the address, module name, name, and type arguments are properly serialized.\n   *\n   * @param serializer - The serializer instance used to serialize the properties.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Bool);\n  }\n\n  /**\n   * Deserializes a StructTag and returns a new TypeTagStruct instance.\n   *\n   * @param _deserializer - The deserializer used to read the StructTag data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(_deserializer: Deserializer): TypeTagBool {\n    return new TypeTagBool();\n  }\n}\n\n/**\n * Represents a type tag for an 8-bit unsigned integer (u8).\n * This class extends the base TypeTag class and provides methods\n * for serialization and deserialization specific to the u8 type.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU8 extends TypeTag {\n  toString(): string {\n    return \"u8\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U8);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU8 {\n    return new TypeTagU8();\n  }\n}\n\n/**\n * Represents a type tag for unsigned 16-bit integers (u16).\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU16 extends TypeTag {\n  toString(): string {\n    return \"u16\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U16);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU16 {\n    return new TypeTagU16();\n  }\n}\n\n/**\n * Represents a type tag for a 32-bit unsigned integer (u32).\n * This class extends the base TypeTag class and provides methods for serialization\n * and deserialization specific to the u32 type.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU32 extends TypeTag {\n  toString(): string {\n    return \"u32\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U32);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU32 {\n    return new TypeTagU32();\n  }\n}\n\n/**\n * Represents a type tag for 64-bit unsigned integers (u64).\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU64 extends TypeTag {\n  toString(): string {\n    return \"u64\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U64);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU64 {\n    return new TypeTagU64();\n  }\n}\n\n/**\n * Represents a type tag for the u128 data type.\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU128 extends TypeTag {\n  toString(): string {\n    return \"u128\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U128);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU128 {\n    return new TypeTagU128();\n  }\n}\n\n/**\n * Represents a type tag for the U256 data type.\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU256 extends TypeTag {\n  toString(): string {\n    return \"u256\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U256);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU256 {\n    return new TypeTagU256();\n  }\n}\n\n/**\n * Represents a type tag for an address in the system.\n * This class extends the TypeTag class and provides functionality\n * to serialize the address type and load it from a deserializer.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagAddress extends TypeTag {\n  toString(): string {\n    return \"address\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Address);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagAddress {\n    return new TypeTagAddress();\n  }\n}\n\n/**\n * Represents a type tag for a signer in the system.\n * This class extends the base TypeTag and provides specific functionality\n * related to the signer type.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagSigner extends TypeTag {\n  toString(): string {\n    return \"signer\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Signer);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagSigner {\n    return new TypeTagSigner();\n  }\n}\n\n/**\n * Represents a reference to a type tag in the type system.\n * This class extends the TypeTag class and provides functionality\n * to serialize and deserialize type tag references.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagReference extends TypeTag {\n  toString(): `&${string}` {\n    return `&${this.value.toString()}`;\n  }\n\n  /**\n   * Initializes a new instance of the class with the specified parameters.\n   *\n   * @param value - The TypeTag to reference.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Reference);\n  }\n\n  static load(deserializer: Deserializer): TypeTagReference {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagReference(value);\n  }\n}\n\n/**\n * Represents a generic type tag used for type parameters in entry functions.\n * Generics are not serialized into a real type, so they cannot be used as a type directly.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagGeneric extends TypeTag {\n  toString(): `T${number}` {\n    return `T${this.value}`;\n  }\n\n  constructor(public readonly value: number) {\n    super();\n    if (value < 0) throw new Error(\"Generic type parameter index cannot be negative\");\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Generic);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer: Deserializer): TypeTagGeneric {\n    const value = deserializer.deserializeU32();\n    return new TypeTagGeneric(value);\n  }\n}\n\n/**\n * Represents a vector type tag, which encapsulates a single type tag value.\n * This class extends the base TypeTag class and provides methods for serialization,\n * deserialization, and string representation of the vector type tag.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagVector extends TypeTag {\n  toString(): `vector<${string}>` {\n    return `vector<${this.value.toString()}>`;\n  }\n\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  /**\n   * Creates a new TypeTagVector instance with a TypeTagU8 type.\n   *\n   * @returns {TypeTagVector} A new TypeTagVector initialized with TypeTagU8.\n   * @group Implementation\n   * @category Transactions\n   */\n  static u8(): TypeTagVector {\n    return new TypeTagVector(new TypeTagU8());\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Vector);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagVector {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n}\n\n/**\n * Represents a structured type tag in the system, extending the base TypeTag class.\n * This class encapsulates information about a specific structure, including its address,\n * module name, and type arguments, and provides methods for serialization and type checking.\n *\n * @param value - The StructTag instance containing the details of the structured type.\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagStruct extends TypeTag {\n  toString(): `0x${string}::${string}::${string}` {\n    // Collect type args and add it if there are any\n    let typePredicate = \"\";\n    if (this.value.typeArgs.length > 0) {\n      typePredicate = `<${this.value.typeArgs.map((typeArg) => typeArg.toString()).join(\", \")}>`;\n    }\n\n    return `${this.value.address.toString()}::${this.value.moduleName.identifier}::${\n      this.value.name.identifier\n    }${typePredicate}`;\n  }\n\n  constructor(public readonly value: StructTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Struct);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagStruct {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  /**\n   * Determines if the provided address, module name, and struct name match the current type tag.\n   *\n   * @param address - The account address to compare against the type tag.\n   * @param moduleName - The name of the module to compare against the type tag.\n   * @param structName - The name of the struct to compare against the type tag.\n   * @returns True if the address, module name, and struct name match the type tag; otherwise, false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isTypeTag(address: AccountAddress, moduleName: string, structName: string): boolean {\n    return (\n      this.value.moduleName.identifier === moduleName &&\n      this.value.name.identifier === structName &&\n      this.value.address.equals(address)\n    );\n  }\n\n  /**\n   * Checks if the provided value is of type string.\n   * This function can help ensure that the data being processed is in the correct format before further operations.\n   *\n   * @returns {boolean} Returns true if the value is a string, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isString(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"string\", \"String\");\n  }\n\n  /**\n   * Checks if the specified account address is of type \"option\".\n   *\n   * @returns {boolean} Returns true if the account address is an option type, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isOption(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"option\", \"Option\");\n  }\n\n  /**\n   * Checks if the provided value is of type 'object'.\n   * This function helps determine if a value can be treated as an object type in the context of the SDK.\n   *\n   * @returns {boolean} Returns true if the value is an object, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isObject(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"object\", \"Object\");\n  }\n\n  /**\n   * Checks if the provided value is a 'DelegationKey' for permissioned signers.\n   *\n   * @returns {boolean} Returns true if the value is a DelegationKey, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isDelegationKey(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"permissioned_delegation\", \"DelegationKey\");\n  }\n\n  /**\n   * Checks if the provided value is of type `RateLimiter`.\n   *\n   * @returns {boolean} Returns true if the value is a RateLimiter, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isRateLimiter(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"rate_limiter\", \"RateLimiter\");\n  }\n}\n\n/**\n * Represents a structured tag that includes an address, module name,\n * name, and type arguments. This class is used to define and manage\n * structured data types within the SDK.\n *\n * @property {AccountAddress} address - The address associated with the struct tag.\n * @property {Identifier} moduleName - The name of the module that contains the struct.\n * @property {Identifier} name - The name of the struct.\n * @property {Array<TypeTag>} typeArgs - An array of type arguments associated with the struct.\n * @group Implementation\n * @category Transactions\n */\nexport class StructTag extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly moduleName: Identifier;\n\n  public readonly name: Identifier;\n\n  public readonly typeArgs: Array<TypeTag>;\n\n  constructor(address: AccountAddress, module_name: Identifier, name: Identifier, type_args: Array<TypeTag>) {\n    super();\n    this.address = address;\n    this.moduleName = module_name;\n    this.name = name;\n    this.typeArgs = type_args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.address);\n    serializer.serialize(this.moduleName);\n    serializer.serialize(this.name);\n    serializer.serializeVector(this.typeArgs);\n  }\n\n  static deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializer.deserializeVector(TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n}\n\n/**\n * Retrieves the StructTag for the AptosCoin, which represents the Aptos Coin in the Aptos blockchain.\n *\n * @returns {StructTag} The StructTag for the AptosCoin.\n * @group Implementation\n * @category Transactions\n */\nexport function aptosCoinStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"aptos_coin\"), new Identifier(\"AptosCoin\"), []);\n}\n\n/**\n * Returns a new StructTag representing a string type.\n *\n * @returns {StructTag} A StructTag for the string type.\n * @group Implementation\n * @category Transactions\n */\nexport function stringStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"string\"), new Identifier(\"String\"), []);\n}\n\n/**\n * Creates a new StructTag for the Option type with the specified type argument.\n * This can help in defining a specific instance of an Option type in your application.\n *\n * @param typeArg - The type tag that specifies the type of the value contained in the Option.\n * @group Implementation\n * @category Transactions\n */\nexport function optionStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"option\"), new Identifier(\"Option\"), [typeArg]);\n}\n\n/**\n * Creates a new StructTag for the Object type with the specified type argument.\n * This function helps in defining a structured representation of an Object with a specific type.\n *\n * @param typeArg - The type tag that specifies the type of the Object.\n * @group Implementation\n * @category Transactions\n */\nexport function objectStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"object\"), new Identifier(\"Object\"), [typeArg]);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { EntryFunctionBytes } from \"../../bcs/serializable/entryFunctionBytes\";\nimport { Bool, U128, U16, U256, U32, U64, U8 } from \"../../bcs/serializable/movePrimitives\";\nimport { MoveVector, Serialized } from \"../../bcs/serializable/moveStructs\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { ModuleId } from \"./moduleId\";\nimport type { EntryFunctionArgument, ScriptFunctionArgument, TransactionArgument } from \"./transactionArgument\";\nimport { MoveModuleId, ScriptTransactionArgumentVariants, TransactionPayloadVariants } from \"../../types\";\nimport { TypeTag } from \"../typeTag\";\n\n/**\n * Deserialize a Script Transaction Argument.\n * This function retrieves and deserializes various types of script transaction arguments based on the provided deserializer.\n *\n * @param deserializer - The deserializer used to read the script transaction argument.\n * @returns The deserialized script transaction argument.\n * @throws Error if the variant index is unknown.\n * @group Implementation\n * @category Transactions\n */\nexport function deserializeFromScriptArgument(deserializer: Deserializer): TransactionArgument {\n  // index enum variant\n  const index = deserializer.deserializeUleb128AsU32();\n  switch (index) {\n    case ScriptTransactionArgumentVariants.U8:\n      return U8.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U64:\n      return U64.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U128:\n      return U128.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.Address:\n      return AccountAddress.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U8Vector:\n      return MoveVector.deserialize(deserializer, U8);\n    case ScriptTransactionArgumentVariants.Bool:\n      return Bool.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U16:\n      return U16.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U32:\n      return U32.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U256:\n      return U256.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.Serialized:\n      return Serialized.deserialize(deserializer);\n    default:\n      throw new Error(`Unknown variant index for ScriptTransactionArgument: ${index}`);\n  }\n}\n\n/**\n * Represents a supported Transaction Payload that can be serialized and deserialized.\n *\n * This class serves as a base for different types of transaction payloads, allowing for\n * their serialization into a format suitable for transmission and deserialization back\n * into their original form.\n * @group Implementation\n * @category Transactions\n */\nexport abstract class TransactionPayload extends Serializable {\n  /**\n   * Serialize a Transaction Payload\n   * @group Implementation\n   * @category Transactions\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Transaction Payload\n   * @group Implementation\n   * @category Transactions\n   */\n\n  /**\n   * Deserializes a multisig transaction payload from the provided deserializer.\n   * This function enables the reconstruction of a MultiSigTransactionPayload object from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): TransactionPayload {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionPayloadVariants.Script:\n        return TransactionPayloadScript.load(deserializer);\n      case TransactionPayloadVariants.EntryFunction:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      case TransactionPayloadVariants.Multisig:\n        return TransactionPayloadMultiSig.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\n/**\n * Represents a transaction payload script that can be serialized and deserialized.\n *\n * This class encapsulates a script that defines the logic for a transaction payload.\n *\n * @extends TransactionPayload\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionPayloadScript extends TransactionPayload {\n  public readonly script: Script;\n\n  /**\n   * Initializes a multi-sig account transaction with the provided payload.\n   *\n   * @param script - The payload of the multi-sig transaction. This can only be an EntryFunction for now, but Script might be\n   * supported in the future.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(script: Script) {\n    super();\n    this.script = script;\n  }\n\n  /**\n   * Serializes the transaction payload, enabling future support for multiple types of inner transaction payloads.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Script);\n    this.script.serialize(serializer);\n  }\n\n  /**\n   * Loads a MultiSig transaction payload from the provided deserializer.\n   * This function helps in reconstructing a MultiSig transaction payload from its serialized form.\n   *\n   * @param deserializer - The deserializer used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): TransactionPayloadScript {\n    const script = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(script);\n  }\n}\n\n/**\n * Represents a transaction payload entry function that can be serialized and deserialized.\n *\n * @extends TransactionPayload\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionPayloadEntryFunction extends TransactionPayload {\n  public readonly entryFunction: EntryFunction;\n\n  constructor(entryFunction: EntryFunction) {\n    super();\n    this.entryFunction = entryFunction;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.EntryFunction);\n    this.entryFunction.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadEntryFunction {\n    const entryFunction = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(entryFunction);\n  }\n}\n\n/**\n * Represents a multi-signature transaction payload that can be serialized and deserialized.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionPayloadMultiSig extends TransactionPayload {\n  public readonly multiSig: MultiSig;\n\n  constructor(multiSig: MultiSig) {\n    super();\n    this.multiSig = multiSig;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Multisig);\n    this.multiSig.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadMultiSig {\n    const value = MultiSig.deserialize(deserializer);\n    return new TransactionPayloadMultiSig(value);\n  }\n}\n\n/**\n * Represents an entry function that can be serialized and deserialized.\n * This class encapsulates the details required to invoke a function within a module,\n * including the module name, function name, type arguments, and function arguments.\n *\n * @param module_name - Fully qualified module name in the format \"account_address::module_name\" (e.g., \"0x1::coin\").\n * @param function_name - The name of the function (e.g., \"transfer\").\n * @param type_args - Type arguments required by the Move function.\n * @param args - Arguments to the Move function.\n * @group Implementation\n * @category Transactions\n */\nexport class EntryFunction {\n  public readonly module_name: ModuleId;\n\n  public readonly function_name: Identifier;\n\n  public readonly type_args: Array<TypeTag>;\n\n  public readonly args: Array<EntryFunctionArgument>;\n\n  /**\n   * Contains the payload to run a function within a module.\n   * @param module_name Fully qualified module name in format \"account_address::module_name\" e.g. \"0x1::coin\"\n   * @param function_name The function name. e.g \"transfer\"\n   * @param type_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @param args arguments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    module_name: ModuleId,\n    function_name: Identifier,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ) {\n    this.module_name = module_name;\n    this.function_name = function_name;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  /**\n   * Build an EntryFunction payload from raw primitive values.\n   *\n   * @param module_id - Fully qualified module name in the format \"AccountAddress::module_id\", e.g., \"0x1::coin\".\n   * @param function_name - The name of the function to be called.\n   * @param type_args - Type arguments that the Move function requires.\n   * @param args - Arguments to the Move function.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   *\n   * A coin transfer function has three arguments \"from\", \"to\", and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   *\n   * @returns EntryFunction\n   * @group Implementation\n   * @category Transactions\n   */\n  static build(\n    module_id: MoveModuleId,\n    function_name: string,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ): EntryFunction {\n    return new EntryFunction(ModuleId.fromStr(module_id), new Identifier(function_name), type_args, args);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: EntryFunctionArgument) => {\n      item.serializeForEntryFunction(serializer);\n    });\n  }\n\n  /**\n   * Deserializes an entry function payload with the arguments represented as EntryFunctionBytes instances.\n   * @see EntryFunctionBytes\n   *\n   * NOTE: When you deserialize an EntryFunction payload with this method, the entry function\n   * arguments are populated into the deserialized instance as type-agnostic, raw fixed bytes\n   * in the form of the EntryFunctionBytes class.\n   *\n   * In order to correctly deserialize these arguments as their actual type representations, you\n   * must know the types of the arguments beforehand and deserialize them yourself individually.\n   *\n   * One way you could achieve this is by using the ABIs for an entry function and deserializing each\n   * argument as its given, corresponding type.\n   *\n   * @param deserializer\n   * @returns A deserialized EntryFunction payload for a transaction.\n   *\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): EntryFunction {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const type_args = deserializer.deserializeVector(TypeTag);\n\n    const length = deserializer.deserializeUleb128AsU32();\n    const args: Array<EntryFunctionArgument> = new Array<EntryFunctionBytes>();\n\n    for (let i = 0; i < length; i += 1) {\n      const fixedBytesLength = deserializer.deserializeUleb128AsU32();\n      const fixedBytes = EntryFunctionBytes.deserialize(deserializer, fixedBytesLength);\n      args.push(fixedBytes);\n    }\n\n    return new EntryFunction(module_name, function_name, type_args, args);\n  }\n}\n\n/**\n * Represents a Script that can be serialized and deserialized.\n * Scripts contain the Move bytecode payload that can be submitted to the Aptos chain for execution.\n * @group Implementation\n * @category Transactions\n */\nexport class Script {\n  /**\n   * The move module bytecode\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly bytecode: Uint8Array;\n\n  /**\n   * The type arguments that the bytecode function requires.\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly type_args: Array<TypeTag>;\n\n  /**\n   * The arguments that the bytecode function requires.\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly args: Array<ScriptFunctionArgument>;\n\n  /**\n   * Scripts contain the Move bytecodes payload that can be submitted to Aptos chain for execution.\n   *\n   * @param bytecode The move module bytecode\n   * @param type_args The type arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @param args The arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(bytecode: Uint8Array, type_args: Array<TypeTag>, args: Array<ScriptFunctionArgument>) {\n    this.bytecode = bytecode;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.bytecode);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: ScriptFunctionArgument) => {\n      item.serializeForScriptFunction(serializer);\n    });\n  }\n\n  static deserialize(deserializer: Deserializer): Script {\n    const bytecode = deserializer.deserializeBytes();\n    const type_args = deserializer.deserializeVector(TypeTag);\n    const length = deserializer.deserializeUleb128AsU32();\n    const args = new Array<ScriptFunctionArgument>();\n    for (let i = 0; i < length; i += 1) {\n      // Note that we deserialize directly to the Move value, not its Script argument representation.\n      // We are abstracting away the Script argument representation because knowing about it is\n      // functionally useless.\n      const scriptArgument = deserializeFromScriptArgument(deserializer);\n      args.push(scriptArgument);\n    }\n    return new Script(bytecode, type_args, args);\n  }\n}\n\n/**\n * Represents a MultiSig account that can be serialized and deserialized.\n *\n * This class encapsulates the functionality to manage multi-signature transactions, including the address of the\n * multi-sig account and the associated transaction payload.\n * @group Implementation\n * @category Transactions\n */\nexport class MultiSig {\n  public readonly multisig_address: AccountAddress;\n\n  public readonly transaction_payload?: MultiSigTransactionPayload;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param multisig_address The multi-sig account address the transaction will be executed as.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction. This is optional when executing a multi-sig\n   *  transaction whose payload is already stored on chain.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(multisig_address: AccountAddress, transaction_payload?: MultiSigTransactionPayload) {\n    this.multisig_address = multisig_address;\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.multisig_address.serialize(serializer);\n    // Options are encoded with an extra u8 field before the value - 0x0 is none and 0x1 is present.\n    // We use serializeBool below to create this prefix value.\n    if (this.transaction_payload === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.transaction_payload.serialize(serializer);\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSig {\n    const multisig_address = AccountAddress.deserialize(deserializer);\n    const payloadPresent = deserializer.deserializeBool();\n    let transaction_payload;\n    if (payloadPresent) {\n      transaction_payload = MultiSigTransactionPayload.deserialize(deserializer);\n    }\n    return new MultiSig(multisig_address, transaction_payload);\n  }\n}\n\n/**\n * Represents a multi-signature transaction payload that can be serialized and deserialized.\n * This class is designed to encapsulate the transaction payload for multi-sig account transactions\n * as defined in the `multisig_account.move` module. Future enhancements may allow support for script\n * payloads as the `multisig_account.move` module evolves.\n * @group Implementation\n * @category Transactions\n */\nexport class MultiSigTransactionPayload extends Serializable {\n  public readonly transaction_payload: EntryFunction;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction.\n   * This can only be EntryFunction for now but,\n   * Script might be supported in the future.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(transaction_payload: EntryFunction) {\n    super();\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    /**\n     * We can support multiple types of inner transaction payload in the future.\n     * For now, it's only EntryFunction but if we support more types,\n     * we need to serialize with the right enum values here\n     * @group Implementation\n     * @category Transactions\n     */\n    serializer.serializeU32AsUleb128(0);\n    this.transaction_payload.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSigTransactionPayload {\n    // TODO: Support other types of payload beside EntryFunction.\n    // This is the enum value indicating which type of payload the multisig tx contains.\n    deserializer.deserializeUleb128AsU32();\n    return new MultiSigTransactionPayload(EntryFunction.deserialize(deserializer));\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { ChainId } from \"./chainId\";\nimport { AccountAddress } from \"../../core\";\nimport { TransactionPayload } from \"./transactionPayload\";\nimport { TransactionVariants } from \"../../types\";\n\n/**\n * Represents a raw transaction that can be serialized and deserialized.\n * Raw transactions contain the metadata and payloads that can be submitted to the Aptos chain for execution.\n * They must be signed before the Aptos chain can execute them.\n * @group Implementation\n * @category Transactions\n */\nexport class RawTransaction extends Serializable {\n  public readonly sender: AccountAddress;\n\n  public readonly sequence_number: bigint;\n\n  public readonly payload: TransactionPayload;\n\n  public readonly max_gas_amount: bigint;\n\n  public readonly gas_unit_price: bigint;\n\n  public readonly expiration_timestamp_secs: bigint;\n\n  public readonly chain_id: ChainId;\n\n  /**\n   * RawTransactions contain the metadata and payloads that can be submitted to Aptos chain for execution.\n   * RawTransactions must be signed before Aptos chain can execute them.\n   *\n   * @param sender The sender Account Address\n   * @param sequence_number Sequence number of this transaction. This must match the sequence number stored in\n   *   the sender's account at the time the transaction executes.\n   * @param payload Instructions for the Aptos Blockchain, including publishing a module,\n   *   execute an entry function or execute a script payload.\n   * @param max_gas_amount Maximum total gas to spend for this transaction. The account must have more\n   *   than this gas or the transaction will be discarded during validation.\n   * @param gas_unit_price Price to be paid per gas unit.\n   * @param expiration_timestamp_secs The blockchain timestamp at which the blockchain would discard this transaction.\n   * @param chain_id The chain ID of the blockchain that this transaction is intended to be run on.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    sender: AccountAddress,\n    sequence_number: bigint,\n    payload: TransactionPayload,\n    max_gas_amount: bigint,\n    gas_unit_price: bigint,\n    expiration_timestamp_secs: bigint,\n    chain_id: ChainId,\n  ) {\n    super();\n    this.sender = sender;\n    this.sequence_number = sequence_number;\n    this.payload = payload;\n    this.max_gas_amount = max_gas_amount;\n    this.gas_unit_price = gas_unit_price;\n    this.expiration_timestamp_secs = expiration_timestamp_secs;\n    this.chain_id = chain_id;\n  }\n\n  /**\n   * Serializes the transaction data, including the fee payer transaction type, raw transaction, secondary signer addresses,\n   * and fee payer address.\n   * This function is essential for preparing the transaction for transmission or storage in a serialized format.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  /**\n   * Deserialize a Raw Transaction With Data.\n   * This function retrieves the appropriate raw transaction based on the variant index provided by the deserializer.\n   *\n   * @param deserializer - An instance of the Deserializer used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): RawTransaction {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(\n      sender,\n      sequence_number,\n      payload,\n      max_gas_amount,\n      gas_unit_price,\n      expiration_timestamp_secs,\n      chain_id,\n    );\n  }\n}\n\n/**\n * Represents a raw transaction with associated data that can be serialized and deserialized.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class RawTransactionWithData extends Serializable {\n  /**\n   * Serialize a Raw Transaction With Data\n   * @group Implementation\n   * @category Transactions\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Raw Transaction With Data\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): RawTransactionWithData {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionVariants.MultiAgentTransaction:\n        return MultiAgentRawTransaction.load(deserializer);\n      case TransactionVariants.FeePayerTransaction:\n        return FeePayerRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n}\n\n/**\n * Represents a multi-agent transaction that can be serialized and deserialized.\n *\n * @extends RawTransactionWithData\n * @group Implementation\n * @category Transactions\n */\nexport class MultiAgentRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  constructor(raw_txn: RawTransaction, secondary_signer_addresses: Array<AccountAddress>) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.MultiAgentTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n  }\n\n  /**\n   * Deserializes a Fee Payer Raw Transaction from the provided deserializer.\n   * This function allows you to reconstruct a Fee Payer Raw Transaction object, which includes the raw transaction data,\n   * secondary signer addresses, and the fee payer address.\n   *\n   * @param deserializer - The deserializer used to read the raw transaction data.\n   * @returns A FeePayerRawTransaction object constructed from the deserialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): MultiAgentRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n}\n\n/**\n * Represents a Fee Payer Transaction that can be serialized and deserialized.\n * @group Implementation\n * @category Transactions\n */\nexport class FeePayerRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction - optional and can be empty\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  /**\n   * The fee payer account address\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly fee_payer_address: AccountAddress;\n\n  constructor(\n    raw_txn: RawTransaction,\n    secondary_signer_addresses: Array<AccountAddress>,\n    fee_payer_address: AccountAddress,\n  ) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.fee_payer_address = fee_payer_address;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.FeePayerTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n    this.fee_payer_address.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): FeePayerRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n    const feePayerAddress = AccountAddress.deserialize(deserializer);\n\n    return new FeePayerRawTransaction(rawTxn, secondarySignerAddresses, feePayerAddress);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { AccountAuthenticator } from \"./account\";\nimport { Deserializer, Serializable, Serializer } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { TransactionAuthenticatorVariant } from \"../../types\";\n\n/**\n * Represents an abstract base class for transaction authenticators.\n * This class provides methods for serializing and deserializing different types of transaction authenticators.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class TransactionAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserializes a TransactionAuthenticator from the provided deserializer.\n   * This function helps in reconstructing the TransactionAuthenticator based on the variant index found in the serialized data.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): TransactionAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionAuthenticatorVariant.Ed25519:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiEd25519:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiAgent:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      case TransactionAuthenticatorVariant.FeePayer:\n        return TransactionAuthenticatorFeePayer.load(deserializer);\n      case TransactionAuthenticatorVariant.SingleSender:\n        return TransactionAuthenticatorSingleSender.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n\n  isEd25519(): this is TransactionAuthenticatorEd25519 {\n    return this instanceof TransactionAuthenticatorEd25519;\n  }\n\n  isMultiEd25519(): this is TransactionAuthenticatorMultiEd25519 {\n    return this instanceof TransactionAuthenticatorMultiEd25519;\n  }\n\n  isMultiAgent(): this is TransactionAuthenticatorMultiAgent {\n    return this instanceof TransactionAuthenticatorMultiAgent;\n  }\n\n  isFeePayer(): this is TransactionAuthenticatorFeePayer {\n    return this instanceof TransactionAuthenticatorFeePayer;\n  }\n\n  isSingleSender(): this is TransactionAuthenticatorSingleSender {\n    return this instanceof TransactionAuthenticatorSingleSender;\n  }\n}\n\n/**\n * Represents a transaction authenticator using Ed25519 for a single signer transaction.\n * This class encapsulates the client's public key and the Ed25519 signature of a raw transaction.\n *\n * @param public_key - The client's public key.\n * @param signature - The Ed25519 signature of a raw transaction.\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n * for details about generating a signature.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  /**\n   * Creates an instance of the class with the specified account authenticator.\n   *\n   * @param public_key - The Ed25519PublicKey that will be used for authentication.\n   * @param signature - The Ed25519Signature that will be used for authentication.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  /**\n   * Serializes the transaction authenticator by encoding the sender information.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  /**\n   * Loads a TransactionAuthenticatorSingleSender instance from the provided deserializer.\n   * This function helps in deserializing the sender information to create a transaction authenticator.\n   *\n   * @param deserializer - The deserializer used to extract the sender data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): TransactionAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents a transaction authenticator for multi-signature transactions using Ed25519.\n * This class is used to validate transactions that require multiple signatures from different signers.\n *\n * @param public_key - The public key of the client involved in the transaction.\n * @param signature - The multi-signature of the raw transaction.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents a transaction authenticator for a multi-agent transaction.\n *\n * This class manages the authentication process involving a primary sender and multiple secondary signers.\n *\n * @param sender - The authenticator for the sender account.\n * @param secondary_signer_addresses - An array of addresses for the secondary signers.\n * @param secondary_signers - An array of authenticators for the secondary signer accounts.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiAgent);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n}\n\n/**\n * Represents a transaction authenticator specifically for fee payer transactions.\n * It encapsulates the sender's account authenticator, addresses of secondary signers,\n * their respective authenticators, and the fee payer's account information.\n *\n * @param sender - The authenticator for the sender's account.\n * @param secondary_signer_addresses - An array of addresses for secondary signers.\n * @param secondary_signers - An array of authenticators for secondary signers' accounts.\n * @param fee_payer - An object containing the fee payer's account address and authenticator.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorFeePayer extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  public readonly fee_payer: {\n    address: AccountAddress;\n    authenticator: AccountAuthenticator;\n  };\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n    fee_payer: { address: AccountAddress; authenticator: AccountAuthenticator },\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n    this.fee_payer = fee_payer;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.FeePayer);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n    this.fee_payer.address.serialize(serializer);\n    this.fee_payer.authenticator.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    const address = AccountAddress.deserialize(deserializer);\n    const authenticator = AccountAuthenticator.deserialize(deserializer);\n    const fee_payer = { address, authenticator };\n    return new TransactionAuthenticatorFeePayer(sender, secondary_signer_addresses, secondary_signers, fee_payer);\n  }\n}\n\n/**\n * Represents a single sender authenticator for transactions that require a single signer.\n * This class is responsible for managing the authentication of a transaction initiated by a single sender.\n *\n * @param sender - An instance of AccountAuthenticator that represents the account of the sender.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorSingleSender extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  constructor(sender: AccountAuthenticator) {\n    super();\n    this.sender = sender;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.SingleSender);\n    this.sender.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorSingleSender {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    return new TransactionAuthenticatorSingleSender(sender);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { TransactionAuthenticator } from \"../authenticator/transaction\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { RawTransaction } from \"./rawTransaction\";\n\n/**\n * Represents a signed transaction that includes a raw transaction and an authenticator.\n * The authenticator contains a client's public key and the signature of the raw transaction.\n *\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n * @param raw_txn - The raw transaction to be signed.\n * @param authenticator - Contains a client's public key and the signature of the raw transaction.\n * Authenticator can have three variations: single signature, multi-signature, and multi-agent.\n * @see {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs} for details.\n * @group Implementation\n * @category Transactions\n */\nexport class SignedTransaction extends Serializable {\n  public readonly raw_txn: RawTransaction;\n\n  public readonly authenticator: TransactionAuthenticator;\n\n  /**\n   * Represents a signed transaction that includes a raw transaction and an authenticator.\n   * The authenticator contains a client's public key and the signature of the raw transaction,\n   * which can be of three types: single signature, multi-signature, and multi-agent.\n   *\n   * @param raw_txn The raw transaction to be signed.\n   * @param authenticator Contains a client's public key and the signature of the raw transaction. The authenticator has 3\n   * flavors: single signature, multi-signature and multi-agent.\n   * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n   * @see {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs} for details.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(raw_txn: RawTransaction, authenticator: TransactionAuthenticator) {\n    super();\n    this.raw_txn = raw_txn;\n    this.authenticator = authenticator;\n  }\n\n  /**\n   * Serializes the raw transaction and its authenticator using the provided serializer.\n   * This function is essential for preparing the transaction data for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction and authenticator.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  /**\n   * Deserializes a signed transaction from the provided deserializer.\n   * This function allows you to reconstruct a SignedTransaction object from its serialized form, enabling further processing or validation.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): SignedTransaction {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { RawTransaction } from \"./rawTransaction\";\n\n/**\n * Represents a simple transaction type that can be submitted to the Aptos chain for execution.\n *\n * This transaction type is designed for a single signer and includes metadata such as the Raw Transaction\n * and an optional sponsor Account Address to cover gas fees.\n *\n * @param rawTransaction - The Raw Transaction.\n * @param feePayerAddress - The optional sponsor Account Address.\n * @group Implementation\n * @category Transactions\n */\nexport class SimpleTransaction extends Serializable {\n  public rawTransaction: RawTransaction;\n\n  public feePayerAddress?: AccountAddress | undefined;\n\n  // We don't really need it, we add it for type checking we do\n  // throughout the SDK\n  public readonly secondarySignerAddresses: undefined;\n\n  /**\n   * SimpleTransaction represents a transaction signed by a single account that\n   * can be submitted to the Aptos chain for execution.\n   *\n   * @param rawTransaction The Raw Transaction.\n   * @param feePayerAddress The optional sponsor Account Address to pay the gas fees.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(rawTransaction: RawTransaction, feePayerAddress?: AccountAddress) {\n    super();\n    this.rawTransaction = rawTransaction;\n    this.feePayerAddress = feePayerAddress;\n  }\n\n  /**\n   * Serializes the transaction data using the provided serializer.\n   * This function ensures that the raw transaction and fee payer address are properly serialized for further processing.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.rawTransaction.serialize(serializer);\n\n    if (this.feePayerAddress === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.feePayerAddress.serialize(serializer);\n    }\n  }\n\n  /**\n   * Deserializes a SimpleTransaction from the given deserializer.\n   * This function helps in reconstructing a SimpleTransaction object from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): SimpleTransaction {\n    const rawTransaction = RawTransaction.deserialize(deserializer);\n    const feePayerPresent = deserializer.deserializeBool();\n    let feePayerAddress;\n    if (feePayerPresent) {\n      feePayerAddress = AccountAddress.deserialize(deserializer);\n    }\n\n    return new SimpleTransaction(rawTransaction, feePayerAddress);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { RawTransaction } from \"./rawTransaction\";\n\n/**\n * Represents a multi-agent transaction that can be serialized and deserialized.\n * This transaction includes a raw transaction, optional fee payer address, and multiple secondary signer addresses.\n *\n * @param rawTransaction The raw transaction to be executed.\n * @param secondarySignerAddresses An array of secondary signer addresses involved in the transaction.\n * @param feePayerAddress An optional account address that sponsors the transaction's gas fees.\n * @group Implementation\n * @category Transactions\n */\nexport class MultiAgentTransaction extends Serializable {\n  public rawTransaction: RawTransaction;\n\n  public feePayerAddress?: AccountAddress | undefined;\n\n  public secondarySignerAddresses: AccountAddress[];\n\n  /**\n   * Represents a MultiAgentTransaction that can be submitted to the Aptos chain for execution.\n   * This class encapsulates the raw transaction data, the secondary signer addresses, and an optional fee payer address.\n   *\n   * @param rawTransaction The raw transaction data.\n   * @param secondarySignerAddresses An array of secondary signer addresses.\n   * @param feePayerAddress An optional account address that sponsors the gas fees.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    rawTransaction: RawTransaction,\n    secondarySignerAddresses: AccountAddress[],\n    feePayerAddress?: AccountAddress,\n  ) {\n    super();\n    this.rawTransaction = rawTransaction;\n    this.feePayerAddress = feePayerAddress;\n    this.secondarySignerAddresses = secondarySignerAddresses;\n  }\n\n  /**\n   * Serializes the transaction data, including the raw transaction, secondary signer addresses, and fee payer address.\n   * This function is essential for preparing the transaction for transmission or storage in a serialized format.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.rawTransaction.serialize(serializer);\n\n    serializer.serializeVector<AccountAddress>(this.secondarySignerAddresses);\n\n    if (this.feePayerAddress === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.feePayerAddress.serialize(serializer);\n    }\n  }\n\n  /**\n   * Deserializes a MultiAgentTransaction from the provided deserializer.\n   * This function allows you to reconstruct a MultiAgentTransaction object from its serialized form, including any secondary\n   * signer addresses and the fee payer address if present.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): MultiAgentTransaction {\n    const rawTransaction = RawTransaction.deserialize(deserializer);\n\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n\n    const feePayerPresent = deserializer.deserializeBool();\n    let feePayerAddress;\n    if (feePayerPresent) {\n      feePayerAddress = AccountAddress.deserialize(deserializer);\n    }\n\n    return new MultiAgentTransaction(rawTransaction, secondarySignerAddresses, feePayerAddress);\n  }\n}\n","import { AccountAuthenticatorEd25519 } from \"../transactions/authenticator/account\";\nimport { HexInput, SigningScheme } from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { Ed25519PrivateKey, Ed25519PublicKey, Ed25519Signature, Signature } from \"../core/crypto\";\nimport type { Account } from \"./Account\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AptosConfig } from \"../api\";\n\n/**\n * Arguments required to create an instance of an Ed25519 signer.\n *\n * @param privateKey - The private key used for signing.\n * @param address - Optional account address associated with the signer.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface Ed25519SignerConstructorArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n}\n\n/**\n * Arguments for creating an Ed25519 signer from a derivation path.\n *\n * @param path - The derivation path for the Ed25519 key.\n * @param mnemonic - The mnemonic phrase used to generate the key.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface Ed25519SignerFromDerivationPathArgs {\n  path: string;\n  mnemonic: string;\n}\n\n/**\n * Arguments required to verify an Ed25519 signature against a given message.\n *\n * @param message - The message to be verified, represented in hexadecimal format.\n * @param signature - The Ed25519 signature to validate.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface VerifyEd25519SignatureArgs {\n  message: HexInput;\n  signature: Ed25519Signature;\n}\n\n/**\n * Represents an Ed25519 account that provides signing capabilities through an Ed25519 private key.\n * This class allows for the creation of accounts, signing messages and transactions, and verifying signatures.\n *\n * Note: Generating an instance of this class does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class Ed25519Account implements Account {\n  /**\n   * Private key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly privateKey: Ed25519PrivateKey;\n\n  readonly publicKey: Ed25519PublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.Ed25519;\n\n  // region Constructors\n\n  /**\n   * Creates an instance of the Ed25519Signer with the specified parameters.\n   * This constructor initializes the private key, public key, and account address for the signer.\n   *\n   * @param args - The constructor arguments for the Ed25519Signer.\n   * @param args.privateKey - The private key used for signing.\n   * @param args.address - The optional account address; if not provided, it will derive the address from the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: Ed25519SignerConstructorArgs) {\n    const { privateKey, address } = args;\n    this.privateKey = privateKey;\n    this.publicKey = privateKey.publicKey();\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n  }\n\n  /**\n   * Generates a new Ed25519 account using a randomly generated private key.\n   * This function is useful for creating a signer that can be used for cryptographic operations.\n   *\n   * @returns {Ed25519Account} The newly generated Ed25519 account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(): Ed25519Account {\n    const privateKey = Ed25519PrivateKey.generate();\n    return new Ed25519Account({ privateKey });\n  }\n\n  /**\n   * Derives an Ed25519 account using a specified BIP44 path and mnemonic seed phrase.\n   *\n   * @param args - The arguments for deriving the account.\n   * @param args.path - The BIP44 derive hardened path, e.g., m/44'/637'/0'/0'/0'.\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic - The mnemonic seed phrase of the account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromDerivationPath(args: Ed25519SignerFromDerivationPathArgs) {\n    const { path, mnemonic } = args;\n    const privateKey = Ed25519PrivateKey.fromDerivationPath(path, mnemonic);\n    return new Ed25519Account({ privateKey });\n  }\n  // endregion\n\n  // region Account\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: VerifyEd25519SignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * Ed25519 signatures do not depend on chain state, so this function is equivalent to the synchronous verifySignature method.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature,\n    });\n  }\n\n  /**\n   * Sign a message using the account's Ed25519 private key.\n   * This function returns an AccountAuthenticator containing the signature along with the account's public key.\n   *\n   * @param message - The signing message, represented as hexadecimal input.\n   * @returns An AccountAuthenticator containing the signature and the account's public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorEd25519 {\n    return new AccountAuthenticatorEd25519(this.publicKey, this.privateKey.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's Ed25519 private key.\n   * This function returns an AccountAuthenticator that contains the signature of the transaction along with the account's public key.\n   *\n   * @param transaction - The raw transaction to be signed.\n   * @returns An AccountAuthenticator containing the signature and the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorEd25519 {\n    return new AccountAuthenticatorEd25519(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Sign the given message using the account's Ed25519 private key.\n   * @param message - The message to be signed in HexInput format.\n   * @returns Signature - The resulting signature of the signed message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(message: HexInput): Ed25519Signature {\n    return this.privateKey.sign(message);\n  }\n\n  /**\n   * Sign the given transaction using the available signing capabilities.\n   * This function helps ensure that the transaction is properly authenticated before submission.\n   *\n   * @param transaction - The transaction to be signed.\n   * @returns Signature - The resulting signature for the transaction.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): Ed25519Signature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  // endregion\n}\n","import { AccountAuthenticatorSingleKey } from \"../transactions/authenticator/account\";\nimport { type HexInput, SigningScheme, SigningSchemeInput } from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport {\n  AnyPublicKey,\n  AnySignature,\n  Ed25519PrivateKey,\n  KeylessSignature,\n  PrivateKeyInput,\n  Secp256k1PrivateKey,\n  Signature,\n} from \"../core/crypto\";\nimport type { Account } from \"./Account\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { AptosConfig } from \"../api\";\n\n/**\n * An interface which defines if an Account utilizes SingleKey signing.\n *\n * Such an account will use the AnyPublicKey enum to represent its public key when deriving the auth key.\n */\nexport interface SingleKeySigner extends Account {\n  getAnyPublicKey(): AnyPublicKey;\n}\n\nexport function isSingleKeySigner(obj: unknown): obj is SingleKeySigner {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"getAnyPublicKey\" in obj &&\n    typeof (obj as any).getAnyPublicKey === \"function\"\n  );\n}\n\nexport type SingleKeySignerOrLegacyEd25519Account = SingleKeySigner | Ed25519Account;\n\n/**\n * Arguments required to create a single key signer.\n *\n * @param privateKey - The private key used for signing.\n * @param address - Optional account address associated with the signer.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface SingleKeySignerConstructorArgs {\n  privateKey: PrivateKeyInput;\n  address?: AccountAddressInput;\n}\n\n/**\n * Arguments for generating a single key signer.\n *\n * @param scheme - The signing scheme to be used.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface SingleKeySignerGenerateArgs {\n  scheme?: SigningSchemeInput;\n}\n\n/**\n * The arguments for generating a single key signer from a specified derivation path.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type SingleKeySignerFromDerivationPathArgs = SingleKeySignerGenerateArgs & {\n  path: string;\n  mnemonic: string;\n};\n\n/**\n * Arguments required to verify a single key signature for a given message.\n *\n * @param message - The message to be verified, represented in hexadecimal format.\n * @param signature - The signature that corresponds to the message.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface VerifySingleKeySignatureArgs {\n  message: HexInput;\n  signature: AnySignature;\n}\n\n/**\n * Signer implementation for the SingleKey authentication scheme.\n * This class extends a SingleKeyAccount by adding signing capabilities through a valid private key.\n * Currently, the only supported signature schemes are Ed25519 and Secp256k1.\n *\n * Note: Generating a signer instance does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class SingleKeyAccount implements Account, SingleKeySigner {\n  /**\n   * Private key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly privateKey: PrivateKeyInput;\n\n  readonly publicKey: AnyPublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.SingleKey;\n\n  /**\n   * Creates an instance of the SingleKeySigner using the provided private key and address.\n   * This allows for signing transactions and messages with the specified private key.\n   *\n   * @param args - The constructor arguments for initializing the SingleKeySigner.\n   * @param args.privateKey - The private key used for signing.\n   * @param args.address - The optional account address; if not provided, it will derive the address from the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: SingleKeySignerConstructorArgs) {\n    const { privateKey, address } = args;\n    this.privateKey = privateKey;\n    this.publicKey = new AnyPublicKey(privateKey.publicKey());\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n  }\n\n  getAnyPublicKey(): AnyPublicKey {\n    return this.publicKey;\n  }\n\n  /**\n   * Derives an account from a randomly generated private key based on the specified signing scheme.\n   * The default generation scheme is Ed25519, but it can also support Secp256k1Ecdsa.\n   *\n   * @param args - The arguments for generating the account.\n   * @param args.scheme - The signing scheme to use for generating the private key. Defaults to SigningSchemeInput.Ed25519.\n   * @returns An account with the generated private key based on the specified signing scheme.\n   * @throws Error if an unsupported signature scheme is provided.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(args: SingleKeySignerGenerateArgs = {}) {\n    const { scheme = SigningSchemeInput.Ed25519 } = args;\n    let privateKey: PrivateKeyInput;\n    switch (scheme) {\n      case SigningSchemeInput.Ed25519:\n        privateKey = Ed25519PrivateKey.generate();\n        break;\n      case SigningSchemeInput.Secp256k1Ecdsa:\n        privateKey = Secp256k1PrivateKey.generate();\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${scheme}`);\n    }\n    return new SingleKeyAccount({ privateKey });\n  }\n\n  /**\n   * Derives an account using a specified BIP44 path and mnemonic seed phrase, defaulting to the Ed25519 signature scheme.\n   * This function allows you to create a single key account based on the provided derivation path and mnemonic.\n   *\n   * @param args - The arguments for deriving the account.\n   * @param args.scheme - The signature scheme to derive the private key with. Defaults to Ed25519.\n   * @param args.path - The BIP44 derive hardened path (e.g. m/44'/637'/0'/0'/0') for Ed25519, or non-hardened path\n   * (e.g. m/44'/637'/0'/0/0) for secp256k1.\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic - The mnemonic seed phrase of the account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromDerivationPath(args: SingleKeySignerFromDerivationPathArgs) {\n    const { scheme = SigningSchemeInput.Ed25519, path, mnemonic } = args;\n    let privateKey: PrivateKeyInput;\n    switch (scheme) {\n      case SigningSchemeInput.Ed25519:\n        privateKey = Ed25519PrivateKey.fromDerivationPath(path, mnemonic);\n        break;\n      case SigningSchemeInput.Secp256k1Ecdsa:\n        privateKey = Secp256k1PrivateKey.fromDerivationPath(path, mnemonic);\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${scheme}`);\n    }\n    return new SingleKeyAccount({ privateKey });\n  }\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: VerifySingleKeySignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the account's public key.\n   *\n   * This function checks if the provided signature is valid for the given message using the account's public key.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message signature.\n   * @param args.options.throwErrorWithReason - Whether to throw an error with the reason for the verification failure.\n   * @returns A boolean indicating whether the signature is valid for the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature,\n    });\n  }\n\n  /**\n   * Sign a message using the account's private key and return an AccountAuthenticator containing the signature along with the\n   * account's public key.\n   * @param message - The signing message, represented as binary input in hexadecimal format.\n   * @returns An instance of AccountAuthenticatorSingleKey containing the signature and the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorSingleKey {\n    return new AccountAuthenticatorSingleKey(this.publicKey, this.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's private key.\n   * This function returns an AccountAuthenticator that contains the signature of the transaction along with the account's public key.\n   * @param transaction - The raw transaction to be signed.\n   * @returns An AccountAuthenticatorSingleKey containing the signature of the transaction and the account's public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorSingleKey {\n    return new AccountAuthenticatorSingleKey(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Sign the given message using the account's private key.\n   * @param message - The message to be signed in HexInput format.\n   * @returns A new AnySignature containing the signature of the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(message: HexInput): AnySignature {\n    return new AnySignature(this.privateKey.sign(message));\n  }\n\n  /**\n   * Sign the given transaction using the account's private key.\n   * This function generates a signing message for the transaction and then signs it.\n   *\n   * @param transaction - The transaction to be signed.\n   * @returns Signature - The resulting signature for the signed transaction.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): AnySignature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  // endregion\n\n  static fromEd25519Account(account: Ed25519Account): SingleKeyAccount {\n    return new SingleKeyAccount({ privateKey: account.privateKey, address: account.accountAddress });\n  }\n}\n","import type { AccountAuthenticator } from \"../transactions/authenticator/account\";\nimport { HexInput, SigningScheme, SigningSchemeInput } from \"../types\";\nimport type { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { AuthenticationKey } from \"../core/authenticationKey\";\nimport { AccountPublicKey, Ed25519PrivateKey, PrivateKeyInput, Signature, VerifySignatureArgs } from \"../core/crypto\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { SingleKeyAccount } from \"./SingleKeyAccount\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { AptosConfig } from \"../api\";\n\n/**\n * Arguments for creating an `Ed25519Account` from an `Ed25519PrivateKey`.\n * To use the SingleKey authentication scheme, set `legacy` to false.\n *\n * @param privateKey - The private key used to create the account.\n * @param address - Optional address for the account.\n * @param legacy - Indicates whether to use legacy authentication (default is true).\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateEd25519AccountFromPrivateKeyArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n  legacy?: true;\n}\n\n/**\n * Arguments for creating a `SingleKeyAccount` using an `Ed25519PrivateKey`.\n * The `legacy` property must be set to false to utilize the `SingleKey` authentication scheme.\n *\n * @param privateKey - The Ed25519 private key used for account creation.\n * @param address - Optional account address input.\n * @param legacy - Must be false to enable the `SingleKey` authentication scheme.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateEd25519SingleKeyAccountFromPrivateKeyArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n  legacy: false;\n}\n\n/**\n * Arguments for creating a `SingleKeyAccount` from a supported private key, excluding `Ed25519PrivateKey`.\n * The `legacy` argument is always false and cannot be set to true.\n *\n * @param privateKey - The private key used to create the account.\n * @param address - Optional address input for the account.\n * @param legacy - Always false; cannot be explicitly set to true.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateSingleKeyAccountFromPrivateKeyArgs {\n  privateKey: PrivateKeyInput;\n  address?: AccountAddressInput;\n  legacy?: false;\n}\n\n/**\n * Arguments for creating an `Account` from a private key when the key type is unknown at compile time.\n *\n * @param privateKey - The private key used to create the account.\n * @param address - Optional address for the account.\n * @param legacy - Optional flag indicating if the account is a legacy account.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateAccountFromPrivateKeyArgs {\n  privateKey: PrivateKeyInput;\n  address?: AccountAddressInput;\n  legacy?: boolean;\n}\n\n/**\n * Arguments for generating an Ed25519 account, specifying the signing scheme and legacy option.\n *\n * @param scheme - The signing scheme to use for the account.\n * @param legacy - Indicates if the account should be created in legacy mode.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateEd25519AccountArgs {\n  scheme?: SigningSchemeInput.Ed25519;\n  legacy?: true;\n}\n\n/**\n * Arguments for generating a `SingleKeyAccount` with an underlying `Ed25519PrivateKey`.\n * The `legacy` argument must be set to false to ensure an `Ed25519SingleKeyAccount` is returned.\n *\n * @param scheme - Optional signing scheme input for the account.\n * @param legacy - Indicates whether to use legacy account generation.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateEd25519SingleKeyAccountArgs {\n  scheme?: SigningSchemeInput.Ed25519;\n  legacy: false;\n}\n\n/**\n * Arguments for generating a `SingleKeyAccount` using a supported private key other than `Ed25519PrivateKey`.\n * The `legacy` argument is optional and defaults to false, and cannot be set to true.\n *\n * @param scheme - The signing scheme to use for the account.\n * @param legacy - Indicates whether to use legacy account generation (defaults to false).\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateSingleKeyAccountArgs {\n  scheme: Exclude<SigningSchemeInput, SigningSchemeInput.Ed25519>;\n  legacy?: false;\n}\n\n/**\n * Arguments for generating an opaque `Account` when the input signature scheme is unknown at compile time.\n *\n * @param scheme - The signing scheme to use for account generation.\n * @param legacy - Indicates whether to use legacy account generation methods.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateAccountArgs {\n  scheme?: SigningSchemeInput;\n  legacy?: boolean;\n}\n\n/**\n * Arguments for deriving a private key using a mnemonic phrase and a specified BIP44 path.\n *\n * @param path - The BIP44 derivation path for the key.\n * @param mnemonic - The mnemonic phrase used for key generation.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface PrivateKeyFromDerivationPathArgs {\n  path: string;\n  mnemonic: string;\n}\n\n/**\n * Abstract class representing a generic Aptos account.\n *\n * This class serves as a single entry point for account generation, allowing accounts to be created\n * either through `Account.generate()` or `Account.fromDerivationPath`. Although it is defined as an\n * abstract class, it should be treated as an interface and enforced using the `implements` keyword.\n *\n * Note: Generating an account instance does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport abstract class Account {\n  /**\n   * Public key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract readonly publicKey: AccountPublicKey;\n\n  /**\n   * Account address associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract readonly accountAddress: AccountAddress;\n\n  /**\n   * Signing scheme used to sign transactions\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signingScheme: SigningScheme;\n\n  /**\n   * Generates a new account based on the specified signing scheme and legacy option.\n   * This function allows you to create an account with either the Ed25519 signing scheme or a different scheme as specified.\n   *\n   * @param args - The arguments for generating the account.\n   * @param args.scheme - The signing scheme to use for account generation. Defaults to Ed25519.\n   * @param args.legacy - Indicates whether to use the legacy account generation method. Defaults to true.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(args?: GenerateEd25519AccountArgs): Ed25519Account;\n  static generate(args: GenerateEd25519SingleKeyAccountArgs): SingleKeyAccount;\n  static generate(args: GenerateSingleKeyAccountArgs): SingleKeyAccount;\n  static generate(args: GenerateAccountArgs): Account;\n  static generate(args: GenerateAccountArgs = {}) {\n    const { scheme = SigningSchemeInput.Ed25519, legacy = true } = args;\n    if (scheme === SigningSchemeInput.Ed25519 && legacy) {\n      return Ed25519Account.generate();\n    }\n    return SingleKeyAccount.generate({ scheme });\n  }\n\n  /**\n   * Creates an account from a given private key and address.\n   * This function allows you to instantiate an account based on the provided private key,\n   * and it can differentiate between legacy and non-legacy accounts.\n   *\n   * @param args - The arguments for creating the account.\n   * @param args.privateKey - The private key used to create the account.\n   * @param args.address - The address associated with the account.\n   * @param args.legacy - A boolean indicating whether to create a legacy account (default is true).\n   * @returns An instance of either Ed25519Account or SingleKeyAccount based on the provided private key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromPrivateKey(args: CreateEd25519AccountFromPrivateKeyArgs): Ed25519Account;\n  static fromPrivateKey(args: CreateSingleKeyAccountFromPrivateKeyArgs): SingleKeyAccount;\n  static fromPrivateKey(args: CreateAccountFromPrivateKeyArgs): SingleKeyAccount;\n  static fromPrivateKey(args: CreateAccountFromPrivateKeyArgs): Ed25519Account | SingleKeyAccount {\n    const { privateKey, address, legacy = true } = args;\n    if (privateKey instanceof Ed25519PrivateKey && legacy) {\n      return new Ed25519Account({\n        privateKey,\n        address,\n      });\n    }\n    return new SingleKeyAccount({ privateKey, address });\n  }\n\n  /**\n   * @deprecated use `fromPrivateKey` instead.\n   * Instantiates an account using a private key and a specified account address. This is primarily used to instantiate an\n   * `Account` that has had its authentication key rotated.\n   *\n   * @param args - The arguments required to create an account from a private key.\n   * @param args.privateKey - The underlying private key for the account.\n   * @param args.address - The account address the `Account` will sign for.\n   * @param args.legacy - Optional. If set to false, the keypair generated is a Unified keypair. Defaults to generating a Legacy\n   * Ed25519 keypair.\n   *\n   * @returns Account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromPrivateKeyAndAddress(args: CreateAccountFromPrivateKeyArgs) {\n    return this.fromPrivateKey(args);\n  }\n\n  /**\n   * Generates an account from a specified derivation path and mnemonic.\n   * This function allows you to create an account using different signing schemes based on the provided arguments.\n   *\n   * @param args - The arguments for generating the account.\n   * @param args.scheme - The signing scheme to use for account generation. Defaults to Ed25519.\n   * @param args.mnemonic - The mnemonic phrase used to derive the account.\n   * @param args.path - The derivation path used to generate the account.\n   * @param args.legacy - A boolean indicating whether to use the legacy account generation method. Defaults to true.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromDerivationPath(args: GenerateEd25519AccountArgs & PrivateKeyFromDerivationPathArgs): Ed25519Account;\n  static fromDerivationPath(\n    args: GenerateEd25519SingleKeyAccountArgs & PrivateKeyFromDerivationPathArgs,\n  ): SingleKeyAccount;\n  static fromDerivationPath(args: GenerateSingleKeyAccountArgs & PrivateKeyFromDerivationPathArgs): SingleKeyAccount;\n  static fromDerivationPath(args: GenerateAccountArgs & PrivateKeyFromDerivationPathArgs): Account;\n  static fromDerivationPath(args: GenerateAccountArgs & PrivateKeyFromDerivationPathArgs) {\n    const { scheme = SigningSchemeInput.Ed25519, mnemonic, path, legacy = true } = args;\n    if (scheme === SigningSchemeInput.Ed25519 && legacy) {\n      return Ed25519Account.fromDerivationPath({ mnemonic, path });\n    }\n    return SingleKeyAccount.fromDerivationPath({ scheme, mnemonic, path });\n  }\n\n  /**\n   * Retrieve the authentication key for the associated account using the provided public key.\n   * This key enables account owners to rotate their private key(s) associated with the account without changing the address that\n   * hosts their account.\n   * See here for more info: {@link https://aptos.dev/concepts/accounts#single-signer-authentication}\n   *\n   * @param args - The arguments for retrieving the authentication key.\n   * @param args.publicKey - The public key of the account.\n   * @returns The authentication key for the associated account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static authKey(args: { publicKey: AccountPublicKey }): AuthenticationKey {\n    const { publicKey } = args;\n    return publicKey.authKey();\n  }\n\n  /**\n   * Sign a message using the available signing capabilities.\n   * @param message the signing message, as binary input\n   * @return the AccountAuthenticator containing the signature, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signWithAuthenticator(message: HexInput): AccountAuthenticator;\n\n  /**\n   * Sign a transaction using the available signing capabilities.\n   * @param transaction the raw transaction\n   * @return the AccountAuthenticator containing the signature of the transaction, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticator;\n\n  /**\n   * Sign the given message using the available signing capabilities.\n   * @param message in HexInput format\n   * @returns Signature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract sign(message: HexInput): Signature;\n\n  /**\n   * Sign the given transaction using the available signing capabilities.\n   * @param transaction the transaction to be signed\n   * @returns Signature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signTransaction(transaction: AnyRawTransaction): Signature;\n\n  /**\n   * Verify the given message and signature with the public key.\n   * This function helps ensure the integrity and authenticity of a message by validating its signature.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: VerifySignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public key. It fetches any on chain state if needed for verification.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync(args);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { randomBytes } from \"@noble/hashes/utils\";\n\nimport {\n  bytesToBigIntLE,\n  padAndPackBytesWithLen,\n  poseidonHash,\n  Ed25519PrivateKey,\n  EphemeralPublicKey,\n  EphemeralSignature,\n  PrivateKey,\n} from \"../core/crypto\";\nimport { Hex } from \"../core/hex\";\nimport { EphemeralPublicKeyVariant, HexInput } from \"../types\";\nimport { Deserializer, Serializable, Serializer } from \"../bcs\";\nimport { floorToWholeHour, nowInSeconds } from \"../utils/helpers\";\n\nconst TWO_WEEKS_IN_SECONDS = 1_209_600;\n\n/**\n * Represents an ephemeral key pair used for signing transactions via the Keyless authentication scheme.\n * This key pair is temporary and includes an expiration time.\n * For more details on how this class is used, refer to the documentation:\n * https://aptos.dev/guides/keyless-accounts/#1-present-the-user-with-a-sign-in-with-idp-button-on-the-ui\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class EphemeralKeyPair extends Serializable {\n  static readonly BLINDER_LENGTH: number = 31;\n\n  /**\n   * A byte array of length BLINDER_LENGTH used to obfuscate the public key from the IdP.\n   * Used in calculating the nonce passed to the IdP and as a secret witness in proof generation.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly blinder: Uint8Array;\n\n  /**\n   * A timestamp in seconds indicating when the ephemeral key pair is expired.  After expiry, a new\n   * EphemeralKeyPair must be generated and a new JWT needs to be created.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly expiryDateSecs: number;\n\n  /**\n   * The value passed to the IdP when the user authenticates.  It consists of a hash of the\n   * ephemeral public key, expiry date, and blinder.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly nonce: string;\n\n  /**\n   * A private key used to sign transactions.  This private key is not tied to any account on the chain as it\n   * is ephemeral (not permanent) in nature.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  private privateKey: PrivateKey;\n\n  /**\n   * A public key used to verify transactions.  This public key is not tied to any account on the chain as it\n   * is ephemeral (not permanent) in nature.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  private publicKey: EphemeralPublicKey;\n\n  /**\n   * Creates an instance of the class with a specified private key, optional expiry date, and optional blinder.\n   * This constructor initializes the public key, sets the expiry date to a default value if not provided,\n   * generates a blinder if not supplied, and calculates the nonce based on the public key, expiry date, and blinder.\n   *\n   * @param args - The parameters for constructing the instance.\n   * @param args.privateKey - The private key used for creating the instance.\n   * @param args.expiryDateSecs - Optional expiry date in seconds from the current time. Defaults to two weeks from now.\n   * @param args.blinder - Optional blinder value. If not provided, a new blinder will be generated.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: { privateKey: PrivateKey; expiryDateSecs?: number; blinder?: HexInput }) {\n    super();\n    const { privateKey, expiryDateSecs, blinder } = args;\n    this.privateKey = privateKey;\n    this.publicKey = new EphemeralPublicKey(privateKey.publicKey());\n    // By default, we set the expiry date to be two weeks in the future floored to the nearest hour\n    this.expiryDateSecs = expiryDateSecs || floorToWholeHour(nowInSeconds() + TWO_WEEKS_IN_SECONDS);\n    // Generate the blinder if not provided\n    this.blinder = blinder !== undefined ? Hex.fromHexInput(blinder).toUint8Array() : generateBlinder();\n    // Calculate the nonce\n    const fields = padAndPackBytesWithLen(this.publicKey.bcsToBytes(), 93);\n    fields.push(BigInt(this.expiryDateSecs));\n    fields.push(bytesToBigIntLE(this.blinder));\n    const nonceHash = poseidonHash(fields);\n    this.nonce = nonceHash.toString();\n  }\n\n  /**\n   * Returns the public key of the key pair.\n   * @return EphemeralPublicKey\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  getPublicKey(): EphemeralPublicKey {\n    return this.publicKey;\n  }\n\n  /**\n   * Checks if the current time has surpassed the expiry date of the key pair.\n   * @return boolean - Returns true if the key pair is expired, otherwise false.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  isExpired(): boolean {\n    const currentTimeSecs: number = Math.floor(Date.now() / 1000);\n    return currentTimeSecs > this.expiryDateSecs;\n  }\n\n  /**\n   * Serializes the object's properties into a format suitable for transmission or storage.\n   * This function is essential for preparing the object data for serialization processes.\n   *\n   * @param serializer - The serializer instance used to serialize the object's properties.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.publicKey.variant);\n    serializer.serializeBytes(this.privateKey.toUint8Array());\n    serializer.serializeU64(this.expiryDateSecs);\n    serializer.serializeFixedBytes(this.blinder);\n  }\n\n  /**\n   * Deserializes an ephemeral key pair from the provided deserializer.\n   * This function helps in reconstructing an ephemeral key pair, which is essential for cryptographic operations.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static deserialize(deserializer: Deserializer): EphemeralKeyPair {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let privateKey: PrivateKey;\n    switch (variantIndex) {\n      case EphemeralPublicKeyVariant.Ed25519:\n        privateKey = Ed25519PrivateKey.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for EphemeralPublicKey: ${variantIndex}`);\n    }\n    const expiryDateSecs = deserializer.deserializeU64();\n    const blinder = deserializer.deserializeFixedBytes(31);\n    return new EphemeralKeyPair({ privateKey, expiryDateSecs: Number(expiryDateSecs), blinder });\n  }\n\n  /**\n   * Deserialize a byte array into an EphemeralKeyPair object.\n   * This function allows you to reconstruct an EphemeralKeyPair from its serialized byte representation.\n   *\n   * @param bytes - The byte array representing the serialized EphemeralKeyPair.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromBytes(bytes: Uint8Array): EphemeralKeyPair {\n    return EphemeralKeyPair.deserialize(new Deserializer(bytes));\n  }\n\n  /**\n   * Generates a new ephemeral key pair with an optional expiry date.\n   * This function allows you to create a temporary key pair for secure operations.\n   *\n   * @param args - Optional parameters for key pair generation.\n   * @param args.scheme - The type of key pair to use for the EphemeralKeyPair. Only Ed25519 is supported for now.\n   * @param args.expiryDateSecs - The date of expiry for the key pair in seconds.\n   * @returns An instance of EphemeralKeyPair containing the generated private key and expiry date.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(args?: { scheme?: EphemeralPublicKeyVariant; expiryDateSecs?: number }): EphemeralKeyPair {\n    let privateKey: PrivateKey;\n\n    switch (args?.scheme) {\n      case EphemeralPublicKeyVariant.Ed25519:\n      default:\n        privateKey = Ed25519PrivateKey.generate();\n    }\n\n    return new EphemeralKeyPair({ privateKey, expiryDateSecs: args?.expiryDateSecs });\n  }\n\n  /**\n   * Sign the given data using the private key, returning an ephemeral signature.\n   * This function is essential for creating a secure signature that can be used for authentication or verification purposes.\n   *\n   * @param data - The data to be signed, provided in HexInput format.\n   * @returns EphemeralSignature - The resulting ephemeral signature.\n   * @throws Error - Throws an error if the EphemeralKeyPair has expired.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(data: HexInput): EphemeralSignature {\n    if (this.isExpired()) {\n      throw new Error(\"EphemeralKeyPair has expired\");\n    }\n    return new EphemeralSignature(this.privateKey.sign(data));\n  }\n}\n\n/**\n * Generates a random byte array of length EphemeralKeyPair.BLINDER_LENGTH.\n * @returns Uint8Array A random byte array used for blinding.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nfunction generateBlinder(): Uint8Array {\n  return randomBytes(EphemeralKeyPair.BLINDER_LENGTH);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport EventEmitter from \"eventemitter3\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { EphemeralCertificateVariant, HexInput, SigningScheme } from \"../types\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport {\n  AnyPublicKey,\n  AnySignature,\n  KeylessPublicKey,\n  KeylessSignature,\n  EphemeralCertificate,\n  ZeroKnowledgeSig,\n  ZkProof,\n  MoveJWK,\n  getKeylessConfig,\n  fetchJWK,\n  KeylessConfiguration,\n} from \"../core/crypto\";\n\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\nimport { Hex } from \"../core/hex\";\nimport { AccountAuthenticatorSingleKey } from \"../transactions/authenticator/account\";\nimport { Deserializer, Serializable, Serializer } from \"../bcs\";\nimport { deriveTransactionType, generateSigningMessage } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AnyRawTransaction, AnyRawTransactionInstance } from \"../transactions/types\";\nimport { base64UrlDecode } from \"../utils/helpers\";\nimport { FederatedKeylessPublicKey } from \"../core/crypto/federatedKeyless\";\nimport { Account } from \"./Account\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { KeylessError, KeylessErrorType } from \"../errors\";\nimport type { SingleKeySigner } from \"./SingleKeyAccount\";\n\n/**\n * An interface which defines if an Account utilizes Keyless signing.\n */\nexport interface KeylessSigner extends Account {\n  checkKeylessAccountValidity(aptosConfig: AptosConfig): Promise<void>;\n}\n\nexport function isKeylessSigner(obj: any): obj is KeylessSigner {\n  return obj !== null && obj !== undefined && typeof obj.checkKeylessAccountValidity === \"function\";\n}\n\n/**\n * Account implementation for the Keyless authentication scheme.  This abstract class is used for standard Keyless Accounts\n * and Federated Keyless Accounts.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport abstract class AbstractKeylessAccount extends Serializable implements KeylessSigner, SingleKeySigner {\n  static readonly PEPPER_LENGTH: number = 31;\n\n  /**\n   * The KeylessPublicKey associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n\n  /**\n   * The EphemeralKeyPair used to generate sign.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly ephemeralKeyPair: EphemeralKeyPair;\n\n  /**\n   * The claim on the JWT to identify a user.  This is typically 'sub' or 'email'.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly uidKey: string;\n\n  /**\n   * The value of the uidKey claim on the JWT.  This intended to be a stable user identifier.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly uidVal: string;\n\n  /**\n   * The value of the 'aud' claim on the JWT, also known as client ID.  This is the identifier for the dApp's\n   * OIDC registration with the identity provider.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly aud: string;\n\n  /**\n   * A value contains 31 bytes of entropy that preserves privacy of the account. Typically fetched from a pepper provider.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly pepper: Uint8Array;\n\n  /**\n   * Account address associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly accountAddress: AccountAddress;\n\n  /**\n   * The zero knowledge signature (if ready) which contains the proof used to validate the EphemeralKeyPair.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  proof: ZeroKnowledgeSig | undefined;\n\n  /**\n   * The proof of the EphemeralKeyPair or a promise that provides the proof.  This is used to allow for awaiting on\n   * fetching the proof.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly proofOrPromise: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n\n  /**\n   * Signing scheme used to sign transactions\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signingScheme: SigningScheme = SigningScheme.SingleKey;\n\n  /**\n   * The JWT token used to derive the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly jwt: string;\n\n  /**\n   * The hash of the verification key used to verify the proof. This is optional and can be used to check verifying key\n   * rotations which may invalidate the proof.\n   */\n  readonly verificationKeyHash?: Uint8Array;\n\n  /**\n   * An event emitter used to assist in handling asynchronous proof fetching.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  private readonly emitter: EventEmitter<ProofFetchEvents>;\n\n  /**\n   * Use the static generator `create(...)` instead.\n   * Creates an instance of the KeylessAccount with an optional proof.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.publicKey - A KeylessPublicKey or FederatedKeylessPublicKey.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.iss - A JWT issuer.\n   * @param args.uidKey - The claim on the JWT to identify a user.  This is typically 'sub' or 'email'.\n   * @param args.uidVal - The unique id for this user, intended to be a stable user identifier.\n   * @param args.aud - The value of the 'aud' claim on the JWT, also known as client ID.  This is the identifier for the dApp's\n   * OIDC registration with the identity provider.\n   * @param args.pepper - A hexadecimal input used for additional security.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.verificationKeyHash Optional 32-byte verification key hash as hex input used to check proof validity.\n   */\n  protected constructor(args: {\n    address?: AccountAddress;\n    publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n    ephemeralKeyPair: EphemeralKeyPair;\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    proofFetchCallback?: ProofFetchCallback;\n    jwt: string;\n    verificationKeyHash?: HexInput;\n  }) {\n    super();\n    const {\n      address,\n      ephemeralKeyPair,\n      publicKey,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      proof,\n      proofFetchCallback,\n      jwt,\n      verificationKeyHash,\n    } = args;\n    this.ephemeralKeyPair = ephemeralKeyPair;\n    this.publicKey = publicKey;\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n    this.uidKey = uidKey;\n    this.uidVal = uidVal;\n    this.aud = aud;\n    this.jwt = jwt;\n    this.emitter = new EventEmitter<ProofFetchEvents>();\n    this.proofOrPromise = proof;\n    if (proof instanceof ZeroKnowledgeSig) {\n      this.proof = proof;\n    } else {\n      if (proofFetchCallback === undefined) {\n        throw new Error(\"Must provide callback for async proof fetch\");\n      }\n      this.emitter.on(\"proofFetchFinish\", async (status) => {\n        await proofFetchCallback(status);\n        this.emitter.removeAllListeners();\n      });\n      // Note, this is purposely not awaited to be non-blocking.  The caller should await on the proofFetchCallback.\n      this.init(proof);\n    }\n    const pepperBytes = Hex.fromHexInput(pepper).toUint8Array();\n    if (pepperBytes.length !== AbstractKeylessAccount.PEPPER_LENGTH) {\n      throw new Error(`Pepper length in bytes should be ${AbstractKeylessAccount.PEPPER_LENGTH}`);\n    }\n    this.pepper = pepperBytes;\n    if (verificationKeyHash !== undefined) {\n      if (Hex.hexInputToUint8Array(verificationKeyHash).length !== 32) {\n        throw new Error(\"verificationKeyHash must be 32 bytes\");\n      }\n      this.verificationKeyHash = Hex.hexInputToUint8Array(verificationKeyHash);\n    }\n  }\n\n  getAnyPublicKey(): AnyPublicKey {\n    return new AnyPublicKey(this.publicKey);\n  }\n\n  /**\n   * This initializes the asynchronous proof fetch\n   * @return Emits whether the proof succeeds or fails, but has no return.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async init(promise: Promise<ZeroKnowledgeSig>) {\n    try {\n      this.proof = await promise;\n      this.emitter.emit(\"proofFetchFinish\", { status: \"Success\" });\n    } catch (error) {\n      if (error instanceof Error) {\n        this.emitter.emit(\"proofFetchFinish\", { status: \"Failed\", error: error.toString() });\n      } else {\n        this.emitter.emit(\"proofFetchFinish\", { status: \"Failed\", error: \"Unknown\" });\n      }\n    }\n  }\n\n  /**\n   * Serializes the jwt data into a format suitable for transmission or storage.\n   * This function ensures that both the jwt data and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the jwt data into bytes.\n   */\n  serialize(serializer: Serializer): void {\n    this.accountAddress.serialize(serializer);\n    serializer.serializeStr(this.jwt);\n    serializer.serializeStr(this.uidKey);\n    serializer.serializeFixedBytes(this.pepper);\n    this.ephemeralKeyPair.serialize(serializer);\n    if (this.proof === undefined) {\n      throw new Error(\"Cannot serialize - proof undefined\");\n    }\n    this.proof.serialize(serializer);\n    serializer.serializeOption(this.verificationKeyHash, 32);\n  }\n\n  static partialDeserialize(deserializer: Deserializer): {\n    address: AccountAddress;\n    jwt: string;\n    uidKey: string;\n    pepper: Uint8Array;\n    ephemeralKeyPair: EphemeralKeyPair;\n    proof: ZeroKnowledgeSig;\n    verificationKeyHash?: Uint8Array;\n  } {\n    const address = AccountAddress.deserialize(deserializer);\n    const jwt = deserializer.deserializeStr();\n    const uidKey = deserializer.deserializeStr();\n    const pepper = deserializer.deserializeFixedBytes(31);\n    const ephemeralKeyPair = EphemeralKeyPair.deserialize(deserializer);\n    const proof = ZeroKnowledgeSig.deserialize(deserializer);\n    const verificationKeyHash = deserializer.deserializeOption(\"fixedBytes\", 32);\n\n    return { address, jwt, uidKey, pepper, ephemeralKeyPair, proof, verificationKeyHash };\n  }\n\n  /**\n   * Checks if the proof is expired.  If so the account must be re-derived with a new EphemeralKeyPair\n   * and JWT token.\n   * @return boolean\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  isExpired(): boolean {\n    return this.ephemeralKeyPair.isExpired();\n  }\n\n  /**\n   * Sign a message using Keyless.\n   * @param message the message to sign, as binary input\n   * @return the AccountAuthenticator containing the signature, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorSingleKey {\n    const signature = new AnySignature(this.sign(message));\n    const publicKey = new AnyPublicKey(this.publicKey);\n    return new AccountAuthenticatorSingleKey(publicKey, signature);\n  }\n\n  /**\n   * Sign a transaction using Keyless.\n   * @param transaction the raw transaction\n   * @return the AccountAuthenticator containing the signature of the transaction, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorSingleKey {\n    const signature = new AnySignature(this.signTransaction(transaction));\n    const publicKey = new AnyPublicKey(this.publicKey);\n    return new AccountAuthenticatorSingleKey(publicKey, signature);\n  }\n\n  /**\n   * Waits for asynchronous proof fetching to finish.\n   * @return\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async waitForProofFetch() {\n    if (this.proofOrPromise instanceof Promise) {\n      await this.proofOrPromise;\n    }\n  }\n\n  /**\n   * Validates that the Keyless Account can be used to sign transactions.\n   * @return\n   */\n  async checkKeylessAccountValidity(aptosConfig: AptosConfig): Promise<void> {\n    if (this.isExpired()) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.EPHEMERAL_KEY_PAIR_EXPIRED,\n      });\n    }\n    await this.waitForProofFetch();\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.ASYNC_PROOF_FETCH_FAILED,\n      });\n    }\n    const header = jwtDecode(this.jwt, { header: true });\n    if (header.kid === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.JWT_PARSING_ERROR,\n        details: \"checkKeylessAccountValidity failed. JWT is missing 'kid' in header. This should never happen.\",\n      });\n    }\n    if (this.verificationKeyHash !== undefined) {\n      const { verificationKey } = await getKeylessConfig({ aptosConfig });\n      if (Hex.hexInputToString(verificationKey.hash()) !== Hex.hexInputToString(this.verificationKeyHash)) {\n        throw KeylessError.fromErrorType({\n          type: KeylessErrorType.INVALID_PROOF_VERIFICATION_KEY_NOT_FOUND,\n        });\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"[Aptos SDK] The verification key hash was not set. Proof may be invalid if the verification key has rotated.\",\n      );\n    }\n    await AbstractKeylessAccount.fetchJWK({ aptosConfig, publicKey: this.publicKey, kid: header.kid });\n  }\n\n  /**\n   * Sign the given message using Keyless.\n   * @param message in HexInput format\n   * @returns Signature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(message: HexInput): KeylessSignature {\n    const { expiryDateSecs } = this.ephemeralKeyPair;\n    if (this.isExpired()) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.EPHEMERAL_KEY_PAIR_EXPIRED,\n      });\n    }\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_NOT_FOUND,\n        details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\",\n      });\n    }\n    const ephemeralPublicKey = this.ephemeralKeyPair.getPublicKey();\n    const ephemeralSignature = this.ephemeralKeyPair.sign(message);\n\n    return new KeylessSignature({\n      jwtHeader: base64UrlDecode(this.jwt.split(\".\")[0]),\n      ephemeralCertificate: new EphemeralCertificate(this.proof, EphemeralCertificateVariant.ZkProof),\n      expiryDateSecs,\n      ephemeralPublicKey,\n      ephemeralSignature,\n    });\n  }\n\n  /**\n   * Sign the given transaction with Keyless.\n   * Signs the transaction and proof to guard against proof malleability.\n   * @param transaction the transaction to be signed\n   * @returns KeylessSignature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): KeylessSignature {\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_NOT_FOUND,\n        details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\",\n      });\n    }\n    const raw = deriveTransactionType(transaction);\n    const txnAndProof = new TransactionAndProof(raw, this.proof.proof);\n    const signMess = txnAndProof.hash();\n    return this.sign(signMess);\n  }\n\n  getSigningMessage(transaction: AnyRawTransaction): Uint8Array {\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_NOT_FOUND,\n        details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\",\n      });\n    }\n    const raw = deriveTransactionType(transaction);\n    const txnAndProof = new TransactionAndProof(raw, this.proof.proof);\n    return txnAndProof.hash();\n  }\n\n  /**\n   * Note - This function is currently incomplete and should only be used to verify ownership of the KeylessAccount\n   *\n   * Verifies a signature given the message.\n   *\n   * @param args.message the message that was signed.\n   * @param args.signature the KeylessSignature to verify\n   * @returns boolean\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: {\n    message: HexInput;\n    signature: KeylessSignature;\n    jwk: MoveJWK;\n    keylessConfig: KeylessConfiguration;\n  }): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: KeylessSignature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n    });\n  }\n\n  /**\n   * Fetches the JWK from the issuer's well-known JWKS endpoint.\n   *\n   * @param args.publicKey The keyless public key to query\n   * @param args.kid The kid of the JWK to fetch\n   * @returns A JWK matching the `kid` in the JWT header.\n   * @throws {KeylessError} If the JWK cannot be fetched\n   */\n  static async fetchJWK(args: {\n    aptosConfig: AptosConfig;\n    publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n    kid: string;\n  }): Promise<MoveJWK> {\n    return fetchJWK(args);\n  }\n}\n\n/**\n * A container class to hold a transaction and a proof.  It implements CryptoHashable which is used to create\n * the signing message for Keyless transactions.  We sign over the proof to ensure non-malleability.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class TransactionAndProof extends Serializable {\n  /**\n   * The transaction to sign.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  transaction: AnyRawTransactionInstance;\n\n  /**\n   * The zero knowledge proof used in signing the transaction.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  proof?: ZkProof;\n\n  /**\n   * The domain separator prefix used when hashing.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly domainSeparator = \"APTOS::TransactionAndProof\";\n\n  constructor(transaction: AnyRawTransactionInstance, proof?: ZkProof) {\n    super();\n    this.transaction = transaction;\n    this.proof = proof;\n  }\n\n  /**\n   * Serializes the transaction data into a format suitable for transmission or storage.\n   * This function ensures that both the transaction bytes and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the transaction data into bytes.\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.transaction.bcsToBytes());\n    serializer.serializeOption(this.proof);\n  }\n\n  /**\n   * Hashes the bcs serialized from of the class. This is the typescript corollary to the BCSCryptoHash macro in aptos-core.\n   *\n   * @returns Uint8Array\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  hash(): Uint8Array {\n    return generateSigningMessage(this.bcsToBytes(), this.domainSeparator);\n  }\n}\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchSuccess = {\n  status: \"Success\";\n};\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchFailure = {\n  status: \"Failed\";\n  error: string;\n};\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchStatus = ProofFetchSuccess | ProofFetchFailure;\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchCallback = (status: ProofFetchStatus) => Promise<void>;\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface ProofFetchEvents {\n  proofFetchFinish: (status: ProofFetchStatus) => void;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexInput } from \"../types\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport { getIssAudAndUidVal, Groth16VerificationKey, KeylessPublicKey, ZeroKnowledgeSig } from \"../core/crypto\";\n\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\nimport { Deserializer, Serializer } from \"../bcs\";\nimport { AbstractKeylessAccount, ProofFetchCallback } from \"./AbstractKeylessAccount\";\nimport { Hex } from \"../core/hex\";\n\n/**\n * Account implementation for the Keyless authentication scheme.\n *\n * Used to represent a Keyless based account and sign transactions with it.\n *\n * Use `KeylessAccount.create()` to instantiate a KeylessAccount with a JWT, proof and EphemeralKeyPair.\n *\n * When the proof expires or the JWT becomes invalid, the KeylessAccount must be instantiated again with a new JWT,\n * EphemeralKeyPair, and corresponding proof.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class KeylessAccount extends AbstractKeylessAccount {\n  /**\n   * The KeylessPublicKey associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: KeylessPublicKey;\n\n  // Use the static constructor 'create' instead.\n\n  /**\n   * Use the static generator `create(...)` instead.\n   * Creates an instance of the KeylessAccount with an optional proof.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.iss - A JWT issuer.\n   * @param args.uidKey - The claim on the JWT to identify a user.  This is typically 'sub' or 'email'.\n   * @param args.uidVal - The unique id for this user, intended to be a stable user identifier.\n   * @param args.aud - The value of the 'aud' claim on the JWT, also known as client ID.  This is the identifier for the dApp's\n   * OIDC registration with the identity provider.\n   * @param args.pepper - A hexadecimal input used for additional security.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: {\n    address?: AccountAddress;\n    ephemeralKeyPair: EphemeralKeyPair;\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    proofFetchCallback?: ProofFetchCallback;\n    jwt: string;\n    verificationKeyHash?: HexInput;\n  }) {\n    const publicKey = KeylessPublicKey.create(args);\n    super({ publicKey, ...args });\n    this.publicKey = publicKey;\n  }\n\n  /**\n   * Serializes the transaction data into a format suitable for transmission or storage.\n   * This function ensures that both the transaction bytes and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the transaction data into bytes.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  serialize(serializer: Serializer): void {\n    super.serialize(serializer);\n  }\n\n  /**\n   * Deserializes the provided deserializer to create a KeylessAccount instance.\n   * This function extracts necessary components such as the JWT, UID key, pepper, ephemeral key pair, and proof from the deserializer.\n   *\n   * @param deserializer - The deserializer instance used to retrieve the serialized data.\n   * @returns A KeylessAccount instance created from the deserialized data.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static deserialize(deserializer: Deserializer): KeylessAccount {\n    const { address, proof, ephemeralKeyPair, jwt, uidKey, pepper, verificationKeyHash } =\n      AbstractKeylessAccount.partialDeserialize(deserializer);\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new KeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwt,\n      verificationKeyHash,\n    });\n  }\n\n  /**\n   * Deserialize bytes using this account's information.\n   *\n   * @param bytes The bytes being interpreted.\n   * @returns\n   */\n  static fromBytes(bytes: HexInput): KeylessAccount {\n    return KeylessAccount.deserialize(new Deserializer(Hex.hexInputToUint8Array(bytes)));\n  }\n\n  /**\n   * Creates a KeylessAccount instance using the provided parameters.\n   * This function allows you to set up a KeylessAccount with specific attributes such as address, proof, and JWT.\n   * This is used instead of the KeylessAccount constructor.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.pepper - A hexadecimal input used for additional security.\n   * @param args.uidKey - Optional key for user identification, defaults to \"sub\".\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static create(args: {\n    address?: AccountAddress;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    pepper: HexInput;\n    uidKey?: string;\n    proofFetchCallback?: ProofFetchCallback;\n    verificationKey?: Groth16VerificationKey;\n  }): KeylessAccount {\n    const { address, proof, jwt, ephemeralKeyPair, pepper, uidKey = \"sub\", proofFetchCallback, verificationKey } = args;\n\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new KeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwt,\n      proofFetchCallback,\n      verificationKeyHash: verificationKey ? verificationKey.hash() : undefined,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexInput } from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { getIssAudAndUidVal, Groth16VerificationKey, ZeroKnowledgeSig } from \"../core/crypto\";\n\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\nimport { Deserializer, Serializer } from \"../bcs\";\nimport { FederatedKeylessPublicKey } from \"../core/crypto/federatedKeyless\";\nimport { AbstractKeylessAccount, ProofFetchCallback } from \"./AbstractKeylessAccount\";\n\n/**\n * Account implementation for the FederatedKeyless authentication scheme.\n *\n * Used to represent a FederatedKeyless based account and sign transactions with it.\n *\n * Use `FederatedKeylessAccount.create()` to instantiate a KeylessAccount with a JSON Web Token (JWT), proof, EphemeralKeyPair and the\n * address the JSON Web Key Set (JWKS) are installed that will be used to verify the JWT.\n *\n * When the proof expires or the JWT becomes invalid, the KeylessAccount must be instantiated again with a new JWT,\n * EphemeralKeyPair, and corresponding proof.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class FederatedKeylessAccount extends AbstractKeylessAccount {\n  /**\n   * The FederatedKeylessPublicKey associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: FederatedKeylessPublicKey;\n\n  readonly audless: boolean;\n\n  /**\n   * Use the static generator `FederatedKeylessAccount.create(...)` instead.\n   * Creates a KeylessAccount instance using the provided parameters.\n   * This function allows you to set up a KeylessAccount with specific attributes such as address, proof, and JWT.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.jwkAddress - The address which stores the JSON Web Key Set (JWKS) used to verify the JWT.\n   * @param args.uidKey - Optional key for user identification, defaults to \"sub\".\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   */\n  constructor(args: {\n    address?: AccountAddress;\n    ephemeralKeyPair: EphemeralKeyPair;\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    jwkAddress: AccountAddress;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    proofFetchCallback?: ProofFetchCallback;\n    jwt: string;\n    verificationKeyHash?: HexInput;\n    audless?: boolean;\n  }) {\n    const publicKey = FederatedKeylessPublicKey.create(args);\n    super({ publicKey, ...args });\n    this.publicKey = publicKey;\n    this.audless = args.audless ?? false;\n  }\n\n  /**\n   * Serializes the transaction data into a format suitable for transmission or storage.\n   * This function ensures that both the transaction bytes and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the transaction data into bytes.\n   */\n  serialize(serializer: Serializer): void {\n    super.serialize(serializer);\n    this.publicKey.jwkAddress.serialize(serializer);\n  }\n\n  /**\n   * Deserializes the provided deserializer to create a KeylessAccount instance.\n   * This function extracts necessary components such as the JWT, UID key, pepper, ephemeral key pair, and proof from the deserializer.\n   *\n   * @param deserializer - The deserializer instance used to retrieve the serialized data.\n   * @returns A KeylessAccount instance created from the deserialized data.\n   */\n  static deserialize(deserializer: Deserializer): FederatedKeylessAccount {\n    const { address, proof, ephemeralKeyPair, jwt, uidKey, pepper, verificationKeyHash } =\n      AbstractKeylessAccount.partialDeserialize(deserializer);\n    const jwkAddress = AccountAddress.deserialize(deserializer);\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new FederatedKeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwt,\n      verificationKeyHash,\n      jwkAddress,\n    });\n  }\n\n  /**\n   * Deserialize bytes using this account's information.\n   *\n   * @param bytes The bytes being interpreted.\n   * @returns\n   */\n  static fromBytes(bytes: HexInput): FederatedKeylessAccount {\n    return FederatedKeylessAccount.deserialize(Deserializer.fromHex(bytes));\n  }\n\n  /**\n   * Creates a KeylessAccount instance using the provided parameters.\n   * This function allows you to set up a KeylessAccount with specific attributes such as address, proof, and JWT.\n   * This is used instead of the KeylessAccount constructor.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.jwkAddress - The address which stores the JSON Web Key Set (JWKS) used to verify the JWT.\n   * @param args.uidKey - Optional key for user identification, defaults to \"sub\".\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   */\n  static create(args: {\n    address?: AccountAddress;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    pepper: HexInput;\n    jwkAddress: AccountAddressInput;\n    uidKey?: string;\n    proofFetchCallback?: ProofFetchCallback;\n    verificationKey?: Groth16VerificationKey;\n  }): FederatedKeylessAccount {\n    const {\n      address,\n      proof,\n      jwt,\n      ephemeralKeyPair,\n      pepper,\n      jwkAddress,\n      uidKey = \"sub\",\n      proofFetchCallback,\n      verificationKey,\n    } = args;\n\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new FederatedKeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwkAddress: AccountAddress.from(jwkAddress),\n      jwt,\n      proofFetchCallback,\n      verificationKeyHash: verificationKey ? verificationKey.hash() : undefined,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Account } from \"./Account\";\nimport { MultiKey, MultiKeySignature, PublicKey } from \"../core/crypto\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { HexInput, SigningScheme } from \"../types\";\nimport { AccountAuthenticatorMultiKey } from \"../transactions/authenticator/account\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { AbstractKeylessAccount, KeylessSigner } from \"./AbstractKeylessAccount\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { SingleKeyAccount, SingleKeySigner, SingleKeySignerOrLegacyEd25519Account } from \"./SingleKeyAccount\";\nimport { Ed25519Account } from \"./Ed25519Account\";\n\n/**\n * Arguments required to verify a multi-key signature against a given message.\n *\n * @param message - The original message that was signed.\n * @param signature - The multi-key signature to be verified.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface VerifyMultiKeySignatureArgs {\n  message: HexInput;\n  signature: MultiKeySignature;\n}\n\n/**\n * Signer implementation for the MultiKey authentication scheme.\n *\n * This account utilizes an M of N signing scheme, where M and N are specified in the {@link MultiKey}.\n * It signs messages using an array of M accounts, each corresponding to a public key in the {@link MultiKey}.\n *\n * Note: Generating a signer instance does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class MultiKeyAccount implements Account, KeylessSigner {\n  /**\n   * Public key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: MultiKey;\n\n  /**\n   * Account address associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly accountAddress: AccountAddress;\n\n  /**\n   * Signing scheme used to sign transactions\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signingScheme: SigningScheme = SigningScheme.MultiKey;\n\n  /**\n   * The signers used to sign messages.  These signers should correspond to public keys in the\n   * MultiKeyAccount's public key.  The number of signers should be equal to this.publicKey.signaturesRequired.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signers: Account[];\n\n  /**\n   * An array of indices where for signer[i], signerIndicies[i] is the index of the corresponding public key in\n   * publicKey.publicKeys.  Used to derive the right public key to use for verification.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  // TODO: Rename Indicies to Indices\n  readonly signerIndicies: number[];\n\n  readonly signaturesBitmap: Uint8Array;\n\n  /**\n   * Constructs a MultiKeyAccount instance, which requires multiple signatures for transactions.\n   *\n   * @param args - The arguments for creating a MultiKeyAccount.\n   * @param args.multiKey - The multikey of the account consisting of N public keys and a number M representing the required signatures.\n   * @param args.signers - An array of M signers that will be used to sign the transaction.\n   * @param args.address - An optional account address input. If not provided, the derived address from the public key will be used.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: {\n    multiKey: MultiKey;\n    signers: SingleKeySignerOrLegacyEd25519Account[];\n    address?: AccountAddressInput;\n  }) {\n    const { multiKey, address } = args;\n\n    const signers: SingleKeySigner[] = args.signers.map((signer) =>\n      signer instanceof Ed25519Account ? SingleKeyAccount.fromEd25519Account(signer) : signer,\n    );\n\n    if (multiKey.signaturesRequired > signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `Not enough signers provided to satisfy the required signatures. Need ${multiKey.signaturesRequired} signers, but only ${signers.length} provided`,\n      );\n    } else if (multiKey.signaturesRequired < signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `More signers provided than required. Need ${multiKey.signaturesRequired} signers, but ${signers.length} provided`,\n      );\n    }\n\n    this.publicKey = multiKey;\n\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n\n    // For each signer, find its corresponding position in the MultiKey's public keys array\n    const bitPositions: number[] = [];\n    for (const signer of signers) {\n      bitPositions.push(this.publicKey.getIndex(signer.getAnyPublicKey()));\n    }\n\n    // Create pairs of [signer, position] and sort them by position\n    // This sorting is critical because:\n    // 1. The on-chain verification expects signatures to be in ascending order by bit position\n    // 2. The bitmap must match the order of signatures when verifying\n    const signersAndBitPosition: [Account, number][] = signers.map((signer, index) => [signer, bitPositions[index]]);\n    signersAndBitPosition.sort((a, b) => a[1] - b[1]);\n\n    // Extract the sorted signers and their positions into separate arrays\n    this.signers = signersAndBitPosition.map((value) => value[0]);\n    this.signerIndicies = signersAndBitPosition.map((value) => value[1]);\n\n    // Create a bitmap representing which public keys from the MultiKey are being used\n    // This bitmap is used during signature verification to identify which public keys\n    // should be used to verify each signature\n    this.signaturesBitmap = this.publicKey.createBitmap({ bits: bitPositions });\n  }\n\n  /**\n   * Static constructor to create a MultiKeyAccount using the provided public keys and signers.\n   *\n   * @param args - The arguments for creating a MultiKeyAccount.\n   * @param args.publicKeys - The N public keys of the MultiKeyAccount.\n   * @param args.signaturesRequired - The number of signatures required to authorize a transaction.\n   * @param args.signers - An array of M signers that will be used to sign the transaction.\n   * @returns MultiKeyAccount - The newly created MultiKeyAccount.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromPublicKeysAndSigners(args: {\n    address?: AccountAddressInput;\n    publicKeys: PublicKey[];\n    signaturesRequired: number;\n    signers: SingleKeySignerOrLegacyEd25519Account[];\n  }): MultiKeyAccount {\n    const { address, publicKeys, signaturesRequired, signers } = args;\n    const multiKey = new MultiKey({ publicKeys, signaturesRequired });\n    return new MultiKeyAccount({ multiKey, signers, address });\n  }\n\n  /**\n   * Determines if the provided account is a multi-key account.\n   *\n   * @param account - The account to check.\n   * @returns A boolean indicating whether the account is a multi-key account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static isMultiKeySigner(account: Account): account is MultiKeyAccount {\n    return account instanceof MultiKeyAccount;\n  }\n\n  /**\n   * Sign a message using the account's signers and return an AccountAuthenticator containing the signature along with the\n   * account's public key.\n   * @param message - The signing message, represented as binary input in hexadecimal format.\n   * @returns An instance of AccountAuthenticatorMultiKey that includes the signature and the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorMultiKey {\n    return new AccountAuthenticatorMultiKey(this.publicKey, this.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's signers, returning an AccountAuthenticator that contains the signature and the\n   * account's public key.\n   * @param transaction - The raw transaction to be signed.\n   * @returns An AccountAuthenticatorMultiKey containing the signature of the transaction along with the account's public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorMultiKey {\n    return new AccountAuthenticatorMultiKey(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Waits for any proofs on KeylessAccount signers to be fetched. This ensures that signing with the KeylessAccount does not\n   * fail due to missing proofs.\n   * @return {Promise<void>} A promise that resolves when all proofs have been fetched.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async waitForProofFetch(): Promise<void> {\n    const keylessSigners = this.signers.filter(\n      (signer) => signer instanceof AbstractKeylessAccount,\n    ) as AbstractKeylessAccount[];\n    const promises = keylessSigners.map(async (signer) => signer.waitForProofFetch());\n    await Promise.all(promises);\n  }\n\n  /**\n   * Validates that the Keyless Account can be used to sign transactions.\n   * @return\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async checkKeylessAccountValidity(aptosConfig: AptosConfig): Promise<void> {\n    const keylessSigners = this.signers.filter(\n      (signer) => signer instanceof AbstractKeylessAccount,\n    ) as AbstractKeylessAccount[];\n    const promises = keylessSigners.map((signer) => signer.checkKeylessAccountValidity(aptosConfig));\n    await Promise.all(promises);\n  }\n\n  /**\n   * Sign the given message using the MultiKeyAccount's signers\n   * @param data - The data to be signed in HexInput format.\n   * @returns MultiKeySignature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(data: HexInput): MultiKeySignature {\n    const signatures = [];\n    for (const signer of this.signers) {\n      signatures.push(signer.sign(data));\n    }\n    return new MultiKeySignature({ signatures, bitmap: this.signaturesBitmap });\n  }\n\n  /**\n   * Sign the given transaction using the MultiKeyAccount's signers.\n   * This function aggregates signatures from all signers associated with the MultiKeyAccount.\n   *\n   * @param transaction - The transaction to be signed.\n   * @returns MultiKeySignature - An object containing the aggregated signatures and a bitmap of the signatures.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): MultiKeySignature {\n    const signatures = [];\n    for (const signer of this.signers) {\n      signatures.push(signer.signTransaction(transaction));\n    }\n    return new MultiKeySignature({ signatures, bitmap: this.signaturesBitmap });\n  }\n\n  /**\n   * Verify the given message and signature with the public keys.\n   *\n   * This function checks if the provided signatures are valid for the given message using the corresponding public keys.\n   * Note: If you are using KeylessAccounts, you must use `verifySignatureAsync` instead.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message MultiKeySignature containing multiple signatures.\n   * @returns A boolean indicating whether the signatures are valid for the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: { message: HexInput; signature: MultiKeySignature }): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public keys.\n   *\n   * This function checks if the provided signatures are valid for the given message using the corresponding public keys.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message MultiKeySignature containing multiple signatures.\n   * @param args.options.throwErrorWithReason - Whether to throw an error with the reason for the verification failure.\n   * @returns A boolean indicating whether the signatures are valid for the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: MultiKeySignature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return await this.publicKey.verifySignatureAsync(args);\n  }\n}\n","import { AptosConfig } from \"../api\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { Ed25519PrivateKey, Signature } from \"../core/crypto\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../core/crypto/multiEd25519\";\nimport { AccountAuthenticatorMultiEd25519 } from \"../transactions/authenticator/account\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { HexInput, SigningScheme } from \"../types\";\nimport type { Account } from \"./Account\";\n\nexport interface MultiEd25519SignerConstructorArgs {\n  publicKey: MultiEd25519PublicKey;\n  signers: Ed25519PrivateKey[];\n  address?: AccountAddressInput;\n}\n\nexport interface VerifyMultiEd25519SignatureArgs {\n  message: HexInput;\n  signature: MultiEd25519Signature;\n}\n\n/**\n * Signer implementation for the Multi-Ed25519 authentication scheme.\n *\n * Note: This authentication scheme is a legacy authentication scheme.  Prefer using MultiKeyAccounts as a\n * MultiKeyAccount can support any type of signer, not just Ed25519.  Generating a signer instance does not\n * create the account on-chain.\n */\nexport class MultiEd25519Account implements Account {\n  readonly publicKey: MultiEd25519PublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.MultiEd25519;\n\n  /**\n   * The signers used to sign messages.  These signers should correspond to public keys in the\n   * MultiEd25519Account.  The number of signers should be equal to this.publicKey.threshold.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signers: Ed25519PrivateKey[];\n\n  /**\n   * An array of indices where for signer[i], signerIndicies[i] is the index of the corresponding public key in\n   * publicKey.publicKeys.  Used to derive the right public key to use for verification.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signerIndices: number[];\n\n  readonly signaturesBitmap: Uint8Array;\n\n  // region Constructors\n\n  constructor(args: MultiEd25519SignerConstructorArgs) {\n    const { signers, publicKey, address } = args;\n    this.publicKey = publicKey;\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n\n    if (publicKey.threshold > signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `Not enough signers provided to satisfy the required signatures. Need ${publicKey.threshold} signers, but only ${signers.length} provided`,\n      );\n    } else if (publicKey.threshold < signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `More signers provided than required. Need ${publicKey.threshold} signers, but ${signers.length} provided`,\n      );\n    }\n\n    // For each signer, find its corresponding position in the public keys array\n    const bitPositions: number[] = [];\n    for (const signer of signers) {\n      bitPositions.push(this.publicKey.getIndex(signer.publicKey()));\n    }\n\n    // Create pairs of [signer, position] and sort them by position\n    // This sorting is critical because:\n    // 1. The on-chain verification expects signatures to be in ascending order by bit position\n    // 2. The bitmap must match the order of signatures when verifying\n    const signersAndBitPosition: [Ed25519PrivateKey, number][] = signers.map((signer, index) => [\n      signer,\n      bitPositions[index],\n    ]);\n    signersAndBitPosition.sort((a, b) => a[1] - b[1]);\n\n    // Extract the sorted signers and their positions into separate arrays\n    this.signers = signersAndBitPosition.map((value) => value[0]);\n    this.signerIndices = signersAndBitPosition.map((value) => value[1]);\n\n    // Create a bitmap representing which public keys from the MultiEd25519PublicKey are being used\n    // This bitmap is used during signature verification to identify which public keys\n    // should be used to verify each signature\n    this.signaturesBitmap = this.publicKey.createBitmap({ bits: bitPositions });\n  }\n\n  // endregion\n\n  // region Account\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * @param args.message raw message data in HexInput format\n   * @param args.signature signed message Signature\n   * @returns\n   */\n  verifySignature(args: VerifyMultiEd25519SignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * MultiEd25519 signatures do not depend on chain state, so this function is\n   * equivalent to the synchronous verifySignature method.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature,\n    });\n  }\n\n  /**\n   * Sign a message using the account's Ed25519 private key.\n   * @param message the signing message, as binary input\n   * @return the AccountAuthenticator containing the signature, together with the account's public key\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorMultiEd25519 {\n    return new AccountAuthenticatorMultiEd25519(this.publicKey, this.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's Ed25519 private keys.\n   * @param transaction the raw transaction\n   * @return the AccountAuthenticator containing the signature of the transaction, together with the account's public key\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorMultiEd25519 {\n    return new AccountAuthenticatorMultiEd25519(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Sign the given message using the account's Ed25519 private keys.\n   * @param message in HexInput format\n   * @returns MultiEd25519Signature\n   */\n  sign(message: HexInput): MultiEd25519Signature {\n    const signatures = [];\n    for (const signer of this.signers) {\n      signatures.push(signer.sign(message));\n    }\n    return new MultiEd25519Signature({ signatures, bitmap: this.signaturesBitmap });\n  }\n\n  /**\n   * Sign the given transaction using the available signing capabilities.\n   * @param transaction the transaction to be signed\n   * @returns Signature\n   */\n  signTransaction(transaction: AnyRawTransaction): MultiEd25519Signature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  // endregion\n}\n","import { SigningScheme } from \"../types\";\nimport { AccountAddress } from \"../core\";\nimport { Deserializer } from \"../bcs/deserializer\";\n\nexport function deserializeSchemeAndAddress(deserializer: Deserializer): {\n  address: AccountAddress;\n  signingScheme: SigningScheme;\n} {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  // Validate that signingScheme is a valid SigningScheme value\n  if (!Object.values(SigningScheme).includes(signingScheme)) {\n    throw new Error(`Deserialization of Account failed: SigningScheme variant ${signingScheme} is invalid`);\n  }\n  const address = AccountAddress.deserialize(deserializer);\n  return { address, signingScheme };\n}\n","import { Deserializer, Serializer } from \"../bcs\";\nimport { AnyPublicKeyVariant, HexInput, SigningScheme } from \"../types\";\nimport { MultiKeyAccount } from \"./MultiKeyAccount\";\nimport { Account } from \"./Account\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { isSingleKeySigner, SingleKeyAccount, SingleKeySignerOrLegacyEd25519Account } from \"./SingleKeyAccount\";\nimport { KeylessAccount } from \"./KeylessAccount\";\nimport { FederatedKeylessAccount } from \"./FederatedKeylessAccount\";\nimport { AbstractKeylessAccount } from \"./AbstractKeylessAccount\";\nimport {\n  AccountAddress,\n  Ed25519PrivateKey,\n  getIssAudAndUidVal,\n  Hex,\n  MultiKey,\n  Secp256k1PrivateKey,\n  ZeroKnowledgeSig,\n} from \"../core\";\nimport { deserializeSchemeAndAddress } from \"./utils\";\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\n\nfunction serializeKeylessAccountCommon(account: AbstractKeylessAccount, serializer: Serializer): void {\n  serializer.serializeStr(account.jwt);\n  serializer.serializeStr(account.uidKey);\n  serializer.serializeFixedBytes(account.pepper);\n  account.ephemeralKeyPair.serialize(serializer);\n  if (account.proof === undefined) {\n    throw new Error(\"Cannot serialize - proof undefined\");\n  }\n  account.proof.serialize(serializer);\n  serializer.serializeOption(account.verificationKeyHash, 32);\n}\n\nfunction deserializeKeylessAccountCommon(deserializer: Deserializer): {\n  jwt: string;\n  uidKey: string;\n  pepper: Uint8Array;\n  ephemeralKeyPair: EphemeralKeyPair;\n  proof: ZeroKnowledgeSig;\n  verificationKeyHash?: Uint8Array;\n} {\n  const jwt = deserializer.deserializeStr();\n  const uidKey = deserializer.deserializeStr();\n  const pepper = deserializer.deserializeFixedBytes(31);\n  const ephemeralKeyPair = EphemeralKeyPair.deserialize(deserializer);\n  const proof = ZeroKnowledgeSig.deserialize(deserializer);\n  const verificationKeyHash = deserializer.deserializeOption(\"fixedBytes\", 32);\n  return { jwt, uidKey, pepper, ephemeralKeyPair, proof, verificationKeyHash };\n}\n\n/**\n * Utility functions for working with accounts.\n */\nexport namespace AccountUtils {\n  export function toBytes(account: Account): Uint8Array {\n    const serializer = new Serializer();\n    serializer.serializeU32AsUleb128(account.signingScheme);\n    account.accountAddress.serialize(serializer);\n    switch (account.signingScheme) {\n      case SigningScheme.Ed25519:\n        (account as Ed25519Account).privateKey.serialize(serializer);\n        return serializer.toUint8Array();\n      case SigningScheme.SingleKey: {\n        if (!isSingleKeySigner(account)) {\n          throw new Error(\"Account is not a SingleKeySigner\");\n        }\n        const anyPublicKey = account.getAnyPublicKey();\n        serializer.serializeU32AsUleb128(anyPublicKey.variant);\n        switch (anyPublicKey.variant) {\n          case AnyPublicKeyVariant.Keyless: {\n            const keylessAccount = account as KeylessAccount;\n            serializeKeylessAccountCommon(keylessAccount, serializer);\n            return serializer.toUint8Array();\n          }\n          case AnyPublicKeyVariant.FederatedKeyless: {\n            const federatedKeylessAccount = account as FederatedKeylessAccount;\n            serializeKeylessAccountCommon(federatedKeylessAccount, serializer);\n            federatedKeylessAccount.publicKey.jwkAddress.serialize(serializer);\n            serializer.serializeBool(federatedKeylessAccount.audless);\n            return serializer.toUint8Array();\n          }\n          case AnyPublicKeyVariant.Secp256k1:\n          case AnyPublicKeyVariant.Ed25519: {\n            const singleKeyAccount = account as SingleKeyAccount;\n            singleKeyAccount.privateKey.serialize(serializer);\n            return serializer.toUint8Array();\n          }\n          default: {\n            throw new Error(`Invalid public key variant: ${anyPublicKey.variant}`);\n          }\n        }\n      }\n      case SigningScheme.MultiKey: {\n        const multiKeyAccount = account as MultiKeyAccount;\n        multiKeyAccount.publicKey.serialize(serializer);\n        serializer.serializeU32AsUleb128(multiKeyAccount.signers.length);\n        multiKeyAccount.signers.forEach((signer) => {\n          serializer.serializeFixedBytes(toBytes(signer));\n        });\n        return serializer.toUint8Array();\n      }\n      default:\n        throw new Error(`Deserialization of Account failed: invalid signingScheme value ${account.signingScheme}`);\n    }\n  }\n\n  export function toHexStringWithoutPrefix(account: Account): string {\n    return Hex.hexInputToStringWithoutPrefix(toBytes(account));\n  }\n\n  export function toHexString(account: Account): string {\n    return Hex.hexInputToString(toBytes(account));\n  }\n\n  export function deserialize(deserializer: Deserializer): Account {\n    const { address, signingScheme } = deserializeSchemeAndAddress(deserializer);\n    switch (signingScheme) {\n      case SigningScheme.Ed25519: {\n        const privateKey = Ed25519PrivateKey.deserialize(deserializer);\n        return new Ed25519Account({ privateKey, address });\n      }\n      case SigningScheme.SingleKey: {\n        const variantIndex = deserializer.deserializeUleb128AsU32();\n        switch (variantIndex) {\n          case AnyPublicKeyVariant.Ed25519: {\n            const privateKey = Ed25519PrivateKey.deserialize(deserializer);\n            return new SingleKeyAccount({ privateKey, address });\n          }\n          case AnyPublicKeyVariant.Secp256k1: {\n            const privateKey = Secp256k1PrivateKey.deserialize(deserializer);\n            return new SingleKeyAccount({ privateKey, address });\n          }\n          case AnyPublicKeyVariant.Keyless: {\n            const keylessComponents = deserializeKeylessAccountCommon(deserializer);\n            const jwtClaims = getIssAudAndUidVal(keylessComponents);\n            return new KeylessAccount({ ...keylessComponents, ...jwtClaims });\n          }\n          case AnyPublicKeyVariant.FederatedKeyless: {\n            const keylessComponents = deserializeKeylessAccountCommon(deserializer);\n            const jwkAddress = AccountAddress.deserialize(deserializer);\n            const audless = deserializer.deserializeBool();\n            const jwtClaims = getIssAudAndUidVal(keylessComponents);\n            return new FederatedKeylessAccount({ ...keylessComponents, ...jwtClaims, jwkAddress, audless });\n          }\n          default:\n            throw new Error(`Unsupported public key variant ${variantIndex}`);\n        }\n      }\n      case SigningScheme.MultiKey: {\n        const multiKey = MultiKey.deserialize(deserializer);\n        const length = deserializer.deserializeUleb128AsU32();\n        const signers = new Array<SingleKeySignerOrLegacyEd25519Account>();\n        for (let i = 0; i < length; i += 1) {\n          const signer = deserialize(deserializer);\n          if (!isSingleKeySigner(signer) && !(signer instanceof Ed25519Account)) {\n            throw new Error(\n              \"Deserialization of MultiKeyAccount failed. Signer is not a SingleKeySigner or Ed25519Account\",\n            );\n          }\n          signers.push(signer);\n        }\n        return new MultiKeyAccount({ multiKey, signers, address });\n      }\n      default:\n        throw new Error(`Deserialization of Account failed: invalid signingScheme value ${signingScheme}`);\n    }\n  }\n\n  export function keylessAccountFromHex(hex: HexInput): KeylessAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof KeylessAccount)) {\n      throw new Error(\"Deserialization of KeylessAccount failed\");\n    }\n    return account;\n  }\n\n  export function federatedKeylessAccountFromHex(hex: HexInput): FederatedKeylessAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof FederatedKeylessAccount)) {\n      throw new Error(\"Deserialization of FederatedKeylessAccount failed\");\n    }\n    return account;\n  }\n\n  export function multiKeyAccountFromHex(hex: HexInput): MultiKeyAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof MultiKeyAccount)) {\n      throw new Error(\"Deserialization of MultiKeyAccount failed\");\n    }\n    return account;\n  }\n\n  export function singleKeyAccountFromHex(hex: HexInput): SingleKeyAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof SingleKeyAccount)) {\n      throw new Error(\"Deserialization of SingleKeyAccount failed\");\n    }\n    return account;\n  }\n\n  export function ed25519AccountFromHex(hex: HexInput): Ed25519Account {\n    const account = fromHex(hex);\n    if (!(account instanceof Ed25519Account)) {\n      throw new Error(\"Deserialization of Ed25519Account failed\");\n    }\n    return account;\n  }\n\n  export function fromHex(hex: HexInput): Account {\n    return deserialize(Deserializer.fromHex(hex));\n  }\n\n  export function fromBytes(bytes: Uint8Array): Account {\n    return fromHex(bytes);\n  }\n}\n","import { sha3_256 } from \"@noble/hashes/sha3\";\nimport { AccountAddress } from \"../core\";\nimport { AbstractPublicKey, AbstractSignature } from \"../core/crypto/abstraction\";\nimport { SigningScheme, HexInput } from \"../types\";\nimport { Account } from \"./Account\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AccountAuthenticatorAbstraction } from \"../transactions/authenticator/account\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { Serializer } from \"../bcs/serializer\";\nimport { isValidFunctionInfo } from \"../utils/helpers\";\n\ntype AbstractedAccountConstructorArgs = {\n  /**\n   * The account address of the account.\n   */\n  accountAddress: AccountAddress;\n  /**\n   * The signer function signs transactions and returns the `authenticator` bytes in the `AbstractionAuthData`.\n   *\n   * @param digest - The SHA256 hash of the transaction signing message\n   * @returns The `authenticator` bytes that can be used to verify the signature.\n   */\n  signer: (digest: HexInput) => Uint8Array;\n  /**\n   * The authentication function that will be used to verify the signature.\n   *\n   * @example\n   * ```ts\n   * const authenticationFunction = `${accountAddress}::permissioned_delegation::authenticate`;\n   * ```\n   */\n  authenticationFunction: string;\n};\n\nexport class AbstractedAccount extends Account {\n  public readonly publicKey: AbstractPublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly authenticationFunction: string;\n\n  readonly signingScheme = SigningScheme.SingleKey;\n\n  constructor({ signer, accountAddress, authenticationFunction }: AbstractedAccountConstructorArgs) {\n    super();\n\n    if (!isValidFunctionInfo(authenticationFunction)) {\n      throw new Error(`Invalid authentication function ${authenticationFunction} passed into AbstractedAccount`);\n    }\n\n    this.authenticationFunction = authenticationFunction;\n    this.accountAddress = accountAddress;\n    this.publicKey = new AbstractPublicKey(this.accountAddress);\n    this.sign = (digest: HexInput) => new AbstractSignature(signer(digest));\n  }\n\n  /**\n   * Creates an `AbstractedAccount` from an `Ed25519Account` that has a permissioned signer function and\n   * using the `0x1::permissioned_delegation::authenticate` function to verify the signature.\n   *\n   * @param signer - The `Ed25519Account` that can be used to sign permissioned transactions.\n   * @returns The `AbstractedAccount`\n   */\n  public static fromPermissionedSigner({\n    signer,\n    accountAddress,\n  }: {\n    signer: Ed25519Account;\n    accountAddress?: AccountAddress;\n  }) {\n    return new AbstractedAccount({\n      signer: (digest: HexInput) => {\n        const serializer = new Serializer();\n        signer.publicKey.serialize(serializer);\n        signer.sign(digest).serialize(serializer);\n        return serializer.toUint8Array();\n      },\n      accountAddress: accountAddress ?? signer.accountAddress,\n      authenticationFunction: \"0x1::permissioned_delegation::authenticate\",\n    });\n  }\n\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorAbstraction {\n    return new AccountAuthenticatorAbstraction(\n      this.authenticationFunction,\n      sha3_256(message),\n      this.sign(sha3_256(message)).toUint8Array(),\n    );\n  }\n\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorAbstraction {\n    return this.signWithAuthenticator(generateSigningMessageForTransaction(transaction));\n  }\n\n  sign: (message: HexInput) => AbstractSignature;\n\n  signTransaction(transaction: AnyRawTransaction): AbstractSignature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  /**\n   * Update the signer function for the account. This can be done after asynchronous operations are complete\n   * to update the context of the signer function.\n   *\n   * @param signer - The new signer function to use for the account.\n   */\n  public setSigner(signer: (digest: HexInput) => HexInput): void {\n    this.sign = (digest: HexInput) => new AbstractSignature(signer(digest));\n  }\n}\n","import { sha3_256 } from \"@noble/hashes/sha3\";\nimport { Serializer } from \"../bcs/serializer\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport { AccountAuthenticatorAbstraction } from \"../transactions/authenticator/account\";\nimport { HexInput } from \"../types\";\nimport { isValidFunctionInfo } from \"../utils/helpers\";\nimport { AbstractedAccount } from \"./AbstractedAccount\";\n\ntype DerivableAbstractedAccountArgs = {\n  /**\n   * The signer function signs transactions and returns the `authenticator` bytes in the `AbstractionAuthData`.\n   *\n   * @param digest - The SHA256 hash of the transaction signing message\n   * @returns The `authenticator` bytes that can be used to verify the signature.\n   */\n  signer: (digest: HexInput) => Uint8Array;\n\n  /**\n   * The authentication function that will be used to verify the signature.\n   *\n   * @example\n   * ```ts\n   * const authenticationFunction = `${accountAddress}::permissioned_delegation::authenticate`;\n   * ```\n   */\n  authenticationFunction: string;\n\n  /**\n   * The abstract public key that is used to identify the account.\n   * Depends on the use cases, most of the time it is the public key of the source wallet\n   */\n  abstractPublicKey: Uint8Array;\n};\n\nexport class DerivableAbstractedAccount extends AbstractedAccount {\n  /**\n   * The abstract public key that is used to identify the account.\n   * Depends on the use cases, most of the time it is the public key of the source wallet\n   */\n  readonly abstractPublicKey: Uint8Array;\n\n  /**\n   * The domain separator used to calculate the DAA account address.\n   */\n  static readonly ADDRESS_DOMAIN_SEPERATOR: number = 5;\n\n  constructor({ signer, authenticationFunction, abstractPublicKey }: DerivableAbstractedAccountArgs) {\n    const daaAccountAddress = new AccountAddress(\n      DerivableAbstractedAccount.computeAccountAddress(authenticationFunction, abstractPublicKey),\n    );\n    super({\n      accountAddress: daaAccountAddress,\n      signer,\n      authenticationFunction,\n    });\n    this.abstractPublicKey = abstractPublicKey;\n  }\n\n  /**\n   * Compute the account address of the DAA\n   * The DAA account address is computed by hashing the function info and the account identity\n   * and appending the domain separator (5)\n   *\n   * @param functionInfo - The authentication function\n   * @param accountIdentifier - The account identity\n   * @returns The account address\n   */\n  static computeAccountAddress(functionInfo: string, accountIdentifier: Uint8Array): Uint8Array {\n    if (!isValidFunctionInfo(functionInfo)) {\n      throw new Error(`Invalid authentication function ${functionInfo} passed into DerivableAbstractedAccount`);\n    }\n    const [moduleAddress, moduleName, functionName] = functionInfo.split(\"::\");\n\n    const hash = sha3_256.create();\n    // Serialize and append the function info\n    const serializer = new Serializer();\n    AccountAddress.fromString(moduleAddress).serialize(serializer);\n    serializer.serializeStr(moduleName);\n    serializer.serializeStr(functionName);\n    hash.update(serializer.toUint8Array());\n\n    // Serialize and append the account identity\n    const s2 = new Serializer();\n    s2.serializeBytes(accountIdentifier);\n    hash.update(s2.toUint8Array());\n\n    // Append the domain separator\n    hash.update(new Uint8Array([DerivableAbstractedAccount.ADDRESS_DOMAIN_SEPERATOR]));\n\n    return hash.digest();\n  }\n\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorAbstraction {\n    return new AccountAuthenticatorAbstraction(\n      this.authenticationFunction,\n      sha3_256(message),\n      this.sign(sha3_256(message)).value,\n      this.abstractPublicKey,\n    );\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file handles the transaction creation lifecycle.\n * It holds different operations to generate a transaction payload, a raw transaction,\n * and a signed transaction that can be simulated, signed and submitted to chain.\n */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput, Hex, PublicKey } from \"../../core\";\nimport {\n  AnyPublicKey,\n  AnySignature,\n  KeylessPublicKey,\n  KeylessSignature,\n  Secp256k1PublicKey,\n  FederatedKeylessPublicKey,\n  MultiKey,\n  MultiKeySignature,\n} from \"../../core/crypto\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { getInfo } from \"../../internal/utils\";\nimport { getLedgerInfo } from \"../../internal/general\";\nimport { getGasPriceEstimation } from \"../../internal/transaction\";\nimport { NetworkToChainId } from \"../../utils/apiEndpoints\";\nimport { DEFAULT_MAX_GAS_AMOUNT, DEFAULT_TXN_EXP_SEC_FROM_NOW } from \"../../utils/const\";\nimport { normalizeBundle } from \"../../utils/normalizeBundle\";\nimport {\n  AccountAuthenticator,\n  AccountAuthenticatorEd25519,\n  AccountAuthenticatorMultiEd25519,\n  AccountAuthenticatorMultiKey,\n  AccountAuthenticatorNoAccountAuthenticator,\n  AccountAuthenticatorSingleKey,\n} from \"../authenticator/account\";\nimport {\n  TransactionAuthenticator,\n  TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorFeePayer,\n  TransactionAuthenticatorMultiAgent,\n  TransactionAuthenticatorMultiEd25519,\n  TransactionAuthenticatorSingleSender,\n} from \"../authenticator/transaction\";\nimport {\n  ChainId,\n  EntryFunction,\n  FeePayerRawTransaction,\n  MultiAgentRawTransaction,\n  MultiSig,\n  MultiSigTransactionPayload,\n  RawTransaction,\n  Script,\n  TransactionPayloadEntryFunction,\n  TransactionPayloadMultiSig,\n  TransactionPayloadScript,\n} from \"../instances\";\nimport { SignedTransaction } from \"../instances/signedTransaction\";\nimport {\n  AnyRawTransaction,\n  AnyTransactionPayloadInstance,\n  EntryFunctionArgumentTypes,\n  InputGenerateMultiAgentRawTransactionArgs,\n  InputGenerateRawTransactionArgs,\n  InputGenerateSingleSignerRawTransactionArgs,\n  InputGenerateTransactionOptions,\n  InputScriptData,\n  InputSimulateTransactionData,\n  InputMultiSigDataWithRemoteABI,\n  InputEntryFunctionDataWithRemoteABI,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputSubmitTransactionData,\n  InputGenerateTransactionPayloadDataWithABI,\n  InputEntryFunctionDataWithABI,\n  InputMultiSigDataWithABI,\n  InputViewFunctionDataWithRemoteABI,\n  InputViewFunctionDataWithABI,\n  FunctionABI,\n} from \"../types\";\nimport { convertArgument, fetchEntryFunctionAbi, fetchViewFunctionAbi, standardizeTypeTags } from \"./remoteAbi\";\nimport { memoizeAsync } from \"../../utils/memoize\";\nimport { isScriptDataInput } from \"./helpers\";\nimport { SimpleTransaction } from \"../instances/simpleTransaction\";\nimport { MultiAgentTransaction } from \"../instances/multiAgentTransaction\";\nimport { getFunctionParts } from \"../../utils/helpers\";\n\n/**\n * Builds a transaction payload based on the provided arguments and returns a transaction payload.\n * This function uses the RemoteABI by default, but can also utilize a specified ABI.\n * When we call our `generateTransactionPayload` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n * @param args - The input data for generating the transaction payload.\n * @param args.function - The function to be called, specified in the format \"moduleAddress::moduleName::functionName\".\n * @param args.functionArguments - The arguments to pass to the function.\n * @param args.typeArguments - The type arguments for the function.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.abi - The ABI to use for the transaction, if not using the RemoteABI.\n *\n * @returns TransactionPayload - The generated transaction payload, which can be of type TransactionPayloadScript,\n * TransactionPayloadMultiSig, or TransactionPayloadEntryFunction.\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(args: InputScriptData): Promise<TransactionPayloadScript>;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(\n  args: InputEntryFunctionDataWithRemoteABI,\n): Promise<TransactionPayloadEntryFunction>;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(\n  args: InputMultiSigDataWithRemoteABI,\n): Promise<TransactionPayloadMultiSig>;\n\n/**\n * Builds a transaction payload based on the data argument and returns\n * a transaction payload - TransactionPayloadScript | TransactionPayloadMultiSig | TransactionPayloadEntryFunction\n *\n * This uses the RemoteABI by default, and the remote ABI can be skipped by using generateTransactionPayloadWithABI\n *\n * @param args.data GenerateTransactionPayloadData\n *\n * @return TransactionPayload\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(\n  args: InputGenerateTransactionPayloadDataWithRemoteABI,\n): Promise<AnyTransactionPayloadInstance> {\n  if (isScriptDataInput(args)) {\n    return generateTransactionPayloadScript(args);\n  }\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  const functionAbi = await fetchAbi({\n    key: \"entry-function\",\n    moduleAddress,\n    moduleName,\n    functionName,\n    aptosConfig: args.aptosConfig,\n    abi: args.abi,\n    fetch: fetchEntryFunctionAbi,\n  });\n\n  // Fill in the ABI\n  return generateTransactionPayloadWithABI({ ...args, abi: functionAbi });\n}\n\n/**\n * Generates a transaction payload using the provided ABI and function details.\n * This function helps create a properly structured transaction payload for executing a specific function on a module.\n *\n * @param args - The input data required to generate the transaction payload.\n * @param args.abi - The ABI of the function to be executed.\n * @param args.function - The fully qualified name of the function in the format `moduleAddress::moduleName::functionName`.\n * @param args.typeArguments - An array of type arguments that correspond to the function's type parameters.\n * @param args.functionArguments - An array of arguments to be passed to the function.\n * @param args.multisigAddress - (Optional) The address for a multisig transaction if applicable.\n *\n * @throws Error if the type argument count does not match the ABI or if the number of function arguments is incorrect.\n * @group Implementation\n * @category Transactions\n */\nexport function generateTransactionPayloadWithABI(args: InputEntryFunctionDataWithABI): TransactionPayloadEntryFunction;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function generateTransactionPayloadWithABI(args: InputMultiSigDataWithABI): TransactionPayloadMultiSig;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function generateTransactionPayloadWithABI(\n  args: InputGenerateTransactionPayloadDataWithABI,\n): AnyTransactionPayloadInstance {\n  const functionAbi = args.abi;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // Ensure that all type arguments are typed properly\n  const typeArguments = standardizeTypeTags(args.typeArguments);\n\n  // Check the type argument count against the ABI\n  if (typeArguments.length !== functionAbi.typeParameters.length) {\n    throw new Error(\n      `Type argument count mismatch, expected ${functionAbi.typeParameters.length}, received ${typeArguments.length}`,\n    );\n  }\n\n  // Check all BCS types, and convert any non-BCS types\n  const functionArguments: Array<EntryFunctionArgumentTypes> = args.functionArguments.map((arg, i) =>\n    /**\n     * Converts the argument for a specified function using its ABI and type arguments.\n     * This function helps ensure that the correct number of arguments is provided for the function call.\n     *\n     * @param args - The arguments for the function call.\n     * @param args.function - The specific function to be invoked.\n     * @param functionAbi - The ABI (Application Binary Interface) of the function, which includes parameter details.\n     * @param arg - The argument to be converted.\n     * @param i - The index of the argument in the function call.\n     * @param typeArguments - Additional type arguments that may be required for the conversion.\n     * @group Implementation\n     * @category Transactions\n     */\n    // TODO: Fix JSDoc\n    convertArgument(args.function, functionAbi, arg, i, typeArguments),\n  );\n\n  // Check that all arguments are accounted for\n  if (functionArguments.length !== functionAbi.parameters.length) {\n    throw new Error(\n      // eslint-disable-next-line max-len\n      `Too few arguments for '${moduleAddress}::${moduleName}::${functionName}', expected ${functionAbi.parameters.length} but got ${functionArguments.length}`,\n    );\n  }\n\n  // Generate entry function payload\n  const entryFunctionPayload = EntryFunction.build(\n    `${moduleAddress}::${moduleName}`,\n    functionName,\n    typeArguments,\n    functionArguments,\n  );\n\n  // Send it as multi sig if it's a multisig payload\n  if (\"multisigAddress\" in args) {\n    const multisigAddress = AccountAddress.from(args.multisigAddress);\n    return new TransactionPayloadMultiSig(\n      new MultiSig(multisigAddress, new MultiSigTransactionPayload(entryFunctionPayload)),\n    );\n  }\n\n  // Otherwise send as an entry function\n  return new TransactionPayloadEntryFunction(entryFunctionPayload);\n}\n\n/**\n * Generates the payload for a view function call using the provided arguments.\n * This function helps in preparing the necessary data to interact with a specific view function on the blockchain.\n *\n * @param args - The input data required to generate the view function payload.\n * @param args.function - The function identifier in the format \"moduleAddress::moduleName::functionName\".\n * @param args.aptosConfig - Configuration settings for the Aptos client.\n * @param args.abi - The ABI (Application Binary Interface) of the module.\n *\n * @returns The generated payload for the view function call.\n * @group Implementation\n * @category Transactions\n */\nexport async function generateViewFunctionPayload(args: InputViewFunctionDataWithRemoteABI): Promise<EntryFunction> {\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  const functionAbi = await fetchAbi({\n    key: \"view-function\",\n    moduleAddress,\n    moduleName,\n    functionName,\n    aptosConfig: args.aptosConfig,\n    abi: args.abi,\n    fetch: fetchViewFunctionAbi,\n  });\n\n  // Fill in the ABI\n  return generateViewFunctionPayloadWithABI({ abi: functionAbi, ...args });\n}\n\n/**\n * Generates a payload for a view function call using the provided ABI and arguments.\n * This function ensures that the type arguments and function arguments are correctly formatted\n * and match the expected counts as defined in the ABI.\n *\n * @param args - The input data for generating the view function payload.\n * @param args.abi - The ABI of the function to be called.\n * @param args.function - The full name of the function in the format \"moduleAddress::moduleName::functionName\".\n * @param args.typeArguments - An array of type arguments to be used in the function call.\n * @param args.functionArguments - An array of arguments to be passed to the function.\n *\n * @throws Error if the type argument count does not match the ABI or if the function arguments\n * do not match the expected parameters defined in the ABI.\n * @group Implementation\n * @category Transactions\n */\nexport function generateViewFunctionPayloadWithABI(args: InputViewFunctionDataWithABI): EntryFunction {\n  const functionAbi = args.abi;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // Ensure that all type arguments are typed properly\n  const typeArguments = standardizeTypeTags(args.typeArguments);\n\n  // Check the type argument count against the ABI\n  if (typeArguments.length !== functionAbi.typeParameters.length) {\n    throw new Error(\n      `Type argument count mismatch, expected ${functionAbi.typeParameters.length}, received ${typeArguments.length}`,\n    );\n  }\n\n  // Check all BCS types, and convert any non-BCS types\n  const functionArguments: Array<EntryFunctionArgumentTypes> =\n    args?.functionArguments?.map((arg, i) => convertArgument(args.function, functionAbi, arg, i, typeArguments)) ?? [];\n\n  // Check that all arguments are accounted for\n  if (functionArguments.length !== functionAbi.parameters.length) {\n    throw new Error(\n      // eslint-disable-next-line max-len\n      `Too few arguments for '${moduleAddress}::${moduleName}::${functionName}', expected ${functionAbi.parameters.length} but got ${functionArguments.length}`,\n    );\n  }\n\n  // Generate entry function payload\n  return EntryFunction.build(`${moduleAddress}::${moduleName}`, functionName, typeArguments, functionArguments);\n}\n\n/**\n * Generates a transaction payload script based on the provided input data.\n * This function helps in creating a structured script for transaction processing.\n *\n * @param args - The input data required to generate the transaction payload script.\n * @param args.bytecode - The bytecode to be converted into a Uint8Array.\n * @param args.typeArguments - The type arguments that will be standardized.\n * @param args.functionArguments - The arguments for the function being called.\n * @returns A new instance of TransactionPayloadScript.\n * @group Implementation\n * @category Transactions\n */\nfunction generateTransactionPayloadScript(args: InputScriptData) {\n  return new TransactionPayloadScript(\n    new Script(\n      Hex.fromHexInput(args.bytecode).toUint8Array(),\n      standardizeTypeTags(args.typeArguments),\n      args.functionArguments,\n    ),\n  );\n}\n\n/**\n * Generates a raw transaction that can be sent to the Aptos network.\n *\n * @param args - The arguments for generating the raw transaction.\n * @param args.aptosConfig - The configuration for the Aptos network.\n * @param args.sender - The transaction's sender account address as a hex input.\n * @param args.payload - The transaction payload, which can be created using generateTransactionPayload().\n * @param args.options - Optional parameters for transaction generation.\n * @param args.feePayerAddress - The address of the fee payer for sponsored transactions.\n *\n * @returns RawTransaction - The generated raw transaction.\n * @group Implementation\n * @category Transactions\n */\nexport async function generateRawTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  payload: AnyTransactionPayloadInstance;\n  options?: InputGenerateTransactionOptions;\n  feePayerAddress?: AccountAddressInput;\n}): Promise<RawTransaction> {\n  const { aptosConfig, sender, payload, options, feePayerAddress } = args;\n\n  const getChainId = async () => {\n    if (NetworkToChainId[aptosConfig.network]) {\n      return { chainId: NetworkToChainId[aptosConfig.network] };\n    }\n    const info = await getLedgerInfo({ aptosConfig });\n    return { chainId: info.chain_id };\n  };\n\n  const getGasUnitPrice = async () => {\n    if (options?.gasUnitPrice) {\n      return { gasEstimate: options.gasUnitPrice };\n    }\n    const estimation = await getGasPriceEstimation({ aptosConfig });\n    return { gasEstimate: estimation.gas_estimate };\n  };\n\n  const getSequenceNumberForAny = async () => {\n    const getSequenceNumber = async () => {\n      if (options?.accountSequenceNumber !== undefined) {\n        return options.accountSequenceNumber;\n      }\n\n      return (await getInfo({ aptosConfig, accountAddress: sender })).sequence_number;\n    };\n\n    /**\n     * Check if is sponsored transaction to honor AIP-52\n     * {@link https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-52.md}\n     * @group Implementation\n     * @category Transactions\n     */\n    if (feePayerAddress && AccountAddress.from(feePayerAddress).equals(AccountAddress.ZERO)) {\n      // Handle sponsored transaction generation with the option that\n      // the main signer has not been created on chain\n      try {\n        // Check if main signer has been created on chain, if not assign sequence number 0\n        return await getSequenceNumber();\n      } catch (e: any) {\n        return 0;\n      }\n    } else {\n      return getSequenceNumber();\n    }\n  };\n  const [{ chainId }, { gasEstimate }, sequenceNumber] = await Promise.all([\n    getChainId(),\n    getGasUnitPrice(),\n    getSequenceNumberForAny(),\n  ]);\n\n  const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n    maxGasAmount: options?.maxGasAmount ? BigInt(options.maxGasAmount) : BigInt(DEFAULT_MAX_GAS_AMOUNT),\n    gasUnitPrice: options?.gasUnitPrice ?? BigInt(gasEstimate),\n    expireTimestamp: options?.expireTimestamp ?? BigInt(Math.floor(Date.now() / 1000) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n  };\n\n  return new RawTransaction(\n    AccountAddress.from(sender),\n    BigInt(sequenceNumber),\n    payload,\n    BigInt(maxGasAmount),\n    BigInt(gasUnitPrice),\n    BigInt(expireTimestamp),\n    new ChainId(chainId),\n  );\n}\n\n/**\n * Generates a transaction based on the provided arguments.\n * This function can create both simple and multi-agent transactions, allowing for flexible transaction handling.\n *\n * @param args - The input arguments for generating the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.sender - The transaction's sender account address as a hex input.\n * @param args.payload - The transaction payload, which can be created using `generateTransactionPayload()`.\n * @param args.options - Optional. Transaction options object.\n * @param args.secondarySignerAddresses - Optional. An array of addresses for additional signers in a multi-signature transaction.\n * @param args.feePayerAddress - Optional. The address of the fee payer for sponsored transactions.\n * @returns An instance of a transaction, which may include secondary signer addresses and a fee payer address.\n * @group Implementation\n * @category Transactions\n */\nexport async function buildTransaction(args: InputGenerateSingleSignerRawTransactionArgs): Promise<SimpleTransaction>;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport async function buildTransaction(args: InputGenerateMultiAgentRawTransactionArgs): Promise<MultiAgentTransaction>;\n\n/**\n * Generates a transaction based on the provided arguments\n *\n * Note: we can start with one function to support all different payload/transaction types,\n * and if to complex to use, we could have function for each type\n *\n * @param args.aptosConfig AptosConfig\n * @param args.sender The transaction's sender account address as a hex input\n * @param args.payload The transaction payload - can create by using generateTransactionPayload()\n * @param args.options optional. Transaction options object\n * @param args.secondarySignerAddresses optional. For when want to create a multi signers transaction\n * @param args.feePayerAddress optional. For when want to create a fee payer (aka sponsored) transaction\n *\n * @return An instance of a RawTransaction, plus optional secondary/fee payer addresses\n * ```\n * {\n *  rawTransaction: RawTransaction,\n *  secondarySignerAddresses?: Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n * @group Implementation\n * @category Transactions\n */\nexport async function buildTransaction(args: InputGenerateRawTransactionArgs): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, payload, options, feePayerAddress } = args;\n  // generate raw transaction\n  const rawTxn = await generateRawTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n    feePayerAddress,\n  });\n\n  // if multi agent transaction\n  if (\"secondarySignerAddresses\" in args) {\n    const signers: Array<AccountAddress> =\n      args.secondarySignerAddresses?.map((signer) => AccountAddress.from(signer)) ?? [];\n\n    return new MultiAgentTransaction(\n      rawTxn,\n      signers,\n      args.feePayerAddress ? AccountAddress.from(args.feePayerAddress) : undefined,\n    );\n  }\n  // return the raw transaction\n  return new SimpleTransaction(rawTxn, args.feePayerAddress ? AccountAddress.from(args.feePayerAddress) : undefined);\n}\n\n/**\n * Generate a signed transaction for simulation before submitting it to the chain.\n * This function helps in preparing a transaction that can be simulated, allowing users to verify its validity and expected behavior.\n *\n * @param args - The input data required to generate the signed transaction for simulation.\n * @param args.transaction - An Aptos transaction type to sign.\n * @param args.signerPublicKey - The public key of the signer.\n * @param args.secondarySignersPublicKeys - Optional. The public keys of secondary signers if it is a multi-signer transaction.\n * @param args.feePayerPublicKey - Optional. The public key of the fee payer in a sponsored transaction.\n * @param args.options - Optional. Additional options for simulating the transaction.\n *\n * @returns A signed serialized transaction that can be simulated.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSignedTransactionForSimulation(args: InputSimulateTransactionData): Uint8Array {\n  const { signerPublicKey, transaction, secondarySignersPublicKeys, feePayerPublicKey } = args;\n\n  const accountAuthenticator = getAuthenticatorForSimulation(signerPublicKey);\n\n  // fee payer transaction\n  if (transaction.feePayerAddress) {\n    const transactionToSign = new FeePayerRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n    if (transaction.secondarySignerAddresses) {\n      if (secondarySignersPublicKeys) {\n        secondaryAccountAuthenticators = secondarySignersPublicKeys.map((publicKey) =>\n          getAuthenticatorForSimulation(publicKey),\n        );\n      } else {\n        secondaryAccountAuthenticators = Array.from({ length: transaction.secondarySignerAddresses.length }, () =>\n          getAuthenticatorForSimulation(undefined),\n        );\n      }\n    }\n    const feePayerAuthenticator = getAuthenticatorForSimulation(feePayerPublicKey);\n\n    const transactionAuthenticator = new TransactionAuthenticatorFeePayer(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses ?? [],\n      secondaryAccountAuthenticators,\n      {\n        address: transaction.feePayerAddress,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // multi agent transaction\n  if (transaction.secondarySignerAddresses) {\n    const transactionToSign = new MultiAgentRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses,\n    );\n\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n\n    if (secondarySignersPublicKeys) {\n      secondaryAccountAuthenticators = secondarySignersPublicKeys.map((publicKey) =>\n        getAuthenticatorForSimulation(publicKey),\n      );\n    } else {\n      secondaryAccountAuthenticators = Array.from({ length: transaction.secondarySignerAddresses.length }, () =>\n        getAuthenticatorForSimulation(undefined),\n      );\n    }\n\n    const transactionAuthenticator = new TransactionAuthenticatorMultiAgent(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses,\n      secondaryAccountAuthenticators,\n    );\n\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // single signer raw transaction\n  let transactionAuthenticator;\n  if (accountAuthenticator instanceof AccountAuthenticatorEd25519) {\n    transactionAuthenticator = new TransactionAuthenticatorEd25519(\n      accountAuthenticator.public_key,\n      accountAuthenticator.signature,\n    );\n  } else if (\n    accountAuthenticator instanceof AccountAuthenticatorSingleKey ||\n    accountAuthenticator instanceof AccountAuthenticatorMultiKey\n  ) {\n    transactionAuthenticator = new TransactionAuthenticatorSingleSender(accountAuthenticator);\n  } else if (accountAuthenticator instanceof AccountAuthenticatorNoAccountAuthenticator) {\n    transactionAuthenticator = new TransactionAuthenticatorSingleSender(accountAuthenticator);\n  } else {\n    throw new Error(\"Invalid public key\");\n  }\n  return new SignedTransaction(transaction.rawTransaction, transactionAuthenticator).bcsToBytes();\n}\n\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function getAuthenticatorForSimulation(publicKey?: PublicKey) {\n  if (!publicKey) {\n    return new AccountAuthenticatorNoAccountAuthenticator();\n  }\n\n  // Wrap the public key types below with AnyPublicKey as they are only support through single sender.\n  // Learn more about AnyPublicKey here - https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-55.md\n  const convertToAnyPublicKey =\n    KeylessPublicKey.isInstance(publicKey) ||\n    FederatedKeylessPublicKey.isInstance(publicKey) ||\n    Secp256k1PublicKey.isInstance(publicKey);\n  const accountPublicKey = convertToAnyPublicKey ? new AnyPublicKey(publicKey) : publicKey;\n\n  // No need to for the signature to be matching in scheme. All that matters for simulations is that it's not valid\n  const invalidSignature = new Ed25519Signature(new Uint8Array(64));\n\n  if (Ed25519PublicKey.isInstance(accountPublicKey)) {\n    return new AccountAuthenticatorEd25519(accountPublicKey, invalidSignature);\n  }\n\n  if (AnyPublicKey.isInstance(accountPublicKey)) {\n    if (KeylessPublicKey.isInstance(accountPublicKey.publicKey)) {\n      return new AccountAuthenticatorSingleKey(\n        accountPublicKey,\n        new AnySignature(KeylessSignature.getSimulationSignature()),\n      );\n    }\n    return new AccountAuthenticatorSingleKey(accountPublicKey, new AnySignature(invalidSignature));\n  }\n\n  if (MultiKey.isInstance(accountPublicKey)) {\n    return new AccountAuthenticatorMultiKey(\n      accountPublicKey,\n      new MultiKeySignature({\n        signatures: accountPublicKey.publicKeys.map((pubKey) => {\n          if (KeylessPublicKey.isInstance(pubKey.publicKey) || FederatedKeylessPublicKey.isInstance(pubKey.publicKey)) {\n            return new AnySignature(KeylessSignature.getSimulationSignature());\n          }\n          return new AnySignature(invalidSignature);\n        }),\n        bitmap: accountPublicKey.createBitmap({\n          bits: Array(accountPublicKey.publicKeys.length)\n            .fill(0)\n            .map((_, i) => i),\n        }),\n      }),\n    );\n  }\n\n  throw new Error(\"Unsupported PublicKey used for simulations\");\n}\n\n/**\n * Generate a signed transaction ready for submission to the blockchain.\n * This function prepares the transaction by authenticating the sender and any additional signers based on the provided arguments.\n *\n * @param args - The input data required to generate the signed transaction.\n * @param args.transaction - An Aptos transaction type containing the details of the transaction.\n * @param args.senderAuthenticator - The account authenticator of the transaction sender.\n * @param args.feePayerAuthenticator - The authenticator for the fee payer, required if the transaction has a fee payer address.\n * @param args.additionalSignersAuthenticators - Optional authenticators for additional signers in a multi-signer transaction.\n *\n * @returns A Uint8Array representing the signed transaction in bytes.\n *\n * @throws Error if the feePayerAuthenticator is not provided for a fee payer transaction.\n * @throws Error if additionalSignersAuthenticators are not provided for a multi-signer transaction.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSignedTransaction(args: InputSubmitTransactionData): Uint8Array {\n  const { transaction, feePayerAuthenticator, additionalSignersAuthenticators } = args;\n  const senderAuthenticator = normalizeBundle(AccountAuthenticator, args.senderAuthenticator);\n\n  let txnAuthenticator: TransactionAuthenticator;\n  if (transaction.feePayerAddress) {\n    if (!feePayerAuthenticator) {\n      throw new Error(\"Must provide a feePayerAuthenticator argument to generate a signed fee payer transaction\");\n    }\n    txnAuthenticator = new TransactionAuthenticatorFeePayer(\n      senderAuthenticator,\n      transaction.secondarySignerAddresses ?? [],\n      additionalSignersAuthenticators ?? [],\n      {\n        address: transaction.feePayerAddress,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n  } else if (transaction.secondarySignerAddresses) {\n    if (!additionalSignersAuthenticators) {\n      throw new Error(\n        \"Must provide a additionalSignersAuthenticators argument to generate a signed multi agent transaction\",\n      );\n    }\n    txnAuthenticator = new TransactionAuthenticatorMultiAgent(\n      senderAuthenticator,\n      transaction.secondarySignerAddresses,\n      additionalSignersAuthenticators,\n    );\n  } else if (senderAuthenticator instanceof AccountAuthenticatorEd25519) {\n    txnAuthenticator = new TransactionAuthenticatorEd25519(\n      senderAuthenticator.public_key,\n      senderAuthenticator.signature,\n    );\n  } else if (senderAuthenticator instanceof AccountAuthenticatorMultiEd25519) {\n    txnAuthenticator = new TransactionAuthenticatorMultiEd25519(\n      senderAuthenticator.public_key,\n      senderAuthenticator.signature,\n    );\n  } else {\n    txnAuthenticator = new TransactionAuthenticatorSingleSender(senderAuthenticator);\n  }\n\n  return new SignedTransaction(transaction.rawTransaction, txnAuthenticator).bcsToBytes();\n}\n\n/**\n * Hashes the set of values using a SHA-3 256 hash algorithm.\n * @param input - An array of UTF-8 strings or Uint8Array byte arrays to be hashed.\n * @group Implementation\n * @category Transactions\n */\nexport function hashValues(input: (Uint8Array | string)[]): Uint8Array {\n  const hash = sha3Hash.create();\n  for (const item of input) {\n    hash.update(item);\n  }\n  return hash.digest();\n}\n\n/**\n * The domain separated prefix for hashing transactions\n * @group Implementation\n * @category Transactions\n */\nconst TRANSACTION_PREFIX = hashValues([\"APTOS::Transaction\"]);\n\n/**\n * Generates a user transaction hash for the provided transaction payload, which must already have an authenticator.\n * This function helps ensure the integrity and uniqueness of the transaction by producing a hash based on the signed transaction data.\n *\n * @param args - The input data required to submit the transaction.\n * @param args.authenticator - The authenticator for the transaction.\n * @param args.payload - The payload containing the transaction details.\n * @param args.sender - The address of the sender initiating the transaction.\n * @param args.sequenceNumber - The sequence number of the transaction for the sender.\n * @group Implementation\n * @category Transactions\n */\nexport function generateUserTransactionHash(args: InputSubmitTransactionData): string {\n  const signedTransaction = generateSignedTransaction(args);\n\n  // Transaction signature is defined as, the domain separated prefix based on struct (Transaction)\n  // Then followed by the type of the transaction for the enum, UserTransaction is 0\n  // Then followed by BCS encoded bytes of the signed transaction\n  return new Hex(hashValues([TRANSACTION_PREFIX, new Uint8Array([0]), signedTransaction])).toString();\n}\n\n/**\n * Fetches and caches ABIs while allowing for pass-through on provided ABIs.\n *\n * @param key - A unique identifier for the cached ABI.\n * @param moduleAddress - The address of the module from which to fetch the ABI.\n * @param moduleName - The name of the module containing the function.\n * @param functionName - The name of the function whose ABI is being fetched.\n * @param aptosConfig - Configuration settings for Aptos.\n * @param abi - An optional ABI to use if already available.\n * @param fetch - A function to fetch the ABI if it is not provided.\n * @group Implementation\n * @category Transactions\n */\nasync function fetchAbi<T extends FunctionABI>({\n  key,\n  moduleAddress,\n  moduleName,\n  functionName,\n  aptosConfig,\n  abi,\n  fetch,\n}: {\n  key: string;\n  moduleAddress: string;\n  moduleName: string;\n  functionName: string;\n  aptosConfig: AptosConfig;\n  abi?: T;\n  fetch: (moduleAddress: string, moduleName: string, functionName: string, aptosConfig: AptosConfig) => Promise<T>;\n}): Promise<T> {\n  if (abi !== undefined) {\n    return abi;\n  }\n\n  // We fetch the entry function ABI, and then pretend that we already had the ABI\n  return memoizeAsync(\n    async () => fetch(moduleAddress, moduleName, functionName, aptosConfig),\n    `${key}-${aptosConfig.network}-${moduleAddress}-${moduleName}-${functionName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  StructTag,\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagGeneric,\n  TypeTagReference,\n  TypeTagSigner,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU16,\n  TypeTagU256,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU8,\n  TypeTagVector,\n} from \".\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\n\n/**\n * Determines if the provided string is a valid Move identifier, which can only contain alphanumeric characters and underscores.\n * @param str - The string to validate as a Move identifier.\n * @group Implementation\n * @category Transactions\n */\nfunction isValidIdentifier(str: string) {\n  return !!str.match(/^[_a-zA-Z0-9]+$/);\n}\n\n/**\n * Determines if the provided character is a whitespace character. This function only works for single characters.\n * @param char - The character to check for whitespace.\n * @group Implementation\n * @category Transactions\n */\nfunction isValidWhitespaceCharacter(char: string) {\n  return !!char.match(/\\s/);\n}\n\n/**\n * Determines if a given string represents a generic type from the ABI, specifically in the format T0, T1, etc.\n * @param str - The string to evaluate for generic type format.\n * @group Implementation\n * @category Transactions\n */\nfunction isGeneric(str: string) {\n  return !!str.match(/^T[0-9]+$/);\n}\n\n/**\n * Determines if the provided string is a reference type, which is indicated by starting with an ampersand (&).\n * @param str - The string to evaluate for reference type.\n * @group Implementation\n * @category Transactions\n */\nfunction isRef(str: string) {\n  return !!str.match(/^&.+$/);\n}\n\n/**\n * Determines if the provided string represents a primitive type.\n * @param str - The string to evaluate as a potential primitive type.\n * @returns A boolean indicating whether the string is a primitive type.\n * @group Implementation\n * @category Transactions\n */\nfunction isPrimitive(str: string) {\n  switch (str) {\n    case \"signer\":\n    case \"address\":\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Consumes all whitespace characters in a string starting from a specified position.\n *\n * @param tagStr - The string from which to consume whitespace.\n * @param pos - The position in the string to start consuming whitespace from.\n * @returns The new position in the string after consuming whitespace.\n * @group Implementation\n * @category Transactions\n */\nfunction consumeWhitespace(tagStr: string, pos: number) {\n  let i = pos;\n  for (; i < tagStr.length; i += 1) {\n    const innerChar = tagStr[i];\n\n    if (!isValidWhitespaceCharacter(innerChar)) {\n      // If it's not colons, and it's an invalid character, we will stop here\n      break;\n    }\n  }\n  return i;\n}\n\n/**\n * State for TypeTag parsing, maintained on a stack to track the current parsing state.\n * @group Implementation\n * @category Transactions\n */\ntype TypeTagState = {\n  savedExpectedTypes: number;\n  savedStr: string;\n  savedTypes: Array<TypeTag>;\n};\n\n/**\n * Error types related to parsing type tags, indicating various issues encountered during the parsing process.\n * @group Implementation\n * @category Transactions\n */\nexport enum TypeTagParserErrorType {\n  InvalidTypeTag = \"unknown type\",\n  UnexpectedGenericType = \"unexpected generic type\",\n  UnexpectedTypeArgumentClose = \"unexpected '>'\",\n  UnexpectedWhitespaceCharacter = \"unexpected whitespace character\",\n  UnexpectedComma = \"unexpected ','\",\n  TypeArgumentCountMismatch = \"type argument count doesn't match expected amount\",\n  MissingTypeArgumentClose = \"no matching '>' for '<'\",\n  MissingTypeArgument = \"no type argument before ','\",\n  UnexpectedPrimitiveTypeArguments = \"primitive types not expected to have type arguments\",\n  UnexpectedVectorTypeArgumentCount = \"vector type expected to have exactly one type argument\",\n  UnexpectedStructFormat = \"unexpected struct format, must be of the form 0xaddress::module_name::struct_name\",\n  InvalidModuleNameCharacter = \"module name must only contain alphanumeric or '_' characters\",\n  InvalidStructNameCharacter = \"struct name must only contain alphanumeric or '_' characters\",\n  InvalidAddress = \"struct address must be valid\",\n}\n\n/**\n * Represents an error that occurs during the parsing of a type tag.\n * This error extends the built-in Error class and provides additional context\n * regarding the specific type tag that failed to parse and the reason for the failure.\n *\n * @param typeTagStr - The type tag string that failed to be parsed.\n * @param invalidReason - The reason why the type tag string is considered invalid.\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagParserError extends Error {\n  /**\n   * Constructs an error indicating a failure to parse a type tag.\n   * This error provides details about the specific type tag that could not be parsed and the reason for the failure.\n   *\n   * @param typeTagStr - The string representation of the type tag that failed to parse.\n   * @param invalidReason - The reason why the type tag is considered invalid.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(typeTagStr: string, invalidReason: TypeTagParserErrorType) {\n    super(`Failed to parse typeTag '${typeTagStr}', ${invalidReason}`);\n  }\n}\n\n/**\n * Parses a type string into a structured representation of type tags, accommodating various formats including generics and\n * nested types.\n *\n * This function can help you accurately interpret type strings, which can include simple types, standalone structs, and complex\n * nested generics.\n * It supports multiple generics, spacing within generics, and nested generics of varying depths.\n * All types are made of a few parts they're either:\n * 1. A simple type e.g. u8\n * 2. A standalone struct e.g. 0x1::account::Account\n * 3. A nested struct e.g. 0x1::coin::Coin<0x1234::coin::MyCoin>\n *\n * There are a few more special cases that need to be handled, however.\n * 1. Multiple generics e.g. 0x1::pair::Pair<u8, u16>\n * 2. Spacing in the generics e.g. 0x1::pair::Pair< u8 , u16>\n * 3. Nested generics of different depths e.g. 0x1::pair::Pair<0x1::coin::Coin<0x1234::coin::MyCoin>, u8>\n * 4. Generics for types in ABIs are filled in with placeholders e.g. T1, T2, T3\n * @param typeStr - The string representation of the type to be parsed.\n * @param options - Optional settings for parsing behavior.\n * @param options.allowGenerics - A flag indicating whether to allow generics in the parsing process.\n * @returns The parsed type tag representation.\n * @throws TypeTagParserError if the type string is malformed or does not conform to expected formats.\n * @group Implementation\n * @category Transactions\n */\nexport function parseTypeTag(typeStr: string, options?: { allowGenerics?: boolean }) {\n  const allowGenerics = options?.allowGenerics ?? false;\n\n  const saved: Array<TypeTagState> = [];\n  // This represents the internal types for a type tag e.g. '0x1::coin::Coin<innerTypes>'\n  let innerTypes: Array<TypeTag> = [];\n  // This represents the current parsed types in a comma list e.g. 'u8, u8'\n  let curTypes: Array<TypeTag> = [];\n  // This represents the current character index\n  let cur: number = 0;\n  // This represents the current working string as a type or struct name\n  let currentStr: string = \"\";\n  let expectedTypes: number = 1;\n\n  // Iterate through each character, and handle the border conditions\n  while (cur < typeStr.length) {\n    const char = typeStr[cur];\n\n    if (char === \"<\") {\n      // Start of a type argument, push current state onto a stack\n      saved.push({\n        savedExpectedTypes: expectedTypes,\n        savedStr: currentStr,\n        savedTypes: curTypes,\n      });\n\n      // Clear current state\n      currentStr = \"\";\n      curTypes = [];\n      expectedTypes = 1;\n    } else if (char === \">\") {\n      // Process last type, if there is no type string, then don't parse it\n      if (currentStr !== \"\") {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n        curTypes.push(newType);\n      }\n\n      // Pop off stack outer type, if there's nothing left, there were too many '>'\n      const savedPop = saved.pop();\n      if (savedPop === undefined) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedTypeArgumentClose);\n      }\n\n      // If the expected types don't match the number of commas, then we also fail\n      if (expectedTypes !== curTypes.length) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.TypeArgumentCountMismatch);\n      }\n\n      // Add in the new created type, shifting the current types to the inner types\n      const { savedStr, savedTypes, savedExpectedTypes } = savedPop;\n      innerTypes = curTypes;\n      curTypes = savedTypes;\n      currentStr = savedStr;\n      expectedTypes = savedExpectedTypes;\n    } else if (char === \",\") {\n      // Comma means we need to start parsing a new tag, push the previous one to the curTypes\n\n      // No top level commas (not in a type <> are allowed)\n      if (saved.length === 0) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedComma);\n      }\n      // If there was no actual value before the comma, then it's missing a type argument\n      if (currentStr.length === 0) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.MissingTypeArgument);\n      }\n\n      // Process characters before as a type\n      const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n      // parse type tag and push it on the types\n      innerTypes = [];\n      curTypes.push(newType);\n      currentStr = \"\";\n      expectedTypes += 1;\n    } else if (isValidWhitespaceCharacter(char)) {\n      // This means we should save what we have and everything else should skip until the next\n      let parsedTypeTag = false;\n      if (currentStr.length !== 0) {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n        // parse type tag and push it on the types\n        innerTypes = [];\n        curTypes.push(newType);\n        currentStr = \"\";\n        parsedTypeTag = true;\n      }\n\n      // Skip ahead on any more whitespace\n      cur = consumeWhitespace(typeStr, cur);\n\n      // The next space MUST be a comma, or a closing > if there was something parsed before\n      // e.g. `u8 u8` is invalid but `u8, u8` is valid\n      const nextChar = typeStr[cur];\n      if (cur < typeStr.length && parsedTypeTag && nextChar !== \",\" && nextChar !== \">\") {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n      }\n\n      // eslint-disable-next-line no-continue\n      continue;\n    } else {\n      // Any other characters just append to the current string\n      currentStr += char;\n    }\n\n    cur += 1;\n  }\n\n  // This prevents a missing '>' on type arguments\n  if (saved.length > 0) {\n    throw new TypeTagParserError(typeStr, TypeTagParserErrorType.MissingTypeArgumentClose);\n  }\n\n  // This prevents 'u8, u8' as an input\n  switch (curTypes.length) {\n    case 0:\n      return parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n    case 1:\n      if (currentStr === \"\") {\n        return curTypes[0];\n      }\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedComma);\n    default:\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n  }\n}\n\n/**\n * Parses a type tag with internal types associated, allowing for the inclusion of generics if specified. This function helps in\n * constructing the appropriate type tags based on the provided string representation and associated types.\n *\n * @param str - The string representation of the type tag to parse.\n * @param types - An array of TypeTag instances that represent internal types associated with the type tag.\n * @param allowGenerics - A boolean indicating whether generics are allowed in the parsing of the type tag.\n * @group Implementation\n * @category Transactions\n */\nfunction parseTypeTagInner(str: string, types: Array<TypeTag>, allowGenerics: boolean): TypeTag {\n  const trimmedStr = str.trim();\n  const lowerCaseTrimmed = trimmedStr.toLowerCase();\n  if (isPrimitive(lowerCaseTrimmed)) {\n    if (types.length > 0) {\n      throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n    }\n  }\n\n  switch (trimmedStr.toLowerCase()) {\n    case \"signer\":\n      return new TypeTagSigner();\n    case \"bool\":\n      return new TypeTagBool();\n    case \"address\":\n      return new TypeTagAddress();\n    case \"u8\":\n      return new TypeTagU8();\n    case \"u16\":\n      return new TypeTagU16();\n    case \"u32\":\n      return new TypeTagU32();\n    case \"u64\":\n      return new TypeTagU64();\n    case \"u128\":\n      return new TypeTagU128();\n    case \"u256\":\n      return new TypeTagU256();\n    case \"vector\":\n      if (types.length !== 1) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedVectorTypeArgumentCount);\n      }\n      return new TypeTagVector(types[0]);\n    default:\n      // Reference will have to handle the inner type\n      if (isRef(trimmedStr)) {\n        const actualType = trimmedStr.substring(1);\n        return new TypeTagReference(parseTypeTagInner(actualType, types, allowGenerics));\n      }\n\n      // Generics are always expected to be T0 or T1\n      if (isGeneric(trimmedStr)) {\n        if (allowGenerics) {\n          return new TypeTagGeneric(Number(trimmedStr.split(\"T\")[1]));\n        }\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedGenericType);\n      }\n\n      // If the value doesn't contain a colon, then we'll assume it isn't trying to be a struct\n      if (!trimmedStr.match(/:/)) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidTypeTag);\n      }\n\n      // Parse for a struct tag\n      // eslint-disable-next-line no-case-declarations\n      const structParts = trimmedStr.split(\"::\");\n      if (structParts.length !== 3) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedStructFormat);\n      }\n\n      // Validate struct address\n      // eslint-disable-next-line no-case-declarations\n      let address: AccountAddress;\n      try {\n        address = AccountAddress.fromString(structParts[0]);\n      } catch (error: any) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidAddress);\n      }\n\n      // Validate identifier characters\n      if (!isValidIdentifier(structParts[1])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidModuleNameCharacter);\n      }\n      if (!isValidIdentifier(structParts[2])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidStructNameCharacter);\n      }\n\n      return new TypeTagStruct(\n        new StructTag(address, new Identifier(structParts[1]), new Identifier(structParts[2]), types),\n      );\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  EntryFunctionArgumentTypes,\n  InputGenerateTransactionPayloadData,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputScriptData,\n  SimpleEntryFunctionArgumentTypes,\n} from \"../types\";\nimport { Bool, FixedBytes, MoveOption, MoveString, MoveVector, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { MoveFunction } from \"../../types\";\n\n/**\n * Determines if the provided argument is of type boolean.\n * This can help in validating input types before processing them further.\n *\n * @param arg - The argument to check, which can be of various types.\n * @returns A boolean indicating whether the argument is a boolean.\n * @group Implementation\n * @category Transactions\n */\nexport function isBool(arg: SimpleEntryFunctionArgumentTypes): arg is boolean {\n  return typeof arg === \"boolean\";\n}\n\n/**\n * Checks if the provided argument is of type string.\n *\n * @param arg - The value to be checked for string type.\n * @returns A boolean indicating whether the argument is a string.\n * @group Implementation\n * @category Transactions\n */\nexport function isString(arg: any): arg is string {\n  return typeof arg === \"string\";\n}\n\n/**\n * Determines if the provided argument is of type number.\n *\n * @param arg - The argument to check, which can be of various types.\n * @returns A boolean indicating whether the argument is a number.\n * @group Implementation\n * @category Transactions\n */\nexport function isNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number {\n  return typeof arg === \"number\";\n}\n\n/**\n * Converts a number or a string representation of a number into a number type.\n * This function is useful for ensuring that the input is in a consistent numeric format,\n * which can help prevent type mismatches in further processing.\n *\n * @param arg - The input value to be converted. This can be a number, a string representing a number, or any other type.\n * @returns Returns the converted number if the input is valid; otherwise, it returns undefined.\n * @group Implementation\n * @category Transactions\n */\nexport function convertNumber(arg: SimpleEntryFunctionArgumentTypes): number | undefined {\n  if (isNumber(arg)) {\n    return arg;\n  }\n  if (isString(arg) && arg !== \"\") {\n    return Number.parseInt(arg, 10);\n  }\n\n  return undefined;\n}\n\n/**\n * Determines if the provided argument is a large number, which can be a number, bigint, or string representation of a number.\n *\n * @param arg - The argument to check, which can be of type number, bigint, or string.\n * @group Implementation\n * @category Transactions\n */\nexport function isLargeNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number | bigint | string {\n  return typeof arg === \"number\" || typeof arg === \"bigint\" || typeof arg === \"string\";\n}\n\n/**\n * Checks if the provided argument is empty, meaning it is either null or undefined.\n *\n * @param arg - The argument to check for emptiness.\n * @returns A boolean indicating whether the argument is empty.\n * @group Implementation\n * @category Transactions\n */\nexport function isEmptyOption(arg: SimpleEntryFunctionArgumentTypes): arg is null | undefined {\n  return arg === null || arg === undefined;\n}\n\n/**\n * Determines if the provided argument is a valid encoded entry function argument type.\n * This function helps validate that the argument conforms to the expected types for entry function parameters.\n *\n * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n * @group Implementation\n * @category Transactions\n */\nexport function isEncodedEntryFunctionArgument(\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): arg is EntryFunctionArgumentTypes {\n  return (\n    /**\n     * Determines if the provided argument is an instance of the Bool class.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsBool(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U8.\n     * This function helps validate the type of the argument passed to ensure it is a U8 type.\n     *\n     * @param arg - The argument to be checked, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU8(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U16.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU16(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U32.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @returns A boolean indicating whether the argument is a U32 instance.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU32(arg) ||\n    /**\n     * Determine if the provided argument is an instance of U64.\n     * This function helps validate that the argument conforms to the expected U64 type.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU64(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U128.\n     * This function helps validate the type of the argument passed to ensure it is a U128 type.\n     *\n     * @param arg - The argument to be checked, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU128(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U256.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @returns A boolean indicating whether the argument is a U256 instance.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU256(arg) ||\n    /**\n     * Determines if the provided argument is an instance of AccountAddress.\n     * This function helps validate whether a given input corresponds to a valid BCS address type.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsAddress(arg) ||\n    /**\n     * Determine if the provided argument is an instance of MoveString.\n     *\n     * @param arg - The argument to check, which can be of types EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsString(arg) ||\n    /**\n     * Determine if the provided argument is an instance of FixedBytes.\n     * This function helps to validate the type of the argument being passed.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsFixedBytes(arg) ||\n    arg instanceof MoveVector ||\n    arg instanceof MoveOption\n  );\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsBool(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is Bool {\n  return arg instanceof Bool;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsAddress(\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): arg is AccountAddress {\n  return arg instanceof AccountAddress;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsString(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is MoveString {\n  return arg instanceof MoveString;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsFixedBytes(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is FixedBytes {\n  return arg instanceof FixedBytes;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU8(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U8 {\n  return arg instanceof U8;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU16(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U16 {\n  return arg instanceof U16;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU32(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U32 {\n  return arg instanceof U32;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU64(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U64 {\n  return arg instanceof U64;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU128(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U128 {\n  return arg instanceof U128;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU256(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U256 {\n  return arg instanceof U256;\n}\n\n/**\n * Determines if the provided argument contains script data input by checking for the presence of bytecode.\n *\n * @param arg - The input data to be checked, which can either be a payload with remote ABI or a standard payload.\n * @param arg.bytecode - The bytecode of the script, present if the input is script data.\n * @param arg.function - The function associated with the transaction, which is relevant for standard payloads.\n * @param arg.args - The arguments for the function, applicable in the context of standard payloads.\n * @group Implementation\n * @category Transactions\n */\nexport function isScriptDataInput(\n  arg: InputGenerateTransactionPayloadDataWithRemoteABI | InputGenerateTransactionPayloadData,\n): arg is InputScriptData {\n  return \"bytecode\" in arg;\n}\n\n/**\n * Throws an error indicating a type mismatch for a specified argument position.\n * This function helps in debugging by providing clear feedback on expected types.\n *\n * @param expectedType - The type that was expected for the argument.\n * @param position - The position of the argument that caused the type mismatch.\n * @group Implementation\n * @category Transactions\n */\nexport function throwTypeMismatch(expectedType: string, position: number) {\n  throw new Error(`Type mismatch for argument ${position}, expected '${expectedType}'`);\n}\n\n/**\n * Finds the index of the first non-signer argument in the function ABI parameters.\n *\n * A function is often defined with a `signer` or `&signer` arguments at the start, which are filled in\n * by signatures and not by the caller. This function helps identify the position of the first argument that\n * can be provided by the caller, allowing for easier handling of function parameters.\n *\n * @param functionAbi - The ABI of the function to analyze.\n * @returns The index of the first non-signer argument, or the length of the parameters array if none are found.\n * @group Implementation\n * @category Transactions\n */\nexport function findFirstNonSignerArg(functionAbi: MoveFunction): number {\n  const index = functionAbi.params.findIndex((param) => param !== \"signer\" && param !== \"&signer\");\n  if (index < 0) {\n    return functionAbi.params.length;\n  }\n  return index;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parseTypeTag } from \"../typeTag/parser\";\nimport {\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU16,\n  TypeTagU256,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU8,\n} from \"../typeTag\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport {\n  EntryFunctionArgumentTypes,\n  SimpleEntryFunctionArgumentTypes,\n  EntryFunctionABI,\n  ViewFunctionABI,\n  FunctionABI,\n  TypeArgument,\n} from \"../types\";\nimport { Bool, FixedBytes, MoveOption, MoveString, MoveVector, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { getModule } from \"../../internal/account\";\nimport {\n  findFirstNonSignerArg,\n  isBcsAddress,\n  isBcsBool,\n  isBcsString,\n  isBcsU128,\n  isBcsU16,\n  isBcsU256,\n  isBcsU32,\n  isBcsU64,\n  isBcsU8,\n  isBool,\n  isEncodedEntryFunctionArgument,\n  isLargeNumber,\n  isEmptyOption,\n  isString,\n  throwTypeMismatch,\n  convertNumber,\n} from \"./helpers\";\nimport { CallArgument, MoveFunction, MoveModule } from \"../../types\";\n\nconst TEXT_ENCODER = new TextEncoder();\n\n/**\n * Convert type arguments to only type tags, allowing for string representations of type tags.\n *\n * @param typeArguments - An optional array of type arguments that may include string representations.\n * @returns An array of TypeTag objects derived from the provided type arguments.\n * @group Implementation\n * @category Transactions\n */\nexport function standardizeTypeTags(typeArguments?: Array<TypeArgument>): Array<TypeTag> {\n  return (\n    typeArguments?.map((typeArg: TypeArgument): TypeTag => {\n      // Convert to TypeTag if it's a string representation\n      if (isString(typeArg)) {\n        return parseTypeTag(typeArg);\n      }\n      return typeArg;\n    }) ?? []\n  );\n}\n\n/**\n * Fetches the ABI of a specified module from the on-chain module ABI.\n *\n * @param moduleAddress - The address of the module from which to fetch the ABI.\n * @param moduleName - The name of the module containing the ABI.\n * @param aptosConfig - The configuration settings for Aptos.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchModuleAbi(\n  moduleAddress: string,\n  moduleName: string,\n  aptosConfig: AptosConfig,\n): Promise<MoveModule | undefined> {\n  const moduleBytecode = await getModule({ aptosConfig, accountAddress: moduleAddress, moduleName });\n  return moduleBytecode.abi;\n}\n\n/**\n * Fetches the ABI of a specified function from the on-chain module ABI. This function allows you to access the details of a\n * specific function within a module.\n *\n * @param moduleAddress - The address of the module from which to fetch the function ABI.\n * @param moduleName - The name of the module containing the function.\n * @param functionName - The name of the function whose ABI is to be fetched.\n * @param aptosConfig - The configuration settings for Aptos.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<MoveFunction | undefined> {\n  const moduleAbi = await fetchModuleAbi(moduleAddress, moduleName, aptosConfig);\n  if (!moduleAbi) throw new Error(`Could not find module ABI for '${moduleAddress}::${moduleName}'`);\n  return moduleAbi.exposed_functions.find((func) => func.name === functionName);\n}\n\n/**\n * @deprecated Use `fetchFunctionAbi` instead and manually parse the type tags.\n */\nexport async function fetchMoveFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<FunctionABI> {\n  const functionAbi = await fetchFunctionAbi(moduleAddress, moduleName, functionName, aptosConfig);\n  if (!functionAbi) {\n    throw new Error(`Could not find function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n  const params: TypeTag[] = [];\n  for (let i = 0; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  return {\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n  };\n}\n\n/**\n * Fetches the ABI for an entry function from the specified module address.\n * This function validates if the ABI corresponds to an entry function and retrieves its parameters.\n *\n * @param moduleAddress - The address of the module containing the entry function.\n * @param moduleName - The name of the module containing the entry function.\n * @param functionName - The name of the entry function to fetch the ABI for.\n * @param aptosConfig - The configuration settings for Aptos.\n * @returns An object containing the number of signers, type parameters, and function parameters.\n * @throws Error if the ABI cannot be found or if the function is not an entry function.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchEntryFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<EntryFunctionABI> {\n  const functionAbi = await fetchFunctionAbi(moduleAddress, moduleName, functionName, aptosConfig);\n\n  // If there's no ABI, then the function is invalid\n  if (!functionAbi) {\n    throw new Error(`Could not find entry function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n\n  // Non-entry functions also can't be used\n  if (!functionAbi.is_entry) {\n    throw new Error(`'${moduleAddress}::${moduleName}::${functionName}' is not an entry function`);\n  }\n\n  // Remove the signer arguments\n  const numSigners = findFirstNonSignerArg(functionAbi);\n  const params: TypeTag[] = [];\n  for (let i = numSigners; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  return {\n    signers: numSigners,\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n  };\n}\n\n/**\n * Fetches the ABI for a view function from the specified module address.\n * This function ensures that the ABI is valid and retrieves the type parameters, parameters, and return types for the view function.\n *\n * @param moduleAddress - The address of the module containing the view function.\n * @param moduleName - The name of the module containing the view function.\n * @param functionName - The name of the view function for which to fetch the ABI.\n * @param aptosConfig - The configuration settings for Aptos.\n * @returns An object containing the type parameters, parameters, and return types of the view function.\n * @throws Error if the ABI cannot be found or if the function is not a view function.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchViewFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<ViewFunctionABI> {\n  const functionAbi = await fetchFunctionAbi(moduleAddress, moduleName, functionName, aptosConfig);\n\n  // If there's no ABI, then the function is invalid\n  if (!functionAbi) {\n    throw new Error(`Could not find view function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n\n  // Non-view functions can't be used\n  if (!functionAbi.is_view) {\n    throw new Error(`'${moduleAddress}::${moduleName}::${functionName}' is not an view function`);\n  }\n\n  // Type tag parameters for the function\n  const params: TypeTag[] = [];\n  for (let i = 0; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  // The return types of the view function\n  const returnTypes: TypeTag[] = [];\n  for (let i = 0; i < functionAbi.return.length; i += 1) {\n    returnTypes.push(parseTypeTag(functionAbi.return[i], { allowGenerics: true }));\n  }\n\n  return {\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n    returnTypes,\n  };\n}\n\n/**\n * @deprecated Handle this inline\n *\n * @example\n * ```typescript\n * const callArgument = argument instanceof CallArgument ? argument : CallArgument.newBytes(\n *   convertArgument(functionName, functionAbi, argument, position, genericTypeParams).bcsToBytes()\n * );\n * ```\n */\nexport function convertCallArgument(\n  argument: CallArgument | EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n  functionName: string,\n  functionAbi: FunctionABI,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n): CallArgument {\n  if (argument instanceof CallArgument) {\n    return argument;\n  }\n  return CallArgument.newBytes(\n    convertArgument(functionName, functionAbi, argument, position, genericTypeParams).bcsToBytes(),\n  );\n}\n\n/**\n * Converts a non-BCS encoded argument into BCS encoded, if necessary.\n * This function checks the provided argument against the expected parameter type and converts it accordingly.\n *\n * @param functionName - The name of the function for which the argument is being converted.\n * @param functionAbiOrModuleAbi - The ABI (Application Binary Interface) of the function, which defines its parameters.\n * @param arg - The argument to be converted, which can be of various types.\n * @param position - The index of the argument in the function's parameter list.\n * @param genericTypeParams - An array of type tags for any generic type parameters.\n * @param options - Options for the conversion process.\n * @param options.allowUnknownStructs - If true, unknown structs will be allowed and converted to a `FixedBytes`.\n * @group Implementation\n * @category Transactions\n */\nexport function convertArgument(\n  functionName: string,\n  functionAbiOrModuleAbi: MoveModule | FunctionABI,\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n  options?: { allowUnknownStructs?: boolean },\n) {\n  let param: TypeTag;\n\n  if (\"exposed_functions\" in functionAbiOrModuleAbi) {\n    const functionAbi = functionAbiOrModuleAbi.exposed_functions.find((func) => func.name === functionName);\n    if (!functionAbi) {\n      throw new Error(\n        `Could not find function ABI for '${functionAbiOrModuleAbi.address}::${functionAbiOrModuleAbi.name}::${functionName}'`,\n      );\n    }\n\n    if (position >= functionAbi.params.length) {\n      throw new Error(`Too many arguments for '${functionName}', expected ${functionAbi.params.length}`);\n    }\n\n    param = parseTypeTag(functionAbi.params[position], { allowGenerics: true });\n  } else {\n    if (position >= functionAbiOrModuleAbi.parameters.length) {\n      throw new Error(`Too many arguments for '${functionName}', expected ${functionAbiOrModuleAbi.parameters.length}`);\n    }\n\n    param = functionAbiOrModuleAbi.parameters[position];\n  }\n\n  return checkOrConvertArgument(\n    arg,\n    param,\n    position,\n    genericTypeParams,\n    \"exposed_functions\" in functionAbiOrModuleAbi ? functionAbiOrModuleAbi : undefined,\n    options,\n  );\n}\n\n/**\n * Checks if the provided argument is BCS encoded and converts it if necessary, ensuring type compatibility with the ABI.\n * This function helps in validating and converting arguments for entry functions based on their expected types.\n *\n * @param arg - The argument to check or convert, which can be either a simple or entry function argument type.\n * @param param - The expected type tag for the argument.\n * @param position - The position of the argument in the function call.\n * @param genericTypeParams - An array of generic type parameters that may be used for conversion.\n * @group Implementation\n * @category Transactions\n */\nexport function checkOrConvertArgument(\n  arg: SimpleEntryFunctionArgumentTypes | EntryFunctionArgumentTypes,\n  param: TypeTag,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n  moduleAbi?: MoveModule,\n  options?: { allowUnknownStructs?: boolean },\n) {\n  // If the argument is bcs encoded, we can just use it directly\n  if (isEncodedEntryFunctionArgument(arg)) {\n    // Ensure the type matches the ABI\n\n    /**\n     * Checks the type of the provided argument against the expected type.\n     * This function helps validate that the argument conforms to the specified type requirements.\n     *\n     * @param typeArgs - The expected type arguments.\n     * @param arg - The argument to be checked.\n     * @param position - The position of the argument in the context of the check.\n     * @param moduleAbi - The ABI of the module containing the function, used for type checking.\n     *                    This will typically have information about structs, enums, and other types.\n     * @group Implementation\n     * @category Transactions\n     */\n    checkType(param, arg, position);\n    return arg;\n  }\n\n  // If it is not BCS encoded, we will need to convert it with the ABI\n  return parseArg(arg, param, position, genericTypeParams, moduleAbi, options);\n}\n\n/**\n * Parses a non-BCS encoded argument into a BCS encoded argument recursively.\n * This function helps convert various types of input arguments into their corresponding BCS encoded formats based on the\n * specified parameter type.\n *\n * @param arg - The argument to be parsed, which can be of various types.\n * @param param - The type tag that defines the expected type of the argument.\n * @param position - The position of the argument in the function call, used for error reporting.\n * @param genericTypeParams - An array of type tags for generic type parameters, used when the parameter type is generic.\n * @param moduleAbi - The ABI of the module containing the function, used for type checking.\n *                    This will typically have information about structs, enums, and other types.\n * @param options - Options for the conversion process.\n * @param options.allowUnknownStructs - If true, unknown structs will be allowed and converted to a `FixedBytes`.\n * @group Implementation\n * @category Transactions\n */\nfunction parseArg(\n  arg: SimpleEntryFunctionArgumentTypes,\n  param: TypeTag,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n  moduleAbi?: MoveModule,\n  options?: { allowUnknownStructs?: boolean },\n): EntryFunctionArgumentTypes {\n  if (param.isBool()) {\n    if (isBool(arg)) {\n      return new Bool(arg);\n    }\n    if (isString(arg)) {\n      if (arg === \"true\") return new Bool(true);\n      if (arg === \"false\") return new Bool(false);\n    }\n\n    /**\n     * Throws a type mismatch error for the specified move option.\n     *\n     * @param moveOption - The name of the move option that caused the type mismatch.\n     * @param position - The position where the error occurred.\n     * @group Implementation\n     * @category Transactions\n     */\n    throwTypeMismatch(\"boolean\", position);\n  }\n  // TODO: support uint8array?\n  if (param.isAddress()) {\n    if (isString(arg)) {\n      return AccountAddress.fromString(arg);\n    }\n    throwTypeMismatch(\"string | AccountAddress\", position);\n  }\n  if (param.isU8()) {\n    const num = convertNumber(arg);\n    if (num !== undefined) {\n      return new U8(num);\n    }\n    throwTypeMismatch(\"number | string\", position);\n  }\n  if (param.isU16()) {\n    const num = convertNumber(arg);\n    if (num !== undefined) {\n      return new U16(num);\n    }\n    throwTypeMismatch(\"number | string\", position);\n  }\n  if (param.isU32()) {\n    const num = convertNumber(arg);\n    if (num !== undefined) {\n      return new U32(num);\n    }\n    throwTypeMismatch(\"number | string\", position);\n  }\n  if (param.isU64()) {\n    if (isLargeNumber(arg)) {\n      return new U64(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU128()) {\n    if (isLargeNumber(arg)) {\n      return new U128(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU256()) {\n    if (isLargeNumber(arg)) {\n      return new U256(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n\n  // Generic needs to use the subtype\n  if (param.isGeneric()) {\n    const genericIndex = param.value;\n    if (genericIndex < 0 || genericIndex >= genericTypeParams.length) {\n      throw new Error(`Generic argument ${param.toString()} is invalid for argument ${position}`);\n    }\n\n    return checkOrConvertArgument(arg, genericTypeParams[genericIndex], position, genericTypeParams, moduleAbi);\n  }\n\n  // We have to special case some vectors for Vector<u8>\n  if (param.isVector()) {\n    // Check special case for Vector<u8>\n    if (param.value.isU8()) {\n      // We don't allow vector<u8>, but we convert strings to UTF8 Uint8Array\n      // This is legacy behavior from the original SDK\n      if (isString(arg)) {\n        return MoveVector.U8(TEXT_ENCODER.encode(arg));\n      }\n      if (arg instanceof Uint8Array) {\n        return MoveVector.U8(arg);\n      }\n      if (arg instanceof ArrayBuffer) {\n        return MoveVector.U8(new Uint8Array(arg));\n      }\n    }\n\n    if (isString(arg)) {\n      // In a web env, arguments are passing as strings\n      if (arg.startsWith(\"[\")) {\n        return checkOrConvertArgument(JSON.parse(arg), param, position, genericTypeParams);\n      }\n    }\n\n    // TODO: Support Uint16Array, Uint32Array, BigUint64Array?\n\n    if (Array.isArray(arg)) {\n      return new MoveVector(\n        arg.map((item) => checkOrConvertArgument(item, param.value, position, genericTypeParams, moduleAbi)),\n      );\n    }\n\n    throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n  }\n\n  // Handle structs as they're more complex\n  if (param.isStruct()) {\n    if (param.isString()) {\n      if (isString(arg)) {\n        return new MoveString(arg);\n      }\n      throwTypeMismatch(\"string\", position);\n    }\n    if (param.isObject()) {\n      // The inner type of Object doesn't matter, since it's just syntactic sugar\n      if (isString(arg)) {\n        return AccountAddress.fromString(arg);\n      }\n      throwTypeMismatch(\"string | AccountAddress\", position);\n    }\n    // Handle known enum types from Aptos framework\n    if (param.isDelegationKey() || param.isRateLimiter()) {\n      if (arg instanceof Uint8Array) {\n        return new FixedBytes(arg);\n      }\n      throwTypeMismatch(\"Uint8Array\", position);\n    }\n\n    if (param.isOption()) {\n      if (isEmptyOption(arg)) {\n        // Here we attempt to reconstruct the underlying type\n        // Note, for some reason the `isBool` etc. does not work with the compiler\n        const innerParam = param.value.typeArgs[0];\n        if (innerParam instanceof TypeTagBool) {\n          return new MoveOption<Bool>(null);\n        }\n        if (innerParam instanceof TypeTagAddress) {\n          return new MoveOption<AccountAddress>(null);\n        }\n        if (innerParam instanceof TypeTagU8) {\n          return new MoveOption<U8>(null);\n        }\n        if (innerParam instanceof TypeTagU16) {\n          return new MoveOption<U16>(null);\n        }\n        if (innerParam instanceof TypeTagU32) {\n          return new MoveOption<U32>(null);\n        }\n        if (innerParam instanceof TypeTagU64) {\n          return new MoveOption<U64>(null);\n        }\n        if (innerParam instanceof TypeTagU128) {\n          return new MoveOption<U128>(null);\n        }\n        if (innerParam instanceof TypeTagU256) {\n          return new MoveOption<U256>(null);\n        }\n\n        // In all other cases, we will use a placeholder, it doesn't actually matter what the type is, but it will be obvious\n        // Note: This is a placeholder U8 type, and does not match the actual type, as that can't be dynamically grabbed\n        return new MoveOption<MoveString>(null);\n      }\n\n      return new MoveOption(\n        checkOrConvertArgument(arg, param.value.typeArgs[0], position, genericTypeParams, moduleAbi),\n      );\n    }\n\n    // We are assuming that fieldless structs are enums, and therefore we cannot typecheck any further due\n    // to limited information from the ABI. This does not work for structs on other modules.\n    const structDefinition = moduleAbi?.structs.find((s) => s.name === param.value.name.identifier);\n    if (structDefinition?.fields.length === 0 && arg instanceof Uint8Array) {\n      return new FixedBytes(arg);\n    }\n\n    if (arg instanceof Uint8Array && options?.allowUnknownStructs) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        // eslint-disable-next-line max-len\n        `Unsupported struct input type for argument ${position}. Continuing since 'allowUnknownStructs' is enabled.`,\n      );\n      return new FixedBytes(arg);\n    }\n\n    throw new Error(`Unsupported struct input type for argument ${position}, type '${param.toString()}'`);\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n}\n\n/**\n * Checks that the type of the BCS encoded argument matches the ABI\n * @param param\n * @param arg\n * @param position\n * @group Implementation\n * @category Transactions\n */\nfunction checkType(param: TypeTag, arg: EntryFunctionArgumentTypes, position: number) {\n  if (param.isBool()) {\n    if (isBcsBool(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"Bool\", position);\n  }\n  if (param.isAddress()) {\n    if (isBcsAddress(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"AccountAddress\", position);\n  }\n  if (param.isU8()) {\n    if (isBcsU8(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U8\", position);\n  }\n  if (param.isU16()) {\n    if (isBcsU16(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U16\", position);\n  }\n  if (param.isU32()) {\n    if (isBcsU32(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U32\", position);\n  }\n  if (param.isU64()) {\n    if (isBcsU64(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U64\", position);\n  }\n  if (param.isU128()) {\n    if (isBcsU128(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U128\", position);\n  }\n  if (param.isU256()) {\n    if (isBcsU256(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U256\", position);\n  }\n  if (param.isVector()) {\n    if (arg instanceof MoveVector) {\n      // If there's anything in it, check that the inner types match\n      // Note that since it's typed, the first item should be the same as the rest\n      if (arg.values.length > 0) {\n        checkType(param.value, arg.values[0], position);\n      }\n\n      return;\n    }\n    throwTypeMismatch(\"MoveVector\", position);\n  }\n\n  // Handle structs as they're more complex\n  if (param instanceof TypeTagStruct) {\n    if (param.isString()) {\n      if (isBcsString(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"MoveString\", position);\n    }\n    if (param.isObject()) {\n      if (isBcsAddress(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"AccountAddress\", position);\n    }\n    if (param.isOption()) {\n      if (arg instanceof MoveOption) {\n        // If there's a value, we can check the inner type (otherwise it doesn't really matter)\n        if (arg.value !== undefined) {\n          checkType(param.value.typeArgs[0], arg.value, position);\n        }\n        return;\n      }\n      throwTypeMismatch(\"MoveOption\", position);\n    }\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, expected '${param.toString()}'`);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ScriptComposerWasm } from \"@aptos-labs/script-composer-pack\";\nimport { AptosApiType, getFunctionParts } from \"../../utils\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { InputBatchedFunctionData } from \"../types\";\nimport { standardizeTypeTags } from \"../transactionBuilder\";\nimport { CallArgument } from \"../../types\";\nimport { convertArgument, fetchModuleAbi } from \"../transactionBuilder/remoteAbi\";\n\n/**\n * A wrapper class around TransactionComposer, which is a WASM library compiled\n * from aptos-core/aptos-move/script-composer.\n * This class allows the SDK caller to build a transaction that invokes multiple Move functions\n * and allow for arguments to be passed around.\n * */\nexport class AptosScriptComposer {\n  private config: AptosConfig;\n\n  private builder?: any;\n\n  private static transactionComposer?: any;\n\n  constructor(aptosConfig: AptosConfig) {\n    this.config = aptosConfig;\n    this.builder = undefined;\n  }\n\n  // Initializing the wasm needed for the script composer, must be called\n  // before using the composer.\n  async init() {\n    if (!AptosScriptComposer.transactionComposer) {\n      const module = await import(\"@aptos-labs/script-composer-pack\");\n      const { TransactionComposer, initSync } = module;\n      if (!ScriptComposerWasm.isInitialized) {\n        ScriptComposerWasm.init();\n      }\n      initSync({ module: ScriptComposerWasm.wasm });\n      AptosScriptComposer.transactionComposer = TransactionComposer;\n    }\n    this.builder = AptosScriptComposer.transactionComposer.single_signer();\n  }\n\n  // Add a move function invocation to the TransactionComposer.\n  //\n  // Similar to how to create an entry function, the difference is that input arguments could\n  // either be a `CallArgument` which represents an abstract value returned from a previous Move call\n  // or the regular entry function arguments.\n  //\n  // The function would also return a list of `CallArgument` that can be passed on to future calls.\n  async addBatchedCalls(input: InputBatchedFunctionData): Promise<CallArgument[]> {\n    const { moduleAddress, moduleName, functionName } = getFunctionParts(input.function);\n    const nodeUrl = this.config.getRequestUrl(AptosApiType.FULLNODE);\n\n    // Load the calling module into the builder.\n    await this.builder.load_module(nodeUrl, `${moduleAddress}::${moduleName}`);\n\n    // Load the calling type arguments into the loader.\n    if (input.typeArguments !== undefined) {\n      for (const typeArgument of input.typeArguments) {\n        await this.builder.load_type_tag(nodeUrl, typeArgument.toString());\n      }\n    }\n    const typeArguments = standardizeTypeTags(input.typeArguments);\n    const moduleAbi = await fetchModuleAbi(moduleAddress, moduleName, this.config);\n    if (!moduleAbi) {\n      throw new Error(`Could not find module ABI for '${moduleAddress}::${moduleName}'`);\n    }\n\n    // Check the type argument count against the ABI\n    const functionAbi = moduleAbi?.exposed_functions.find((func) => func.name === functionName);\n    if (!functionAbi) {\n      throw new Error(`Could not find function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n    }\n\n    if (typeArguments.length !== functionAbi.generic_type_params.length) {\n      throw new Error(\n        `Type argument count mismatch, expected ${functionAbi?.generic_type_params.length}, received ${typeArguments.length}`,\n      );\n    }\n\n    const functionArguments: CallArgument[] = input.functionArguments.map((arg, i) =>\n      arg instanceof CallArgument\n        ? arg\n        : CallArgument.newBytes(\n            convertArgument(functionName, moduleAbi, arg, i, typeArguments, { allowUnknownStructs: true }).bcsToBytes(),\n          ),\n    );\n\n    return this.builder.add_batched_call(\n      `${moduleAddress}::${moduleName}`,\n      functionName,\n      typeArguments.map((arg) => arg.toString()),\n      functionArguments,\n    );\n  }\n\n  build(): Uint8Array {\n    return this.builder.generate_batched_calls(true);\n  }\n}\n","/**\n * This file contains the underlying implementations for exposed submission API surface in\n * the {@link api/transaction}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * transaction namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Deserializer, MoveVector } from \"../bcs\";\nimport { postAptosFullNode } from \"../client\";\nimport { Account, AbstractKeylessAccount, isKeylessSigner } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { FederatedKeylessPublicKey, KeylessPublicKey, KeylessSignature } from \"../core/crypto\";\nimport { AccountAuthenticator } from \"../transactions/authenticator/account\";\nimport {\n  buildTransaction,\n  generateTransactionPayload,\n  generateSignedTransactionForSimulation,\n  generateSignedTransaction,\n} from \"../transactions/transactionBuilder/transactionBuilder\";\nimport {\n  InputGenerateTransactionData,\n  AnyRawTransaction,\n  InputSimulateTransactionData,\n  InputGenerateTransactionOptions,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputSubmitTransactionData,\n  InputGenerateMultiAgentRawTransactionData,\n  InputGenerateSingleSignerRawTransactionData,\n  AnyTransactionPayloadInstance,\n  EntryFunctionABI,\n} from \"../transactions/types\";\nimport { UserTransactionResponse, PendingTransactionResponse, MimeType, HexInput } from \"../types\";\nimport { SignedTransaction, TypeTagVector, generateSigningMessageForTransaction } from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\nimport { MultiAgentTransaction } from \"../transactions/instances/multiAgentTransaction\";\n\n/**\n * We are defining function signatures, each with its specific input and output.\n * These are the possible function signature for `generateTransaction` function.\n * When we call `generateTransaction` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n * @group Implementation\n */\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateSingleSignerRawTransactionData,\n): Promise<SimpleTransaction>;\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateMultiAgentRawTransactionData,\n): Promise<MultiAgentTransaction>;\n/**\n * Generates any transaction by passing in the required arguments\n *\n * @param args.sender The transaction sender's account address as a AccountAddressInput\n * @param args.data EntryFunctionData | ScriptData | MultiSigData\n * @param args.feePayerAddress optional. For a fee payer (aka sponsored) transaction\n * @param args.secondarySignerAddresses optional. For a multi-agent or fee payer (aka sponsored) transactions\n * @param args.options optional. GenerateTransactionOptions type\n *\n * @example\n * For a single signer entry function\n * move function name, move function type arguments, move function arguments\n * `\n * data: {\n *  function:\"0x1::aptos_account::transfer\",\n *  typeArguments:[]\n *  functionArguments :[receiverAddress,10]\n * }\n * `\n *\n * @example\n * For a single signer script function\n * module bytecode, move function type arguments, move function arguments\n * ```\n * data: {\n *  bytecode:\"0x001234567\",\n *  typeArguments:[],\n *  functionArguments :[receiverAddress,10]\n * }\n * ```\n *\n * @return An instance of a RawTransaction, plus optional secondary/fee payer addresses\n * ```\n * {\n *  rawTransaction: RawTransaction,\n *  secondarySignerAddresses?: Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n * @group Implementation\n */\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n): Promise<AnyRawTransaction> {\n  const payload = await buildTransactionPayload(args);\n  return buildRawTransaction(args, payload);\n}\n\n/**\n * Builds a transaction payload based on the provided configuration and input data.\n * This function is essential for preparing transaction data for execution on the Aptos blockchain.\n *\n * @param args - The arguments for building the transaction payload.\n * @param args.aptosConfig - Configuration settings for the Aptos network.\n * @param args.data - Input data required to generate the transaction payload, which may include bytecode, multisig address,\n * function name, function arguments, type arguments, and ABI.\n * @returns A promise that resolves to the generated transaction payload instance.\n * @group Implementation\n */\nexport async function buildTransactionPayload(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n): Promise<AnyTransactionPayloadInstance> {\n  const { aptosConfig, data } = args;\n  // Merge in aptosConfig for remote ABI on non-script payloads\n  let generateTransactionPayloadData: InputGenerateTransactionPayloadDataWithRemoteABI;\n  let payload: AnyTransactionPayloadInstance;\n\n  if (\"bytecode\" in data) {\n    // TODO: Add ABI checking later\n    payload = await generateTransactionPayload(data);\n  } else if (\"multisigAddress\" in data) {\n    generateTransactionPayloadData = {\n      aptosConfig,\n      multisigAddress: data.multisigAddress,\n      function: data.function,\n      functionArguments: data.functionArguments,\n      typeArguments: data.typeArguments,\n      abi: data.abi,\n    };\n    payload = await generateTransactionPayload(generateTransactionPayloadData);\n  } else {\n    generateTransactionPayloadData = {\n      aptosConfig,\n      function: data.function,\n      functionArguments: data.functionArguments,\n      typeArguments: data.typeArguments,\n      abi: data.abi,\n    };\n    payload = await generateTransactionPayload(generateTransactionPayloadData);\n  }\n  return payload;\n}\n\n/**\n * Builds a raw transaction based on the provided configuration and payload.\n * This function helps in creating a transaction that can be sent to the Aptos blockchain.\n *\n * @param args - The arguments for generating the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.sender - The address of the sender of the transaction.\n * @param args.options - Additional options for the transaction.\n * @param payload - The payload of the transaction, which defines the action to be performed.\n * @group Implementation\n */\nexport async function buildRawTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n  payload: AnyTransactionPayloadInstance,\n): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, options } = args;\n\n  let feePayerAddress;\n  if (isFeePayerTransactionInput(args)) {\n    feePayerAddress = AccountAddress.ZERO.toString();\n  }\n\n  if (isMultiAgentTransactionInput(args)) {\n    const { secondarySignerAddresses } = args;\n    return buildTransaction({\n      aptosConfig,\n      sender,\n      payload,\n      options,\n      secondarySignerAddresses,\n      feePayerAddress,\n    });\n  }\n\n  return buildTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n    feePayerAddress,\n  });\n}\n\n/**\n * Determine if the transaction input includes a fee payer.\n *\n * @param data - The input data for generating a transaction.\n * @param data.withFeePayer - Indicates whether a fee payer is included in the transaction input.\n * @returns A boolean value indicating if the transaction input has a fee payer.\n * @group Implementation\n */\nfunction isFeePayerTransactionInput(data: InputGenerateTransactionData): boolean {\n  return data.withFeePayer === true;\n}\n\n/**\n * Determines whether the provided transaction input data includes multiple agent signatures.\n *\n * @param data - The transaction input data to evaluate.\n * @param data.secondarySignerAddresses - An array of secondary signer addresses, indicating multiple agents.\n * @group Implementation\n */\nfunction isMultiAgentTransactionInput(\n  data: InputGenerateTransactionData,\n): data is InputGenerateMultiAgentRawTransactionData {\n  return \"secondarySignerAddresses\" in data;\n}\n\n/**\n * Builds a signing message that can be signed by external signers.\n *\n * Note: Please prefer using `signTransaction` unless signing outside the SDK.\n *\n * @param args - The arguments for generating the signing message.\n * @param args.transaction - AnyRawTransaction, as generated by `generateTransaction()`.\n *\n * @returns The message to be signed.\n * @group Implementation\n */\nexport function getSigningMessage(args: { transaction: AnyRawTransaction }): Uint8Array {\n  const { transaction } = args;\n  return generateSigningMessageForTransaction(transaction);\n}\n\n/**\n * Sign a transaction that can later be submitted to the chain.\n *\n * @param args The arguments for signing the transaction.\n * @param args.signer The signer account to sign the transaction.\n * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses.\n *\n * @return The signer AccountAuthenticator.\n * @group Implementation\n */\nexport function signTransaction(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const { signer, transaction } = args;\n  return signer.signTransactionWithAuthenticator(transaction);\n}\n\nexport function signAsFeePayer(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const { signer, transaction } = args;\n\n  // if transaction doesn't hold a \"feePayerAddress\" prop it means\n  // this is not a fee payer transaction\n  if (!transaction.feePayerAddress) {\n    throw new Error(`Transaction ${transaction} is not a Fee Payer transaction`);\n  }\n\n  // Set the feePayerAddress to the signer account address\n  transaction.feePayerAddress = signer.accountAddress;\n\n  return signTransaction({\n    signer,\n    transaction,\n  });\n}\n\n/**\n * Simulates a transaction before signing it to evaluate its potential outcome.\n *\n * @param args The arguments for simulating the transaction.\n * @param args.aptosConfig The configuration for the Aptos network.\n * @param args.transaction The raw transaction to simulate.\n * @param args.signerPublicKey Optional. The signer public key.\n * @param args.secondarySignersPublicKeys Optional. For when the transaction involves multiple signers.\n * @param args.feePayerPublicKey Optional. For when the transaction is sponsored by a fee payer.\n * @param args.options Optional. A configuration object to customize the simulation process.\n * @param args.options.estimateGasUnitPrice Optional. Indicates whether to estimate the gas unit price.\n * @param args.options.estimateMaxGasAmount Optional. Indicates whether to estimate the maximum gas amount.\n * @param args.options.estimatePrioritizedGasUnitPrice Optional. Indicates whether to estimate the prioritized gas unit price.\n * @group Implementation\n */\nexport async function simulateTransaction(\n  args: { aptosConfig: AptosConfig } & InputSimulateTransactionData,\n): Promise<Array<UserTransactionResponse>> {\n  const { aptosConfig, transaction, signerPublicKey, secondarySignersPublicKeys, feePayerPublicKey, options } = args;\n\n  const signedTransaction = generateSignedTransactionForSimulation({\n    transaction,\n    signerPublicKey,\n    secondarySignersPublicKeys,\n    feePayerPublicKey,\n    options,\n  });\n\n  const { data } = await postAptosFullNode<Uint8Array, Array<UserTransactionResponse>>({\n    aptosConfig,\n    body: signedTransaction,\n    path: \"transactions/simulate\",\n    params: {\n      estimate_gas_unit_price: args.options?.estimateGasUnitPrice ?? false,\n      estimate_max_gas_amount: args.options?.estimateMaxGasAmount ?? false,\n      estimate_prioritized_gas_unit_price: args.options?.estimatePrioritizedGasUnitPrice ?? false,\n    },\n    originMethod: \"simulateTransaction\",\n    contentType: MimeType.BCS_SIGNED_TRANSACTION,\n  });\n  return data;\n}\n\n/**\n * Submit a transaction to the Aptos blockchain.\n *\n * @param args - The arguments for submitting the transaction.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.transaction - The Aptos transaction data to be submitted.\n * @param args.senderAuthenticator - The account authenticator of the transaction sender.\n * @param args.secondarySignerAuthenticators - Optional. Authenticators for additional signers in a multi-signer transaction.\n *\n * @returns PendingTransactionResponse - The response containing the status of the submitted transaction.\n * @group Implementation\n */\nexport async function submitTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n  } & InputSubmitTransactionData,\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig } = args;\n  const signedTransaction = generateSignedTransaction({ ...args });\n  try {\n    const { data } = await postAptosFullNode<Uint8Array, PendingTransactionResponse>({\n      aptosConfig,\n      body: signedTransaction,\n      path: \"transactions\",\n      originMethod: \"submitTransaction\",\n      contentType: MimeType.BCS_SIGNED_TRANSACTION,\n    });\n    return data;\n  } catch (e) {\n    const signedTxn = SignedTransaction.deserialize(new Deserializer(signedTransaction));\n    if (\n      signedTxn.authenticator.isSingleSender() &&\n      signedTxn.authenticator.sender.isSingleKey() &&\n      (signedTxn.authenticator.sender.public_key.publicKey instanceof KeylessPublicKey ||\n        signedTxn.authenticator.sender.public_key.publicKey instanceof FederatedKeylessPublicKey)\n    ) {\n      await AbstractKeylessAccount.fetchJWK({\n        aptosConfig,\n        publicKey: signedTxn.authenticator.sender.public_key.publicKey,\n        kid: (signedTxn.authenticator.sender.signature.signature as KeylessSignature).getJwkKid(),\n      });\n    }\n    throw e;\n  }\n}\n\nexport type FeePayerOrFeePayerAuthenticatorOrNeither =\n  | { feePayer: Account; feePayerAuthenticator?: never }\n  | { feePayer?: never; feePayerAuthenticator: AccountAuthenticator }\n  | { feePayer?: never; feePayerAuthenticator?: never };\n\nexport async function signAndSubmitTransaction(\n  args: FeePayerOrFeePayerAuthenticatorOrNeither & {\n    aptosConfig: AptosConfig;\n    signer: Account;\n    transaction: AnyRawTransaction;\n  },\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig, signer, feePayer, transaction } = args;\n  // If the signer contains a KeylessAccount, await proof fetching in case the proof\n  // was fetched asynchronously.\n  if (isKeylessSigner(signer)) {\n    await signer.checkKeylessAccountValidity(aptosConfig);\n  }\n  if (isKeylessSigner(feePayer)) {\n    await feePayer.checkKeylessAccountValidity(aptosConfig);\n  }\n  const feePayerAuthenticator =\n    args.feePayerAuthenticator || (feePayer && signAsFeePayer({ signer: feePayer, transaction }));\n\n  const senderAuthenticator = signTransaction({ signer, transaction });\n  return submitTransaction({\n    aptosConfig,\n    transaction,\n    senderAuthenticator,\n    feePayerAuthenticator,\n  });\n}\n\nexport async function signAndSubmitAsFeePayer(args: {\n  aptosConfig: AptosConfig;\n  feePayer: Account;\n  senderAuthenticator: AccountAuthenticator;\n  transaction: AnyRawTransaction;\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig, senderAuthenticator, feePayer, transaction } = args;\n\n  if (isKeylessSigner(feePayer)) {\n    await feePayer.checkKeylessAccountValidity(aptosConfig);\n  }\n\n  const feePayerAuthenticator = signAsFeePayer({ signer: feePayer, transaction });\n\n  return submitTransaction({\n    aptosConfig,\n    transaction,\n    senderAuthenticator,\n    feePayerAuthenticator,\n  });\n}\n\nconst packagePublishAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [TypeTagVector.u8(), new TypeTagVector(TypeTagVector.u8())],\n};\n\n/**\n * Publishes a package transaction to the Aptos blockchain.\n * This function allows you to create and send a transaction that publishes a package with the specified metadata and bytecode.\n *\n * @param args - The arguments for the package transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.account - The address of the account sending the transaction.\n * @param args.metadataBytes - The metadata associated with the package, represented as hexadecimal input.\n * @param args.moduleBytecode - An array of module bytecode, each represented as hexadecimal input.\n * @param args.options - Optional parameters for generating the transaction.\n * @group Implementation\n */\nexport async function publicPackageTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: AccountAddressInput;\n  metadataBytes: HexInput;\n  moduleBytecode: Array<HexInput>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, account, metadataBytes, moduleBytecode, options } = args;\n\n  const totalByteCode = moduleBytecode.map((bytecode) => MoveVector.U8(bytecode));\n\n  return generateTransaction({\n    aptosConfig,\n    sender: AccountAddress.from(account),\n    data: {\n      function: \"0x1::code::publish_package_txn\",\n      functionArguments: [MoveVector.U8(metadataBytes), new MoveVector(totalByteCode)],\n      abi: packagePublishAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/account}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * account namespace and without having a dependency cycle error.\n * @group Implementation\n */\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  getAptosFullNode,\n  getPageWithObfuscatedCursor,\n  paginateWithCursor,\n  paginateWithObfuscatedCursor,\n} from \"../client\";\nimport {\n  AccountData,\n  CursorPaginationArgs,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  GetObjectDataQueryResponse,\n  LedgerVersionArg,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  PendingTransactionResponse,\n  TokenStandardArg,\n  TransactionResponse,\n  WhereArg,\n} from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { Account, Ed25519Account, MultiEd25519Account } from \"../account\";\nimport { AnyPublicKey, Ed25519PublicKey, PrivateKey } from \"../core/crypto\";\nimport { queryIndexer } from \"./general\";\nimport { getModule as getModuleUtil, getInfo as getInfoUtil } from \"./utils\";\nimport {\n  GetAccountCoinsCountQuery,\n  GetAccountCoinsDataQuery,\n  GetAccountCollectionsWithOwnedTokensQuery,\n  GetObjectDataQuery,\n  GetAccountOwnedTokensFromCollectionQuery,\n  GetAccountOwnedTokensQuery,\n  GetAccountTokensCountQuery,\n  GetAccountTransactionsCountQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetAccountCoinsCount,\n  GetAccountCoinsData,\n  GetAccountCollectionsWithOwnedTokens,\n  GetObjectData,\n  GetAccountOwnedTokens,\n  GetAccountOwnedTokensFromCollection,\n  GetAccountTokensCount,\n  GetAccountTransactionsCount,\n} from \"../types/generated/queries\";\nimport { Secp256k1PrivateKey, AuthenticationKey, Ed25519PrivateKey, createObjectAddress } from \"../core\";\nimport { CurrentFungibleAssetBalancesBoolExp } from \"../types/generated/types\";\nimport { getTableItem } from \"./table\";\nimport { APTOS_COIN } from \"../utils\";\nimport { AptosApiError } from \"../errors\";\nimport { signAndSubmitTransaction, generateTransaction } from \"./transactionSubmission\";\nimport { EntryFunctionABI, RotationProofChallenge, TypeTagU8, TypeTagVector } from \"../transactions\";\nimport { U8, MoveVector } from \"../bcs\";\nimport { waitForTransaction } from \"./transaction\";\n\n/**\n * Retrieves account information for a specified account address.\n *\n * @param args - The arguments for retrieving account information.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.accountAddress - The address of the account to retrieve information for.\n * @group Implementation\n */\nexport async function getInfo(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<AccountData> {\n  return getInfoUtil(args);\n}\n\n/**\n * Retrieves the modules associated with a specified account address.\n *\n * @param args - The arguments for retrieving modules.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.accountAddress - The address of the account whose modules are to be retrieved.\n * @param args.options - Optional parameters for pagination and ledger version.\n * @param args.options.limit - The maximum number of modules to retrieve (default is 1000).\n * @param args.options.offset - The starting point for pagination.  Note, this is obfuscated and is not an index.\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getModules(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: { limit?: number } & LedgerVersionArg;\n}): Promise<MoveModuleBytecode[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithObfuscatedCursor<{}, MoveModuleBytecode[]>({\n    aptosConfig,\n    originMethod: \"getModules\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/modules`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      limit: options?.limit ?? 1000,\n    },\n  });\n}\n\n/**\n * Retrieves the modules associated with a specified account address.\n *\n * @param args - The arguments for retrieving modules.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.accountAddress - The address of the account whose modules are to be retrieved.\n * @param args.options - Optional parameters for pagination and ledger version.\n * @param args.options.cursor - The starting point for pagination.  Note, this is obfuscated and is not an index.\n * @param args.options.limit - The maximum number of modules to retrieve (default is 100).\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getModulesPage(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: CursorPaginationArgs & LedgerVersionArg;\n}): Promise<{ modules: MoveModuleBytecode[]; cursor: string | undefined }> {\n  const { aptosConfig, accountAddress, options } = args;\n  const { response, cursor } = await getPageWithObfuscatedCursor<{}, MoveModuleBytecode[]>({\n    aptosConfig,\n    originMethod: \"getModulesPage\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/modules`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      cursor: options?.cursor,\n      limit: options?.limit ?? 100,\n    },\n  });\n\n  return { modules: response.data, cursor };\n}\n\n/**\n * Queries for a move module given an account address and module name.\n * This function can help you retrieve the module's ABI and other relevant information.\n *\n * @param args - The arguments for retrieving the module.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The account address in hex-encoded 32 byte format.\n * @param args.moduleName - The name of the module to retrieve.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - Specifies the ledger version of transactions. By default, the latest version will be used.\n * @returns The move module.\n * @group Implementation\n */\nexport async function getModule(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  return getModuleUtil(args);\n}\n\n/**\n * Retrieves a list of transactions associated with a specific account address.\n * This function allows you to paginate through the transactions for better performance and usability.\n *\n * @param args - The arguments for retrieving transactions.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The account address for which to retrieve transactions.\n * @param args.options - Optional pagination parameters.\n * @param args.options.offset - The starting point for pagination.\n * @param args.options.limit - The maximum number of transactions to retrieve.\n * @group Implementation\n */\nexport async function getTransactions(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs;\n}): Promise<TransactionResponse[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, TransactionResponse[]>({\n    aptosConfig,\n    originMethod: \"getTransactions\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/transactions`,\n    params: { start: options?.offset, limit: options?.limit },\n  });\n}\n\n/**\n * Retrieves a list of resources associated with a specific account address.\n *\n * @param args - The arguments for retrieving resources.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account to fetch resources for.\n * @param args.options - Optional pagination and ledger version parameters.\n * @param args.options.limit - The maximum number of resources to retrieve (default is 999).\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getResources(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: { limit?: number } & LedgerVersionArg;\n}): Promise<MoveResource[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithObfuscatedCursor<{}, MoveResource[]>({\n    aptosConfig,\n    originMethod: \"getResources\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resources`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      limit: options?.limit ?? 999,\n    },\n  });\n}\n\n/**\n * Retrieves a page of resources associated with a specific account address.\n *\n * @param args - The arguments for retrieving resources.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account to fetch resources for.\n * @param args.options - Optional pagination and ledger version parameters.\n * @param args.options.cursor - The starting point for pagination.  Note, this is obfuscated and is not an index.\n * @param args.options.limit - The maximum number of resources to retrieve (default is 100).\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getResourcesPage(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: CursorPaginationArgs & LedgerVersionArg;\n}): Promise<{ resources: MoveResource[]; cursor: string | undefined }> {\n  const { aptosConfig, accountAddress, options } = args;\n  const { response, cursor } = await getPageWithObfuscatedCursor<{}, MoveResource[]>({\n    aptosConfig,\n    originMethod: \"getResourcesPage\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resources`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      cursor: options?.cursor,\n      limit: options?.limit ?? 100,\n    },\n  });\n\n  return { resources: response.data, cursor };\n}\n\n/**\n * Retrieves a specific resource of a given type for the specified account address.\n *\n * @param args - The arguments for retrieving the resource.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account from which to retrieve the resource.\n * @param args.resourceType - The type of the resource to retrieve, specified as a MoveStructId.\n * @param args.options - Optional parameters for specifying the ledger version.\n * @group Implementation\n */\nexport async function getResource<T extends {}>(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  resourceType: MoveStructId;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, accountAddress, resourceType, options } = args;\n  const { data } = await getAptosFullNode<{}, MoveResource>({\n    aptosConfig,\n    originMethod: \"getResource\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resource/${resourceType}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data.data as T;\n}\n\n/**\n * Retrieves the original account address associated with a given authentication key, which is useful for handling key rotations.\n *\n * @param args - The arguments for the lookup.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.authenticationKey - The authentication key for which to look up the original address.\n * @param args.options - Optional parameters for specifying the ledger version.\n * @returns The original account address or the provided authentication key address if not found.\n * @throws Throws an error if the lookup fails for reasons other than the address not being found.\n * @group Implementation\n */\nexport async function lookupOriginalAccountAddress(args: {\n  aptosConfig: AptosConfig;\n  authenticationKey: AccountAddressInput;\n  options?: LedgerVersionArg;\n}): Promise<AccountAddress> {\n  const { aptosConfig, authenticationKey, options } = args;\n  type OriginatingAddress = {\n    address_map: { handle: string };\n  };\n  const resource = await getResource<OriginatingAddress>({\n    aptosConfig,\n    accountAddress: \"0x1\",\n    resourceType: \"0x1::account::OriginatingAddress\",\n    options,\n  });\n\n  const {\n    address_map: { handle },\n  } = resource;\n\n  const authKeyAddress = AccountAddress.from(authenticationKey);\n\n  // If the address is not found in the address map, which means its not rotated\n  // then return the address as is\n  try {\n    const originalAddress = await getTableItem<string>({\n      aptosConfig,\n      handle,\n      data: {\n        key: authKeyAddress.toString(),\n        key_type: \"address\",\n        value_type: \"address\",\n      },\n      options,\n    });\n\n    return AccountAddress.from(originalAddress);\n  } catch (err) {\n    if (err instanceof AptosApiError && err.data.error_code === \"table_item_not_found\") {\n      return authKeyAddress;\n    }\n\n    throw err;\n  }\n}\n\n/**\n * Retrieves the count of tokens owned by a specific account address.\n *\n * @param args - The arguments for retrieving the account tokens count.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.accountAddress - The address of the account for which to count the tokens.\n * @returns The count of tokens owned by the specified account.\n * @group Implementation\n */\nexport async function getAccountTokensCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string }; amount: { _gt: number } } = {\n    owner_address: { _eq: address },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountTokensCount,\n    variables: { where_condition: whereCondition },\n  };\n\n  const data = await queryIndexer<GetAccountTokensCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTokensCount\",\n  });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.current_token_ownerships_v2_aggregate.aggregate\n    ? data.current_token_ownerships_v2_aggregate.aggregate.count\n    : 0;\n}\n\n/**\n * Retrieves the tokens owned by a specified account address.\n *\n * @param args - The arguments for retrieving the account's tokens.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The address of the account whose tokens are being queried.\n * @param args.options - Optional parameters for filtering and pagination.\n * @param args.options.tokenStandard - The specific token standard to filter the results.\n * @param args.options.offset - The number of records to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of records to return.\n * @param args.options.orderBy - The criteria for ordering the results.\n * @returns A promise that resolves to the current token ownerships of the specified account.\n * @group Implementation\n */\nexport async function getAccountOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensQueryResponse[0]>;\n}): Promise<GetAccountOwnedTokensQueryResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string }; amount: { _gt: number }; token_standard?: { _eq: string } } =\n    {\n      owner_address: { _eq: address },\n      amount: { _gt: 0 },\n    };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokens\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\n/**\n * Retrieves the tokens owned by a specific account from a particular collection address.\n *\n * @param args - The parameters required to fetch the owned tokens.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.accountAddress - The address of the account whose tokens are being queried.\n * @param args.collectionAddress - The address of the collection from which tokens are being retrieved.\n * @param args.options - Optional parameters for filtering and pagination, including token standard, pagination arguments, and\n * order by options.\n * @group Implementation\n */\nexport async function getAccountOwnedTokensFromCollectionAddress(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  collectionAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensFromCollectionResponse[0]>;\n}): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n  const { aptosConfig, accountAddress, collectionAddress, options } = args;\n  const ownerAddress = AccountAddress.from(accountAddress).toStringLong();\n  const collAddress = AccountAddress.from(collectionAddress).toStringLong();\n\n  const whereCondition: {\n    owner_address: { _eq: string };\n    current_token_data: { collection_id: { _eq: string } };\n    amount: { _gt: number };\n    token_standard?: { _eq: string };\n  } = {\n    owner_address: { _eq: ownerAddress },\n    current_token_data: { collection_id: { _eq: collAddress } },\n    amount: { _gt: 0 },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokensFromCollection,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensFromCollectionQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokensFromCollectionAddress\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\n/**\n * Retrieves the collections owned by a specified account along with the tokens in those collections.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The address of the account whose collections are being queried.\n * @param args.options - Optional parameters for filtering and pagination.\n * @param args.options.tokenStandard - An optional token standard to filter the collections.\n * @param args.options.offset - An optional offset for pagination.\n * @param args.options.limit - An optional limit for the number of results returned.\n * @param args.options.orderBy - An optional parameter to specify the order of the results.\n * @group Implementation\n */\nexport async function getAccountCollectionsWithOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n}): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: {\n    owner_address: { _eq: string };\n    current_collection?: { token_standard: { _eq: string } };\n  } = {\n    owner_address: { _eq: address },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.current_collection = {\n      token_standard: { _eq: options?.tokenStandard },\n    };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountCollectionsWithOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCollectionsWithOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCollectionsWithOwnedTokens\",\n  });\n\n  return data.current_collection_ownership_v2_view;\n}\n\n/**\n * Retrieves the count of transactions associated with a specified account.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account for which to retrieve the transaction count.\n * @returns The number of transactions associated with the specified account.\n * @group Implementation\n */\nexport async function getAccountTransactionsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const graphqlQuery = {\n    query: GetAccountTransactionsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountTransactionsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTransactionsCount\",\n  });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.account_transactions_aggregate.aggregate ? data.account_transactions_aggregate.aggregate.count : 0;\n}\n\n/**\n * Retrieves the amount of a specific coin held by an account.\n *\n * @param args - The parameters for the request.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.accountAddress - The address of the account to query.\n * @param args.coinType - Optional; the type of coin to check the amount for.\n * @param args.faMetadataAddress - Optional; the address of the fungible asset metadata.\n * @returns The amount of the specified coin held by the account, or 0 if none is found.\n * @throws Error if neither coinType nor faMetadataAddress is provided.\n * @group Implementation\n */\nexport async function getAccountCoinAmount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  coinType?: MoveStructId;\n  faMetadataAddress?: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress, coinType, faMetadataAddress } = args;\n\n  let coinAssetType: string | undefined = coinType;\n  let faAddress: string;\n\n  if (coinType !== undefined && faMetadataAddress !== undefined) {\n    faAddress = AccountAddress.from(faMetadataAddress).toStringLong();\n  } else if (coinType !== undefined && faMetadataAddress === undefined) {\n    // TODO Move to a separate function as defined in the AIP for coin migration\n    if (coinType === APTOS_COIN) {\n      faAddress = AccountAddress.A.toStringLong();\n    } else {\n      faAddress = createObjectAddress(AccountAddress.A, coinType).toStringLong();\n    }\n  } else if (coinType === undefined && faMetadataAddress !== undefined) {\n    const addr = AccountAddress.from(faMetadataAddress);\n    faAddress = addr.toStringLong();\n    if (addr === AccountAddress.A) {\n      coinAssetType = APTOS_COIN;\n    }\n    // The paired CoinType should be populated outside of this function in another\n    // async call. We cannot do this internally due to dependency cycles issue.\n  } else {\n    throw new Error(\"Either coinType, fungibleAssetAddress, or both must be provided\");\n  }\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  // Search by fungible asset address, unless it has a coin it migrated from\n  let where: any = { asset_type: { _eq: faAddress } };\n  if (coinAssetType !== undefined) {\n    where = { asset_type: { _in: [coinAssetType, faAddress] } };\n  }\n\n  const data = await getAccountCoinsData({\n    aptosConfig,\n    accountAddress: address,\n    options: {\n      where,\n    },\n  });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data[0] ? data[0].amount : 0;\n}\n\n/**\n * Retrieves the current fungible asset balances for a specified account.\n *\n * @param args - The arguments for retrieving account coins data.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.accountAddress - The address of the account for which to retrieve coin data.\n * @param args.options - Optional parameters for pagination and filtering the results.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.orderBy - The criteria for ordering the results.\n * @param args.options.where - Conditions to filter the results based on the current fungible asset balances.\n * @group Implementation\n */\nexport async function getAccountCoinsData(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetAccountCoinsDataResponse[0]> & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n}): Promise<GetAccountCoinsDataResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string } } = {\n    ...options?.where,\n    owner_address: { _eq: address },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountCoinsData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsData\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n\n/**\n * Retrieves the count of fungible asset coins held by a specified account.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.accountAddress - The address of the account for which to retrieve the coin count.\n * @throws Error if the count of account coins cannot be retrieved.\n * @group Implementation\n */\nexport async function getAccountCoinsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const graphqlQuery = {\n    query: GetAccountCoinsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsCount\",\n  });\n\n  if (!data.current_fungible_asset_balances_aggregate.aggregate) {\n    throw Error(\"Failed to get the count of account coins\");\n  }\n\n  return data.current_fungible_asset_balances_aggregate.aggregate.count;\n}\n\n/**\n * Retrieves the objects owned by a specified account.\n *\n * @param args - The parameters for the request.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The address of the account whose owned objects are to be retrieved.\n * @param args.options - Optional parameters for pagination and ordering of the results.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.orderBy - The criteria to order the results by.\n * @returns A promise that resolves to the current objects owned by the specified account.\n * @group Implementation\n */\nexport async function getAccountOwnedObjects(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n}): Promise<GetObjectDataQueryResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string } } = {\n    owner_address: { _eq: address },\n  };\n  const graphqlQuery = {\n    query: GetObjectData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n  const data = await queryIndexer<GetObjectDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedObjects\",\n  });\n\n  return data.current_objects;\n}\n\n/**\n * Derives an account from the provided private key and Aptos configuration.\n * This function helps in obtaining the account details associated with a given private key,\n * considering both unified and legacy authentication schemes.\n *\n * NOTE: There is a potential issue once the unified single signer scheme is adopted by the community.\n * Because one could create two accounts with the same private key with this new authenticator type,\n * we’ll need to determine the order in which we look up the accounts: first unified scheme and then legacy scheme,\n * or first legacy scheme and then unified scheme.\n *\n * @param args - The arguments for deriving the account.\n * @param args.aptosConfig - The Aptos configuration used for account lookup.\n * @param args.privateKey - The private key used to derive the account.\n * @throws Error if the account cannot be derived from the private key.\n * @group Implementation\n * @deprecated Note that more inspection is needed by the user to determine which account exists on-chain\n */\nexport async function deriveAccountFromPrivateKey(args: {\n  aptosConfig: AptosConfig;\n  privateKey: PrivateKey;\n}): Promise<Account> {\n  const { aptosConfig, privateKey } = args;\n  const publicKey = new AnyPublicKey(privateKey.publicKey());\n\n  if (privateKey instanceof Secp256k1PrivateKey) {\n    // private key is secp256k1, therefore we know it for sure uses a single signer key\n    const authKey = AuthenticationKey.fromPublicKey({ publicKey });\n    const address = authKey.derivedAddress();\n    return Account.fromPrivateKey({ privateKey, address });\n  }\n\n  if (privateKey instanceof Ed25519PrivateKey) {\n    // lookup legacy ed25519\n    const legacyAuthKey = AuthenticationKey.fromPublicKey({\n      publicKey: publicKey.publicKey as Ed25519PublicKey,\n    });\n    const isLegacyEd25519 = await isAccountExist({ authKey: legacyAuthKey, aptosConfig });\n    if (isLegacyEd25519) {\n      const address = legacyAuthKey.derivedAddress();\n      return Account.fromPrivateKey({ privateKey, address, legacy: true });\n    }\n    // lookup single sender ed25519\n    const singleSenderTransactionAuthenticatorAuthKey = AuthenticationKey.fromPublicKey({\n      publicKey,\n    });\n    const isSingleSenderTransactionAuthenticator = await isAccountExist({\n      authKey: singleSenderTransactionAuthenticatorAuthKey,\n      aptosConfig,\n    });\n    if (isSingleSenderTransactionAuthenticator) {\n      const address = singleSenderTransactionAuthenticatorAuthKey.derivedAddress();\n      return Account.fromPrivateKey({ privateKey, address, legacy: false });\n    }\n  }\n  // if we are here, it means we couldn't find an address with an\n  // auth key that matches the provided private key\n  throw new Error(`Can't derive account from private key ${privateKey}`);\n}\n\n/**\n * Checks if an account exists by verifying its information against the Aptos blockchain.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.authKey - The authentication key used to derive the account address.\n * @returns A promise that resolves to a boolean indicating whether the account exists.\n *\n * @throws Throws an Error if there is an issue while looking for account information.\n * @group Implementation\n */\nexport async function isAccountExist(args: { aptosConfig: AptosConfig; authKey: AuthenticationKey }): Promise<boolean> {\n  const { aptosConfig, authKey } = args;\n  const accountAddress = await lookupOriginalAccountAddress({\n    aptosConfig,\n    authenticationKey: authKey.derivedAddress(),\n  });\n\n  try {\n    await getInfo({\n      aptosConfig,\n      accountAddress,\n    });\n    return true;\n  } catch (error: any) {\n    // account not found\n    if (error.status === 404) {\n      return false;\n    }\n    throw new Error(`Error while looking for an account info ${accountAddress.toString()}`);\n  }\n}\n\nconst rotateAuthKeyAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagU8(),\n    TypeTagVector.u8(),\n    new TypeTagU8(),\n    TypeTagVector.u8(),\n    TypeTagVector.u8(),\n    TypeTagVector.u8(),\n  ],\n};\n\n/**\n * Rotates the authentication key for a given account.\n *\n * @param args - The arguments for rotating the authentication key.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.fromAccount - The account from which the authentication key will be rotated.\n * @param args.toAccount - (Optional) The target account to rotate to. Required if not using toNewPrivateKey or toAuthKey.\n * @param args.toNewPrivateKey - (Optional) The new private key to rotate to. Required if not using toAccount or toAuthKey.\n * @param args.toAuthKey - (Optional) The new authentication key to rotate to. Can only be used with dangerouslySkipVerification=true.\n * @param args.dangerouslySkipVerification - (Optional) If true, skips verification steps after rotation. Required when using toAuthKey.\n *\n * @remarks\n * This function supports three modes of rotation:\n * 1. Using a target Account object (toAccount)\n * 2. Using a new private key (toNewPrivateKey)\n * 3. Using a raw authentication key (toAuthKey) - requires dangerouslySkipVerification=true\n *\n * When not using dangerouslySkipVerification, the function performs additional safety checks and account setup.\n *\n * If the new key is a multi key, skipping verification is dangerous because verification will publish the public key onchain and\n * prevent users from being locked out of the account from loss of knowledge of one of the public keys.\n *\n * @returns A promise that resolves to the pending transaction response.\n * @throws Error if the rotation fails or verification fails.\n *\n * @group Implementation\n */\nexport async function rotateAuthKey(\n  args: {\n    aptosConfig: AptosConfig;\n    fromAccount: Account;\n  } & (\n    | { toAccount: Account; dangerouslySkipVerification?: never }\n    | { toNewPrivateKey: Ed25519PrivateKey; dangerouslySkipVerification?: never }\n    | { toAuthKey: AuthenticationKey; dangerouslySkipVerification: true }\n  ),\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig, fromAccount, dangerouslySkipVerification } = args;\n  if (\"toNewPrivateKey\" in args) {\n    return rotateAuthKeyWithChallenge({\n      aptosConfig,\n      fromAccount,\n      toNewPrivateKey: args.toNewPrivateKey,\n    });\n  }\n  let authKey: AuthenticationKey;\n  if (\"toAccount\" in args) {\n    if (args.toAccount instanceof Ed25519Account) {\n      return rotateAuthKeyWithChallenge({ aptosConfig, fromAccount, toNewPrivateKey: args.toAccount.privateKey });\n    }\n    if (args.toAccount instanceof MultiEd25519Account) {\n      return rotateAuthKeyWithChallenge({ aptosConfig, fromAccount, toAccount: args.toAccount });\n    }\n    authKey = args.toAccount.publicKey.authKey();\n  } else if (\"toAuthKey\" in args) {\n    authKey = args.toAuthKey;\n  } else {\n    throw new Error(\"Invalid arguments\");\n  }\n\n  const pendingTxn = await rotateAuthKeyUnverified({\n    aptosConfig,\n    fromAccount,\n    toAuthKey: authKey,\n  });\n\n  if (dangerouslySkipVerification === true) {\n    return pendingTxn;\n  }\n\n  const rotateAuthKeyTxnResponse = await waitForTransaction({\n    aptosConfig,\n    transactionHash: pendingTxn.hash,\n  });\n  if (!rotateAuthKeyTxnResponse.success) {\n    throw new Error(`Failed to rotate authentication key - ${rotateAuthKeyTxnResponse}`);\n  }\n\n  // Verify the rotation by setting the originating address to the new account.\n  // This verifies the rotation even if the transaction payload fails to execute successfully.\n  const verificationTxn = await generateTransaction({\n    aptosConfig,\n    sender: fromAccount.accountAddress,\n    data: {\n      function: \"0x1::account::set_originating_address\",\n      functionArguments: [],\n    },\n  });\n\n  return signAndSubmitTransaction({\n    aptosConfig,\n    signer: args.toAccount, // Use the new account to sign\n    transaction: verificationTxn,\n  });\n}\n\nasync function rotateAuthKeyWithChallenge(\n  args: {\n    aptosConfig: AptosConfig;\n    fromAccount: Account;\n  } & ({ toNewPrivateKey: Ed25519PrivateKey } | { toAccount: MultiEd25519Account }),\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig, fromAccount } = args;\n  const accountInfo = await getInfo({\n    aptosConfig,\n    accountAddress: fromAccount.accountAddress,\n  });\n\n  let newAccount: Account;\n  if (\"toNewPrivateKey\" in args) {\n    newAccount = Account.fromPrivateKey({ privateKey: args.toNewPrivateKey, legacy: true });\n  } else {\n    newAccount = args.toAccount;\n  }\n\n  const challenge = new RotationProofChallenge({\n    sequenceNumber: BigInt(accountInfo.sequence_number),\n    originator: fromAccount.accountAddress,\n    currentAuthKey: AccountAddress.from(accountInfo.authentication_key),\n    newPublicKey: newAccount.publicKey,\n  });\n\n  // Sign the challenge\n  const challengeHex = challenge.bcsToBytes();\n  const proofSignedByCurrentKey = fromAccount.sign(challengeHex);\n  const proofSignedByNewKey = newAccount.sign(challengeHex);\n\n  // Generate transaction\n  const rawTxn = await generateTransaction({\n    aptosConfig,\n    sender: fromAccount.accountAddress,\n    data: {\n      function: \"0x1::account::rotate_authentication_key\",\n      functionArguments: [\n        new U8(fromAccount.signingScheme), // from scheme\n        MoveVector.U8(fromAccount.publicKey.toUint8Array()),\n        new U8(newAccount.signingScheme), // to scheme\n        MoveVector.U8(newAccount.publicKey.toUint8Array()),\n        MoveVector.U8(proofSignedByCurrentKey.toUint8Array()),\n        MoveVector.U8(proofSignedByNewKey.toUint8Array()),\n      ],\n      abi: rotateAuthKeyAbi,\n    },\n  });\n  return signAndSubmitTransaction({\n    aptosConfig,\n    signer: fromAccount,\n    transaction: rawTxn,\n  });\n}\n\nconst rotateAuthKeyUnverifiedAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [TypeTagVector.u8()],\n};\n\nasync function rotateAuthKeyUnverified(args: {\n  aptosConfig: AptosConfig;\n  fromAccount: Account;\n  toAuthKey: AuthenticationKey;\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig, fromAccount, toAuthKey } = args;\n  const authKey = toAuthKey;\n  const rawTxn = await generateTransaction({\n    aptosConfig,\n    sender: fromAccount.accountAddress,\n    data: {\n      function: \"0x1::account::rotate_authentication_key_call\",\n      functionArguments: [MoveVector.U8(authKey.toUint8Array())],\n      abi: rotateAuthKeyUnverifiedAbi,\n    },\n  });\n  return signAndSubmitTransaction({\n    aptosConfig,\n    signer: fromAccount,\n    transaction: rawTxn,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { LedgerVersionArg, MimeType, MoveValue } from \"../types\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  generateViewFunctionPayload,\n  InputViewFunctionData,\n  InputViewFunctionJsonData,\n  ViewFunctionJsonPayload,\n} from \"../transactions\";\nimport { Serializer } from \"../bcs\";\nimport { postAptosFullNode } from \"../client\";\n\nexport async function view<T extends Array<MoveValue> = Array<MoveValue>>(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewFunctionData;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, payload, options } = args;\n  const viewFunctionPayload = await generateViewFunctionPayload({\n    ...payload,\n    aptosConfig,\n  });\n\n  const serializer = new Serializer();\n  viewFunctionPayload.serialize(serializer);\n  const bytes = serializer.toUint8Array();\n\n  const { data } = await postAptosFullNode<Uint8Array, MoveValue[]>({\n    aptosConfig,\n    path: \"view\",\n    originMethod: \"view\",\n    contentType: MimeType.BCS_VIEW_FUNCTION,\n    params: { ledger_version: options?.ledgerVersion },\n    body: bytes,\n  });\n\n  return data as T;\n}\n\nexport async function viewJson<T extends Array<MoveValue> = Array<MoveValue>>(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewFunctionJsonData;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, payload, options } = args;\n  const { data } = await postAptosFullNode<ViewFunctionJsonPayload, MoveValue[]>({\n    aptosConfig,\n    originMethod: \"viewJson\",\n    path: \"view\",\n    params: { ledger_version: options?.ledgerVersion },\n    body: {\n      function: payload.function,\n      type_arguments: payload.typeArguments ?? [],\n      arguments: payload.functionArguments ?? [],\n    },\n  });\n\n  return data as T;\n}\n","import {\n  SimpleTransaction,\n  InputGenerateTransactionOptions,\n  TypeTagAddress,\n  TypeTagStruct,\n  stringStructTag,\n} from \"../transactions\";\nimport { AccountAddressInput } from \"../core\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { MoveFunctionId } from \"../types\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { getFunctionParts } from \"../utils/helpers\";\n\nexport async function addAuthenticationFunctionTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  authenticationFunction: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, authenticationFunction, options } = args;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(authenticationFunction as MoveFunctionId);\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::account_abstraction::add_authentication_function\",\n      typeArguments: [],\n      functionArguments: [moduleAddress, moduleName, functionName],\n      abi: {\n        typeParameters: [],\n        parameters: [new TypeTagAddress(), new TypeTagStruct(stringStructTag()), new TypeTagStruct(stringStructTag())],\n      },\n    },\n    options,\n  });\n}\n\nexport async function removeAuthenticationFunctionTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  authenticationFunction: string;\n  options?: InputGenerateTransactionOptions;\n}) {\n  const { aptosConfig, sender, authenticationFunction, options } = args;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(authenticationFunction as MoveFunctionId);\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::account_abstraction::remove_authentication_function\",\n      typeArguments: [],\n      functionArguments: [moduleAddress, moduleName, functionName],\n      abi: {\n        typeParameters: [],\n        parameters: [new TypeTagAddress(), new TypeTagStruct(stringStructTag()), new TypeTagStruct(stringStructTag())],\n      },\n    },\n    options,\n  });\n}\n\nexport async function removeDispatchableAuthenticatorTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}) {\n  const { aptosConfig, sender, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::account_abstraction::remove_authenticator\",\n      typeArguments: [],\n      functionArguments: [],\n      abi: { typeParameters: [], parameters: [] },\n    },\n    options,\n  });\n}\n","import { AccountAddress, AccountAddressInput } from \"../../core\";\nimport {\n  addAuthenticationFunctionTransaction,\n  removeAuthenticationFunctionTransaction,\n  removeDispatchableAuthenticatorTransaction,\n} from \"../../internal/abstraction\";\nimport { view } from \"../../internal/view\";\nimport { InputGenerateTransactionOptions, TypeTagAddress } from \"../../transactions\";\nimport { MoveFunctionId } from \"../../types\";\nimport { getFunctionParts } from \"../../utils/helpers\";\nimport { AptosConfig } from \"../aptosConfig\";\n\nexport class AccountAbstraction {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Adds a dispatchable authentication function to the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.addAuthenticationFunctionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn =  await aptos.signAndSubmitTransaction({ signer: alice, transaction});\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to add the authentication function to.\n   * @param args.authenticationFunction - The authentication function info to add.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to add the authentication function to the account.\n   */\n  public async addAuthenticationFunctionTransaction(args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, authenticationFunction, options } = args;\n    return addAuthenticationFunctionTransaction({\n      aptosConfig: this.config,\n      authenticationFunction,\n      sender: accountAddress,\n      options,\n    });\n  }\n\n  /**\n   * Removes a dispatchable authentication function from the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.removeAuthenticationFunctionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to remove the authentication function from.\n   * @param args.authenticationFunction - The authentication function info to remove.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to remove the authentication function from the account.\n   */\n  public async removeAuthenticationFunctionTransaction(args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, authenticationFunction, options } = args;\n    return removeAuthenticationFunctionTransaction({\n      aptosConfig: this.config,\n      sender: accountAddress,\n      authenticationFunction,\n      options,\n    });\n  }\n\n  /**\n   * Removes a dispatchable authenticator from the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.removeDispatchableAuthenticatorTransaction({\n   *   accountAddress: alice.accountAddress,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to remove the authenticator from.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to remove the authenticator from the account.\n   */\n  public async removeDispatchableAuthenticatorTransaction(args: {\n    accountAddress: AccountAddressInput;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, options } = args;\n    return removeDispatchableAuthenticatorTransaction({ aptosConfig: this.config, sender: accountAddress, options });\n  }\n\n  /**\n   * Gets the dispatchable authentication function for the account.\n   *\n   * @example\n   * ```ts\n   * const functionInfos = await aptos.abstraction.getAuthenticationFunction({\n   *   accountAddress: alice.accountAddress,\n   * });\n   *\n   * if (functionInfos) {\n   *   console.log(`Account ${alice.accountAddress.toString()} is using account abstraction!`);\n   * } else {\n   *   console.log(`Account ${alice.accountAddress.toString()} is not using account abstraction.`);\n   * }\n   * ```\n   *\n   * @param args.accountAddress - The account to get the dispatchable authentication function for.\n   * @returns The dispatchable authentication function for the account.\n   */\n  public async getAuthenticationFunction(args: { accountAddress: AccountAddressInput }) {\n    const { accountAddress } = args;\n    const [{ vec: functionInfoOption }] = await view<\n      [{ vec: { function_name: string; module_name: string; module_address: string }[][] }]\n    >({\n      aptosConfig: this.config,\n      payload: {\n        function: \"0x1::account_abstraction::dispatchable_authenticator\",\n        functionArguments: [AccountAddress.from(accountAddress)],\n        abi: { typeParameters: [], parameters: [new TypeTagAddress()], returnTypes: [] },\n      },\n    });\n\n    if (functionInfoOption.length === 0) return undefined;\n\n    return functionInfoOption[0].map((functionInfo) => ({\n      moduleAddress: AccountAddress.fromString(functionInfo.module_address),\n      moduleName: functionInfo.module_name,\n      functionName: functionInfo.function_name,\n    }));\n  }\n\n  /**\n   * Will return true if the account is abstracted, otherwise false.\n   *\n   * @example\n   * ```ts\n   * const isAccountAbstractionEnabled = await aptos.abstraction.isAccountAbstractionEnabled({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   * if (isAccountAbstractionEnabled) {\n   *   console.log(`Account ${alice.accountAddress.toString()} is using account abstraction!`);\n   * } else {\n   *   console.log(`Account ${alice.accountAddress.toString()} is not using account abstraction.`);\n   * }\n   * ```\n   *\n   * @param args.accountAddress - The account to check.\n   * @returns Whether the account is abstracted.\n   */\n  public isAccountAbstractionEnabled = async (args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n  }) => {\n    const functionInfos = await this.getAuthenticationFunction(args);\n    const { moduleAddress, moduleName, functionName } = getFunctionParts(args.authenticationFunction as MoveFunctionId);\n    return (\n      functionInfos?.some(\n        (functionInfo) =>\n          AccountAddress.fromString(moduleAddress).equals(functionInfo.moduleAddress) &&\n          moduleName === functionInfo.moduleName &&\n          functionName === functionInfo.functionName,\n      ) ?? false\n    );\n  };\n\n  /**\n   * Creates a transaction to enable account abstraction with the given authentication function.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.enableAccountAbstractionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `{alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to enable account abstraction for.\n   * @param args.authenticationFunction - The authentication function info to use.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to enable account abstraction for the account.\n   */\n  public enableAccountAbstractionTransaction = this.addAuthenticationFunctionTransaction;\n\n  /**\n   * Creates a transaction to disable account abstraction. If an authentication function is provided, it will specify to\n   * remove the authentication function.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.disableAccountAbstractionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to disable account abstraction for.\n   * @param args.authenticationFunction - The authentication function info to remove.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to disable account abstraction for the account.\n   */\n  public disableAccountAbstractionTransaction = async (args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction?: string;\n    options?: InputGenerateTransactionOptions;\n  }) => {\n    const { accountAddress, authenticationFunction, options } = args;\n    if (authenticationFunction) {\n      return this.removeAuthenticationFunctionTransaction({\n        accountAddress,\n        authenticationFunction,\n        options,\n      });\n    }\n    return this.removeDispatchableAuthenticatorTransaction({ accountAddress, options });\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account as AccountModule } from \"../account\";\nimport { AccountAddress, PrivateKey, AccountAddressInput, createObjectAddress } from \"../core\";\nimport {\n  AccountData,\n  AnyNumber,\n  CursorPaginationArgs,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  GetObjectDataQueryResponse,\n  LedgerVersionArg,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructId,\n  MoveValue,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n  TransactionResponse,\n  WhereArg,\n} from \"../types\";\nimport {\n  deriveAccountFromPrivateKey,\n  getAccountCoinsCount,\n  getAccountCoinsData,\n  getAccountCollectionsWithOwnedTokens,\n  getAccountOwnedObjects,\n  getAccountOwnedTokens,\n  getAccountOwnedTokensFromCollectionAddress,\n  getAccountTokensCount,\n  getAccountTransactionsCount,\n  getInfo,\n  getModule,\n  getModules,\n  getModulesPage,\n  getResource,\n  getResources,\n  getResourcesPage,\n  getTransactions,\n  lookupOriginalAccountAddress,\n} from \"../internal/account\";\nimport { APTOS_COIN, APTOS_FA, ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { CurrentFungibleAssetBalancesBoolExp } from \"../types/generated/types\";\nimport { view } from \"../internal/view\";\nimport { isEncodedStruct, parseEncodedStruct } from \"../utils\";\nimport { memoizeAsync } from \"../utils/memoize\";\nimport { AccountAbstraction } from \"./account/abstraction\";\n\n/**\n * A class to query all `Account` related queries on Aptos.\n * @group Account\n */\nexport class Account {\n  abstraction: AccountAbstraction;\n\n  /**\n   * Creates an instance of the Aptos client with the provided configuration.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Initialize the Aptos client with testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // specify your own network if needed\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  constructor(readonly config: AptosConfig) {\n    this.abstraction = new AccountAbstraction(config);\n  }\n\n  /**\n   * Queries the current state for an Aptos account given its account address.\n   *\n   * @param args - The arguments for retrieving account information.\n   * @param args.accountAddress - The Aptos account address to query.\n   * @returns The account data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Retrieve account information for a specific address\n   *     const accountInfo = await aptos.getAccountInfo({ accountAddress: \"0x1\" }); // replace with a real account address\n   *     console.log(accountInfo);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountInfo(args: { accountAddress: AccountAddressInput }): Promise<AccountData> {\n    return getInfo({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for all modules in an account given an account address.\n   * This function may call the API multiple times to auto paginate through results.\n   *\n   * @param args.accountAddress - The Aptos account address to query modules for.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it retrieves the latest version.\n   *\n   * @returns - The account modules associated with the specified address.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account modules for a specific account\n   *   const accountModules = await aptos.getAccountModules({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // limiting to 10 modules\n   *     },\n   *   });\n   *\n   *   console.log(accountModules);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountModules(args: {\n    accountAddress: AccountAddressInput;\n    options?: { limit?: number } & LedgerVersionArg;\n  }): Promise<MoveModuleBytecode[]> {\n    return getModules({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a page of modules in an account given an account address.\n   *\n   * @param args.accountAddress - The Aptos account address to query modules for.\n   * @param args.options.cursor - The cursor to start returning results from.  Note, this is obfuscated and is not an index.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it retrieves the latest version.\n   *\n   * @returns - The account modules associated with the specified address. Along with a cursor for future pagination. If the cursor is undefined, it means there are no more modules to fetch.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account modules for a specific account\n   *   const {modules, cursor} = await aptos.getAccountModulesPage({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       cursor: undefined, // starting from the first module\n   *       limit: 10, // limiting to 10 modules\n   *     },\n   *   });\n   *\n   *   console.log(modules);\n   *   console.log(`More to fetch: ${cursor !== undefined}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountModulesPage(args: {\n    accountAddress: AccountAddressInput;\n    options?: CursorPaginationArgs & LedgerVersionArg;\n  }): Promise<{ modules: MoveModuleBytecode[]; cursor: string | undefined }> {\n    return getModulesPage({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a specific account module given an account address and module name.\n   *\n   * @param args.accountAddress - The Aptos account address.\n   * @param args.moduleName - The name of the module.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   *\n   * @returns The account module associated with the specified account address and module name.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the account module for a specific account address and module name\n   *   const module = await aptos.getAccountModule({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     moduleName: \"MyModule\" // specify the module name\n   *   });\n   *\n   *   console.log(module);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountModule(args: {\n    accountAddress: AccountAddressInput;\n    moduleName: string;\n    options?: LedgerVersionArg;\n  }): Promise<MoveModuleBytecode> {\n    return getModule({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries account transactions given an account address.\n   * This function may call the API multiple times to auto paginate and retrieve all account transactions.\n   *\n   * @param args.accountAddress - The Aptos account address to query transactions for.\n   * @param args.options - Optional pagination arguments.\n   * @param args.options.offset - The number of transactions to start returning results from.\n   * @param args.options.limit - The maximum number of results to return.\n   *\n   * @returns The account transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch transactions for a specific account\n   *   const transactions = await aptos.getAccountTransactions({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       offset: 0, // starting from the first transaction\n   *       limit: 10, // limiting to 10 transactions\n   *     },\n   *   });\n   *\n   *   console.log(transactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountTransactions(args: {\n    accountAddress: AccountAddressInput;\n    options?: PaginationArgs;\n  }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all account resources given an account address.\n   * This function may call the API multiple times to auto paginate through results.\n   *\n   * @param args.accountAddress - The Aptos account address to query resources for.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns Account resources.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account resources for a specific account address\n   *   const resources = await aptos.getAccountResources({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(resources);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountResources(args: {\n    accountAddress: AccountAddressInput;\n    options?: PaginationArgs & LedgerVersionArg;\n  }): Promise<MoveResource[]> {\n    return getResources({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a page of account resources given an account address.\n   *\n   * @param args.accountAddress - The Aptos account address to query resources for.\n   * @param args.options.cursor - The cursor to start returning results from.  Note, this is obfuscated and is not an index.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns Account resources.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account resources for a specific account address\n   *   const resources = await aptos.getAccountResourcesPage({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       cursor: undefined, // starting from the first resource\n   *       limit: 10, // limiting to 10 resources\n   *     },\n   *   });\n   *   console.log(resources);\n   *   console.log(`More to fetch: ${resources.cursor !== undefined}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountResourcesPage(args: {\n    accountAddress: AccountAddressInput;\n    options?: CursorPaginationArgs & LedgerVersionArg;\n  }): Promise<{ resources: MoveResource[]; cursor: string | undefined }> {\n    return getResourcesPage({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a specific account resource given an account address and resource type.\n   *\n   * @template T - The typed output of the resource.\n   * @param args.accountAddress - The Aptos account address to query.\n   * @param args.resourceType - The string representation of an on-chain Move struct type, e.g., \"0x1::aptos_coin::AptosCoin\".\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns The account resource of the specified type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the account resource for a specific account address and resource type\n   *   const resource = await aptos.getAccountResource({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     resourceType: \"0x1::aptos_coin::AptosCoin\"\n   *   });\n   *\n   *   console.log(resource);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountResource<T extends {} = any>(args: {\n    accountAddress: AccountAddressInput;\n    resourceType: MoveStructId;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return getResource<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Looks up the account address for a given authentication key, handling both rotated and non-rotated keys.\n   *\n   * @param args.authenticationKey - The authentication key for which to look up the account address.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns Promise<AccountAddress> - The account address associated with the authentication key.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Look up the original account address for a given authentication key\n   *   const accountAddress = await aptos.lookupOriginalAccountAddress({\n   *     authenticationKey: \"0x1\", // replace with a real authentication key\n   *   });\n   *\n   *   console.log(\"Original Account Address:\", accountAddress);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async lookupOriginalAccountAddress(args: {\n    authenticationKey: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: LedgerVersionArg;\n  }): Promise<AccountAddress> {\n    return lookupOriginalAccountAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the current count of tokens owned by a specified account.\n   *\n   * @param args - The parameters for the query.\n   * @param args.accountAddress - The account address to query the token count for.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns The current count of tokens owned by the account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the count of tokens owned by the account\n   *   const tokensCount = await aptos.getAccountTokensCount({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(`Tokens Count: ${tokensCount}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountTokensCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.ACCOUNT_TRANSACTION_PROCESSOR,\n    });\n    return getAccountTokensCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the tokens currently owned by a specified account, including NFTs and fungible tokens.\n   * If desired, you can filter the results by a specific token standard.\n   *\n   * @param args.accountAddress The account address for which to retrieve owned tokens.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard Optional filter for the NFT standard to query for.\n   * @param args.options.offset Optional number to start returning results from.\n   * @param args.options.limit Optional number of results to return.\n   * @param args.options.orderBy Optional order to sort the tokens by.\n   * @returns An array of tokens with their respective data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the tokens owned by a specific account\n   *   const accountOwnedTokens = await aptos.getAccountOwnedTokens({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify how many tokens to return\n   *       orderBy: \"created_at\", // specify the order of the results\n   *     },\n   *   });\n   *\n   *   console.log(accountOwnedTokens);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountOwnedTokens(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensQueryResponse[0]>;\n  }): Promise<GetAccountOwnedTokensQueryResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all current tokens of a specific collection that an account owns by the collection address.\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard parameter.\n   *\n   * @param args.accountAddress - The account address we want to get the tokens for.\n   * @param args.collectionAddress - The address of the collection being queried.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to, before querying.\n   * @param args.options.tokenStandard - The NFT standard to query for.\n   * @param args.options.offset - The number token to start returning results from.\n   * @param args.options.limit - The number of results to return.\n   * @param args.options.orderBy - The order to sort the tokens by.\n   * @returns Tokens array with the token data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get tokens owned by a specific account in a specific collection\n   *   const accountOwnedTokens = await aptos.getAccountOwnedTokensFromCollectionAddress({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     collectionAddress: \"0x2\", // replace with a real collection address\n   *   });\n   *\n   *   console.log(accountOwnedTokens);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountOwnedTokensFromCollectionAddress(args: {\n    accountAddress: AccountAddressInput;\n    collectionAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensFromCollectionResponse[0]>;\n  }): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountOwnedTokensFromCollectionAddress({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for all collections that an account currently has tokens for, including NFTs, fungible tokens, and soulbound tokens.\n   * If you want to filter by a specific token standard, you can pass an optional tokenStandard parameter.\n   *\n   * @param args.accountAddress - The account address we want to get the collections for.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - The NFT standard to query for.\n   * @param args.options.offset - The number of the collection to start returning results from.\n   * @param args.options.limit - The number of results to return.\n   * @param args.options.orderBy - The order to sort the tokens by.\n   * @returns Collections array with the collections data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get account collections with owned tokens for a specific account\n   *   const accountCollectionsWithOwnedTokens = await aptos.getAccountCollectionsWithOwnedTokens({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       tokenStandard: \"NFT\", // specify the token standard if needed\n   *       limit: 10, // specify the number of results to return\n   *     },\n   *   });\n   *\n   *   console.log(accountCollectionsWithOwnedTokens);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCollectionsWithOwnedTokens(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n  }): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountCollectionsWithOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the current count of transactions submitted by an account.\n   *\n   * @param args - The parameters for the query.\n   * @param args.accountAddress - The account address we want to get the total count for.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns Current count of transactions made by an account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the count of transactions for a specific account\n   *   const accountTransactionsCount = await aptos.getAccountTransactionsCount({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     minimumLedgerVersion: 1, // specify your own minimum ledger version if needed\n   *   });\n   *\n   *   console.log(accountTransactionsCount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountTransactionsCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.ACCOUNT_TRANSACTION_PROCESSOR,\n    });\n    return getAccountTransactionsCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieves the coins data for a specified account.\n   *\n   * @param args.accountAddress - The account address for which to retrieve the coin's data.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.offset - Optional. The number of coins to start returning results from.\n   * @param args.options.limit - Optional. The number of results to return.\n   * @param args.options.orderBy - Optional. The order to sort the coins by.\n   * @param args.options.where - Optional. Filter the results by specific criteria.\n   * @returns An array containing the coins data for the specified account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching coins data for a specific account\n   *   const accountCoinsData = await aptos.getAccountCoinsData({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify the number of results to return\n   *       orderBy: { asset_type: \"asc\" }, // specify the order of results\n   *     },\n   *   });\n   *\n   *   console.log(accountCoinsData);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCoinsData(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs &\n      OrderByArg<GetAccountCoinsDataResponse[0]> &\n      WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n  }): Promise<GetAccountCoinsDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getAccountCoinsData({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieves the current count of an account's coins aggregated across all types.\n   *\n   * @param args The parameters for the account coins count query.\n   * @param args.accountAddress The account address we want to get the total count for.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @returns The current count of the aggregated coins for the specified account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the account coins count for a specific account\n   *   const accountCoinsCount = await aptos.getAccountCoinsCount({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(\"Account Coins Count:\", accountCoinsCount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCoinsCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getAccountCoinsCount({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the current amount of APT for a specified account. If the account does not exist, it will return 0.\n   *\n   * @param args The arguments for the account query.\n   * @param args.accountAddress The account address for which to retrieve the APT amount.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @returns The current amount of APT for the specified account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the APT amount for a specific account\n   *   const accountAPTAmount = await aptos.getAccountAPTAmount({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(\"Account APT Amount:\", accountAPTAmount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountAPTAmount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    return this.getAccountCoinAmount({ coinType: APTOS_COIN, faMetadataAddress: APTOS_FA, ...args });\n  }\n\n  /**\n   * Queries the current amount of a specified coin held by an account.\n   *\n   * @param args The parameters for querying the account's coin amount.\n   * @param args.accountAddress The account address to query for the coin amount.\n   * @param args.coinType The coin type to query. Note: If not provided, it may be automatically populated if `faMetadataAddress`\n   * is specified.\n   * @param args.faMetadataAddress The fungible asset metadata address to query. Note: If not provided, it may be automatically\n   * populated if `coinType` is specified.\n   * @param args.minimumLedgerVersion Not used anymore, here for backward compatibility\n   * see https://github.com/aptos-labs/aptos-ts-sdk/pull/519, will be removed in the near future.\n   * Optional ledger version to sync up to before querying.\n   * @returns The current amount of the specified coin held by the account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Query the account's coin amount for a specific coin type\n   *   const accountCoinAmount = await aptos.getAccountCoinAmount({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     coinType: \"0x1::aptos_coin::AptosCoin\" // specify the coin type\n   *   });\n   *\n   *   console.log(`Account coin amount: ${accountCoinAmount}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCoinAmount(args: {\n    accountAddress: AccountAddressInput;\n    coinType?: MoveStructId;\n    faMetadataAddress?: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    const { accountAddress, coinType, faMetadataAddress, minimumLedgerVersion } = args;\n\n    if (minimumLedgerVersion) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `minimumLedgerVersion is not used anymore, here for backward \n        compatibility see https://github.com/aptos-labs/aptos-ts-sdk/pull/519, \n        will be removed in the near future`,\n      );\n    }\n    // Attempt to populate the CoinType field if the FA address is provided.\n    // We cannot do this internally due to dependency cycles issue.\n    let coinAssetType: MoveStructId | undefined = coinType;\n    if (coinType === undefined && faMetadataAddress !== undefined) {\n      coinAssetType = await memoizeAsync(\n        async () => {\n          try {\n            const pairedCoinTypeStruct = (\n              await view({\n                aptosConfig: this.config,\n                payload: { function: \"0x1::coin::paired_coin\", functionArguments: [faMetadataAddress] },\n              })\n            ).at(0) as { vec: MoveValue[] };\n\n            // Check if the Option has a value, and if so, parse the struct\n            if (pairedCoinTypeStruct.vec.length > 0 && isEncodedStruct(pairedCoinTypeStruct.vec[0])) {\n              return parseEncodedStruct(pairedCoinTypeStruct.vec[0]) as MoveStructId;\n            }\n          } catch (error) {\n            /* No paired coin type found */\n          }\n          return undefined;\n        },\n        `coin-mapping-${faMetadataAddress.toString()}`,\n        1000 * 60 * 5, // 5 minutes\n      )();\n    }\n\n    let faAddress: string;\n\n    if (coinType !== undefined && faMetadataAddress !== undefined) {\n      faAddress = AccountAddress.from(faMetadataAddress).toStringLong();\n    } else if (coinType !== undefined && faMetadataAddress === undefined) {\n      // TODO Move to a separate function as defined in the AIP for coin migration\n      if (coinType === APTOS_COIN) {\n        faAddress = AccountAddress.A.toStringLong();\n      } else {\n        faAddress = createObjectAddress(AccountAddress.A, coinType).toStringLong();\n      }\n    } else if (coinType === undefined && faMetadataAddress !== undefined) {\n      const addr = AccountAddress.from(faMetadataAddress);\n      faAddress = addr.toStringLong();\n      if (addr === AccountAddress.A) {\n        coinAssetType = APTOS_COIN;\n      }\n      // The paired CoinType should be populated outside of this function in another\n      // async call. We cannot do this internally due to dependency cycles issue.\n    } else {\n      throw new Error(\"Either coinType, faMetadataAddress, or both must be provided\");\n    }\n\n    // When there is a coin mapping, use that first, otherwise use the fungible asset address\n    // TODO: This function's signature at the top, returns number, but it could be greater than can be represented\n    if (coinAssetType !== undefined) {\n      const [balanceStr] = await view<[string]>({\n        aptosConfig: this.config,\n        payload: {\n          function: \"0x1::coin::balance\",\n          typeArguments: [coinAssetType],\n          functionArguments: [accountAddress],\n        },\n      });\n      return parseInt(balanceStr, 10);\n    }\n    const [balanceStr] = await view<[string]>({\n      aptosConfig: this.config,\n      payload: {\n        function: \"0x1::primary_fungible_store::balance\",\n        typeArguments: [\"0x1::object::ObjectCore\"],\n        functionArguments: [accountAddress, faAddress],\n      },\n    });\n    return parseInt(balanceStr, 10);\n  }\n\n  /**\n   * Queries an account's owned objects.\n   *\n   * @param args.accountAddress The account address we want to get the objects for.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options.offset The starting position to start returning results from.\n   * @param args.options.limit The number of results to return.\n   * @param args.options.orderBy The order to sort the objects by.\n   * @returns Objects array with the object data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the objects owned by the specified account\n   *   const accountOwnedObjects = await aptos.getAccountOwnedObjects({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     minimumLedgerVersion: 1, // optional, specify if needed\n   *     options: {\n   *       offset: 0, // optional, specify if needed\n   *       limit: 10, // optional, specify if needed\n   *       orderBy: \"created_at\", // optional, specify if needed\n   *     },\n   *   });\n   *\n   *   console.log(accountOwnedObjects);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountOwnedObjects(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n  }): Promise<GetObjectDataQueryResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.DEFAULT,\n    });\n    return getAccountOwnedObjects({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Derives an account by providing a private key. This function resolves the provided private key type and derives the public\n   * key from it.\n   *\n   * If the privateKey is a Secp256k1 type, it derives the account using the derived public key and auth key using the SingleKey\n   * scheme locally.\n   * If the privateKey is an ED25519 type, it looks up the authentication key on chain to determine whether it is a Legacy ED25519\n   * key or a Unified ED25519 key, and then derives the account based on that.\n   *\n   * @param args - The arguments for deriving the account.\n   * @param args.privateKey - An account private key.\n   * @returns The derived Account type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Ed25519PrivateKey } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Deriving an account from a private key\n   *     const account = await aptos.deriveAccountFromPrivateKey({\n   *         privateKey: new Ed25519PrivateKey(\"0x123\") // replace with a real private key\n   *     });\n   *\n   *     console.log(account);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   * @deprecated Note that more inspection is needed by the user to determine which account exists on-chain\n   */\n  async deriveAccountFromPrivateKey(args: { privateKey: PrivateKey }): Promise<AccountModule> {\n    return deriveAccountFromPrivateKey({ aptosConfig: this.config, ...args });\n  }\n}\n","import { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddressInput } from \"../core\";\nimport { EntryFunctionABI, InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AnyNumber, MoveStructId } from \"../types\";\nimport { APTOS_COIN } from \"../utils/const\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { TypeTagAddress, TypeTagU64 } from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\nconst coinTransferAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [] }],\n  parameters: [new TypeTagAddress(), new TypeTagU64()],\n};\n\n/**\n * Generates a transaction to transfer coins from one account to another.\n * This function allows you to specify the sender, recipient, amount, and coin type for the transaction.\n *\n * @param args - The parameters for the transaction.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.sender - The address of the account sending the coins.\n * @param args.recipient - The address of the account receiving the coins.\n * @param args.amount - The amount of coins to transfer.\n * @param args.coinType - (Optional) The type of coin to transfer, defaults to Aptos Coin if not specified.\n * @param args.options - (Optional) Options for generating the transaction.\n * @group Implementation\n */\nexport async function transferCoinTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  recipient: AccountAddressInput;\n  amount: AnyNumber;\n  coinType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, recipient, amount, coinType, options } = args;\n  const coinStructType = coinType ?? APTOS_COIN;\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::aptos_account::transfer_coins\",\n      typeArguments: [coinStructType],\n      functionArguments: [recipient, amount],\n      abi: coinTransferAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddressInput } from \"../core\";\nimport { transferCoinTransaction } from \"../internal/coin\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AnyNumber, MoveStructId } from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\n\n/**\n * A class to handle all `Coin` operations.\n * @group Coin\n */\nexport class Coin {\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET });\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Coin\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Generate a transfer coin transaction that can be simulated, signed, and submitted.\n   * This function helps you create a transaction to transfer a specified amount of coins\n   * from one account to another within the Aptos network.\n   *\n   * @param args The arguments for the transfer transaction.\n   * @param args.sender The sender account address.\n   * @param args.recipient The recipient account address.\n   * @param args.amount The amount of coins to transfer.\n   * @param args.coinType Optional. The coin struct type to transfer. Defaults to 0x1::aptos_coin::AptosCoin.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Generate a transfer coin transaction\n   *   const transaction = await aptos.transferCoinTransaction({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     recipient: \"0x2\", // replace with a real recipient account address\n   *     amount: 10,\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Coin\n   */\n  async transferCoinTransaction(args: {\n    sender: AccountAddressInput;\n    recipient: AccountAddressInput;\n    amount: AnyNumber;\n    coinType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferCoinTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/digitalAsset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * digitalAsset namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Bool, MoveString, MoveVector, U64 } from \"../bcs\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { Account } from \"../account\";\nimport { EntryFunctionABI, InputGenerateTransactionOptions } from \"../transactions/types\";\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  MoveAbility,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n  WhereArg,\n} from \"../types\";\nimport {\n  GetCollectionDataQuery,\n  GetCurrentTokenOwnershipQuery,\n  GetTokenActivityQuery,\n  GetTokenDataQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetCollectionData,\n  GetCurrentTokenOwnership,\n  GetTokenActivity,\n  GetTokenData,\n} from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { MAX_U64_BIG_INT } from \"../bcs/consts\";\nimport {\n  CurrentCollectionsV2BoolExp,\n  CurrentTokenOwnershipsV2BoolExp,\n  TokenActivitiesV2BoolExp,\n} from \"../types/generated/types\";\nimport {\n  checkOrConvertArgument,\n  objectStructTag,\n  parseTypeTag,\n  stringStructTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagGeneric,\n  TypeTagStruct,\n  TypeTagU64,\n  TypeTagVector,\n} from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n// A property type map for the user input and what Move expects\nconst PropertyTypeMap = {\n  BOOLEAN: \"bool\",\n  U8: \"u8\",\n  U16: \"u16\",\n  U32: \"u32\",\n  U64: \"u64\",\n  U128: \"u128\",\n  U256: \"u256\",\n  ADDRESS: \"address\",\n  STRING: \"0x1::string::String\",\n  ARRAY: \"vector<u8>\",\n};\n\n/**\n * The keys of the PropertyTypeMap, representing different property types.\n * @group Implementation\n */\nexport type PropertyType = keyof typeof PropertyTypeMap;\n\n/**\n * Accepted property value types for user input, including boolean, number, bigint, string, AccountAddress, and Uint8Array.\n * To pass in an Array, use Uint8Array type\n * for example `new MoveVector([new MoveString(\"hello\"), new MoveString(\"world\")]).bcsToBytes()`\n * @group Implementation\n */\nexport type PropertyValue = boolean | number | bigint | string | AccountAddress | Uint8Array;\n\n// The default digital asset type to use if non provided\nconst defaultDigitalAssetType = \"0x4::token::Token\";\n\n// FETCH QUERIES\n\n/**\n * Retrieves data for a specific digital asset using its address.\n *\n * @param args - The arguments for fetching digital asset data.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.digitalAssetAddress - The address of the digital asset to retrieve data for.\n * @returns The data of the specified digital asset.\n * @group Implementation\n */\nexport async function getDigitalAssetData(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetTokenDataResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: { token_data_id: { _eq: string } } = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetData\",\n  });\n\n  return data.current_token_datas_v2[0];\n}\n\n/**\n * Retrieves the current ownership details of a specified digital asset.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.digitalAssetAddress - The address of the digital asset to query ownership for.\n * @returns The current ownership details of the specified digital asset.\n * @group Implementation\n */\nexport async function getCurrentDigitalAssetOwnership(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetCurrentTokenOwnershipResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentDigitalAssetOwnership\",\n  });\n\n  return data.current_token_ownerships_v2[0];\n}\n\n/**\n * Retrieves the digital assets owned by a specified account address.\n *\n * @param args - The arguments for retrieving owned digital assets.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.ownerAddress - The address of the account whose owned digital assets are being queried.\n * @param args.options - Optional pagination and ordering parameters for the query.\n * @param args.options.offset - The number of records to skip for pagination.\n * @param args.options.limit - The maximum number of records to return.\n * @param args.options.orderBy - The criteria for ordering the results.\n *\n * @returns An array of digital assets currently owned by the specified account.\n * @group Implementation\n */\nexport async function getOwnedDigitalAssets(args: {\n  aptosConfig: AptosConfig;\n  ownerAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetOwnedTokensResponse> {\n  const { aptosConfig, ownerAddress, options } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    owner_address: { _eq: AccountAddress.from(ownerAddress).toStringLong() },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getOwnedDigitalAssets\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\n/**\n * Retrieves the activity associated with a specific digital asset.\n * This function allows you to track the token activities for a given digital asset address.\n *\n * @param args - The arguments for retrieving digital asset activity.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.digitalAssetAddress - The address of the digital asset to query.\n * @param args.options - Optional parameters for pagination and ordering.\n * @param args.options.offset - The number of records to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of records to return.\n * @param args.options.orderBy - The criteria to order the results by.\n * @returns A promise that resolves to an array of token activities for the specified digital asset.\n * @group Implementation\n */\nexport async function getDigitalAssetActivity(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetTokenActivityResponse> {\n  const { aptosConfig, digitalAssetAddress, options } = args;\n\n  const whereCondition: TokenActivitiesV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenActivity,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenActivityQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetActivity\",\n  });\n\n  return data.token_activities_v2;\n}\n\n/**\n * Options for creating a collection, allowing customization of various attributes such as supply limits, mutability of metadata,\n * and royalty settings.\n *\n * @param maxSupply - Maximum number of tokens that can be minted in the collection.\n * @param mutableDescription - Indicates if the collection description can be changed after creation.\n * @param mutableRoyalty - Indicates if the royalty settings can be modified after creation.\n * @param mutableURI - Indicates if the collection URI can be updated.\n * @param mutableTokenDescription - Indicates if individual token descriptions can be modified.\n * @param mutableTokenName - Indicates if individual token names can be changed.\n * @param mutableTokenProperties - Indicates if individual token properties can be altered.\n * @param mutableTokenURI - Indicates if individual token URIs can be updated.\n * @param tokensBurnableByCreator - Indicates if the creator can burn tokens from the collection.\n * @param tokensFreezableByCreator - Indicates if the creator can freeze tokens in the collection.\n * @param royaltyNumerator - The numerator for calculating royalties.\n * @param royaltyDenominator - The denominator for calculating royalties.\n * @group Implementation\n */\nexport interface CreateCollectionOptions {\n  maxSupply?: AnyNumber;\n  mutableDescription?: boolean;\n  mutableRoyalty?: boolean;\n  mutableURI?: boolean;\n  mutableTokenDescription?: boolean;\n  mutableTokenName?: boolean;\n  mutableTokenProperties?: boolean;\n  mutableTokenURI?: boolean;\n  tokensBurnableByCreator?: boolean;\n  tokensFreezableByCreator?: boolean;\n  royaltyNumerator?: number;\n  royaltyDenominator?: number;\n}\n\nconst createCollectionAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagU64(),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagU64(),\n    new TypeTagU64(),\n  ],\n};\n\n/**\n * Creates a new collection transaction on the Aptos blockchain.\n * This function allows you to define the properties of the collection, including its name, description, and URI.\n *\n * @param args - The parameters for creating the collection transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that will create the collection.\n * @param args.description - A description of the collection.\n * @param args.name - The name of the collection.\n * @param args.uri - The URI associated with the collection.\n * @param args.options - Optional parameters for generating the transaction.\n * @param args.maxSupply - The maximum supply of tokens in the collection (optional).\n * @param args.mutableDescription - Indicates if the collection description can be changed (optional, defaults to true).\n * @param args.mutableRoyalty - Indicates if the royalty settings can be changed (optional, defaults to true).\n * @param args.mutableURI - Indicates if the URI can be changed (optional, defaults to true).\n * @param args.mutableTokenDescription - Indicates if the token description can be changed (optional, defaults to true).\n * @param args.mutableTokenName - Indicates if the token name can be changed (optional, defaults to true).\n * @param args.mutableTokenProperties - Indicates if the token properties can be changed (optional, defaults to true).\n * @param args.mutableTokenURI - Indicates if the token URI can be changed (optional, defaults to true).\n * @param args.tokensBurnableByCreator - Indicates if tokens can be burned by the creator (optional, defaults to true).\n * @param args.tokensFreezableByCreator - Indicates if tokens can be frozen by the creator (optional, defaults to true).\n * @param args.royaltyNumerator - The numerator for calculating royalties (optional, defaults to 0).\n * @param args.royaltyDenominator - The denominator for calculating royalties (optional, defaults to 1).\n * @group Implementation\n */\nexport async function createCollectionTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n    creator: Account;\n    description: string;\n    name: string;\n    uri: string;\n    options?: InputGenerateTransactionOptions;\n  } & CreateCollectionOptions,\n): Promise<SimpleTransaction> {\n  const { aptosConfig, options, creator } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::create_collection\",\n      functionArguments: [\n        // Do not change the order\n        new MoveString(args.description),\n        new U64(args.maxSupply ?? MAX_U64_BIG_INT),\n        new MoveString(args.name),\n        new MoveString(args.uri),\n        new Bool(args.mutableDescription ?? true),\n        new Bool(args.mutableRoyalty ?? true),\n        new Bool(args.mutableURI ?? true),\n        new Bool(args.mutableTokenDescription ?? true),\n        new Bool(args.mutableTokenName ?? true),\n        new Bool(args.mutableTokenProperties ?? true),\n        new Bool(args.mutableTokenURI ?? true),\n        new Bool(args.tokensBurnableByCreator ?? true),\n        new Bool(args.tokensFreezableByCreator ?? true),\n        new U64(args.royaltyNumerator ?? 0),\n        new U64(args.royaltyDenominator ?? 1),\n      ],\n      abi: createCollectionAbi,\n    },\n    options,\n  });\n}\n\n/**\n * Retrieves data for the current collections based on specified options.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for filtering and pagination.\n * @param args.options.tokenStandard - The token standard to filter the collections (default is \"v2\").\n * @param args.options.offset - The offset for pagination.\n * @param args.options.limit - The limit for pagination.\n * @param args.options.where - The conditions to filter the collections.\n * @returns The data of the current collections.\n * @group Implementation\n */\nexport async function getCollectionData(args: {\n  aptosConfig: AptosConfig;\n  options?: TokenStandardArg & PaginationArgs & WhereArg<CurrentCollectionsV2BoolExp>;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, options } = args;\n\n  const whereCondition: any = options?.where;\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  const graphqlQuery = {\n    query: GetCollectionData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n    },\n  };\n  const data = await queryIndexer<GetCollectionDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCollectionData\",\n  });\n\n  return data.current_collections_v2[0];\n}\n\n/**\n * Retrieves collection data based on the creator's address and the collection name.\n *\n * @param args - The arguments for retrieving the collection data.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.creatorAddress - The address of the creator whose collection data is being retrieved.\n * @param args.collectionName - The name of the collection to fetch data for.\n * @param args.options - Optional parameters for filtering the results, including token standard and pagination options.\n * @param args.options.tokenStandard - The token standard to filter the results by (optional).\n * @param args.options.pagination - Pagination options for the results (optional).\n * @group Implementation\n */\nexport async function getCollectionDataByCreatorAddressAndCollectionName(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg & PaginationArgs;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, creatorAddress, collectionName, options } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    collection_name: { _eq: collectionName },\n    creator_address: { _eq: address.toStringLong() },\n  };\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return getCollectionData({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves collection data associated with a specific creator's address.\n * This function allows you to filter the collections based on the creator's address and optional token standards.\n *\n * @param args - The arguments for retrieving collection data.\n * @param args.aptosConfig - The configuration for the Aptos network.\n * @param args.creatorAddress - The address of the creator whose collection data is being retrieved.\n * @param args.options - Optional parameters for filtering the results.\n * @param args.options.tokenStandard - The token standard to filter the collections by.\n * @param args.options.pagination - Pagination options for the results.\n * @group Implementation\n */\nexport async function getCollectionDataByCreatorAddress(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, creatorAddress, options } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    creator_address: { _eq: address.toStringLong() },\n  };\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return getCollectionData({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves data for a specific collection using its unique identifier.\n * This function allows you to filter the collection data based on the token standard and pagination options.\n *\n * @param args - The arguments for retrieving collection data.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.collectionId - The unique identifier for the collection.\n * @param args.options - Optional parameters for filtering by token standard and pagination.\n * @param args.options.tokenStandard - The standard of the token to filter the collection data.\n * @param args.options.page - The page number for pagination.\n * @param args.options.limit - The number of items per page for pagination.\n * @group Implementation\n */\nexport async function getCollectionDataByCollectionId(args: {\n  aptosConfig: AptosConfig;\n  collectionId: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, collectionId, options } = args;\n  const address = AccountAddress.from(collectionId);\n\n  const whereCondition: any = {\n    collection_id: { _eq: address.toStringLong() },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return getCollectionData({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves the collection ID based on the creator's address and the collection name.\n * This function helps in identifying a specific collection within the Aptos ecosystem.\n *\n * @param args - The parameters for retrieving the collection ID.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creatorAddress - The address of the creator of the collection.\n * @param args.collectionName - The name of the collection to look up.\n * @param args.options - Optional parameters for additional filtering.\n * @param args.options.tokenStandard - The token standard to filter the collection (default is \"v2\").\n * @returns The ID of the specified collection.\n * @group Implementation\n */\nexport async function getCollectionId(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg;\n}): Promise<string> {\n  const { creatorAddress, collectionName, options, aptosConfig } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    collection_name: { _eq: collectionName },\n    creator_address: { _eq: address.toStringLong() },\n  };\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return (await getCollectionData({ aptosConfig, options: { where: whereCondition } })).collection_id;\n}\n\n// TRANSACTIONS\n\nconst mintDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(TypeTagVector.u8()),\n  ],\n};\n\n/**\n * Creates a transaction to mint a digital asset on the Aptos blockchain.\n * This function allows you to specify various attributes of the asset, including its collection, description, name, and URI.\n *\n * @param args - The arguments for minting the digital asset.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that will create the digital asset.\n * @param args.collection - The name of the collection to which the asset belongs.\n * @param args.description - A brief description of the digital asset.\n * @param args.name - The name of the digital asset.\n * @param args.uri - The URI pointing to the asset's metadata.\n * @param [args.propertyKeys] - Optional array of property keys associated with the asset.\n * @param [args.propertyTypes] - Optional array of property types corresponding to the asset's properties.\n * @param [args.propertyValues] - Optional array of property values for the asset's properties.\n * @param [args.options] - Optional transaction generation options.\n * @group Implementation\n */\nexport async function mintDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    options,\n    creator,\n    collection,\n    description,\n    name,\n    uri,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n  } = args;\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint\",\n      functionArguments: [\n        new MoveString(collection),\n        new MoveString(description),\n        new MoveString(name),\n        new MoveString(uri),\n        MoveVector.MoveString(propertyKeys ?? []),\n        MoveVector.MoveString(convertedPropertyType ?? []),\n\n        /**\n         * Retrieves the raw values of specified properties from an array of property values based on their types.\n         *\n         * @param propertyValues - An array of property values from which to extract the raw data.\n         * @param propertyTypes - An array of strings representing the types of properties to retrieve.\n         * @returns An array of Uint8Array containing the raw values for the specified property types.\n         * @group Implementation\n         */\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n      ],\n      abi: mintDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst transferDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagAddress()],\n};\n\n/**\n * Initiates a transaction to transfer a digital asset from one account to another.\n * This function helps in executing the transfer of digital assets securely and efficiently.\n *\n * @param args - The arguments required to perform the transfer.\n * @param args.aptosConfig - Configuration settings for the Aptos client.\n * @param args.sender - The account initiating the transfer.\n * @param args.digitalAssetAddress - The address of the digital asset being transferred.\n * @param args.recipient - The address of the account receiving the digital asset.\n * @param args.digitalAssetType - (Optional) The type of the digital asset being transferred.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function transferDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  digitalAssetAddress: AccountAddressInput;\n  recipient: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, digitalAssetAddress, recipient, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::object::transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), AccountAddress.from(recipient)],\n      abi: transferDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst mintSoulBoundAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(TypeTagVector.u8()),\n    new TypeTagAddress(),\n  ],\n};\n\n/**\n * Creates a transaction to mint a soul-bound token.\n * This function allows you to specify the token's attributes and recipient, facilitating the creation of unique digital assets.\n *\n * @param args - The parameters required to mint the soul-bound token.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.account - The account initiating the minting transaction.\n * @param args.collection - The name of the collection to which the token belongs.\n * @param args.description - A description of the token being minted.\n * @param args.name - The name of the token.\n * @param args.uri - The URI pointing to the token's metadata.\n * @param args.recipient - The address of the account that will receive the minted token.\n * @param [args.propertyKeys] - Optional array of property keys associated with the token.\n * @param [args.propertyTypes] - Optional array of property types corresponding to the property keys.\n * @param [args.propertyValues] - Optional array of property values that match the property keys and types.\n * @param [args.options] - Optional transaction generation options.\n * @throws Error if the counts of property keys, property types, and property values do not match.\n * @group Implementation\n */\nexport async function mintSoulBoundTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  recipient: AccountAddressInput;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    account,\n    collection,\n    description,\n    name,\n    uri,\n    recipient,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n    options,\n  } = args;\n  if (propertyKeys?.length !== propertyValues?.length) {\n    throw new Error(\"Property keys and property values counts do not match\");\n  }\n  if (propertyTypes?.length !== propertyValues?.length) {\n    throw new Error(\"Property types and property values counts do not match\");\n  }\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  return generateTransaction({\n    aptosConfig,\n    sender: account.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint_soul_bound\",\n      functionArguments: [\n        collection,\n        description,\n        name,\n        uri,\n        MoveVector.MoveString(propertyKeys ?? []),\n        MoveVector.MoveString(convertedPropertyType ?? []),\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n        recipient,\n      ],\n      abi: mintSoulBoundAbi,\n    },\n    options,\n  });\n}\n\nconst burnDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\n/**\n * Creates a transaction to burn a specified digital asset.\n * This function allows users to permanently remove a digital asset from their account.\n *\n * @param args - The arguments for the transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that is initiating the burn transaction.\n * @param args.digitalAssetAddress - The address of the digital asset to be burned.\n * @param args.digitalAssetType - Optional; the type of the digital asset being burned.\n * @param args.options - Optional; additional options for generating the transaction.\n * @group Implementation\n */\nexport async function burnDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::burn\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress)],\n      abi: burnDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst freezeDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\n/**\n * Creates a transaction to freeze the transfer of a digital asset.\n * This function helps you prevent the transfer of a specified digital asset by generating the appropriate transaction.\n *\n * @param args - The parameters for the transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.creator - The account that is creating the transaction.\n * @param args.digitalAssetAddress - The address of the digital asset to be frozen.\n * @param args.digitalAssetType - (Optional) The type of the digital asset as a Move struct ID.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function freezeDigitalAssetTransferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::freeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n      abi: freezeDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst unfreezeDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\n/**\n * Unfreezes a digital asset transfer transaction, allowing the transfer of the specified digital asset.\n *\n * @param args - The arguments for unfreezing the digital asset transfer transaction.\n * @param args.aptosConfig - The Aptos configuration settings.\n * @param args.creator - The account that is initiating the unfreeze transaction.\n * @param args.digitalAssetAddress - The address of the digital asset to be unfrozen.\n * @param args.digitalAssetType - (Optional) The type of the digital asset being unfrozen.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function unfreezeDigitalAssetTransferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::unfreeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n      abi: unfreezeDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetDescriptionAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Sets the description for a digital asset, allowing users to provide additional context or information about the asset.\n *\n * @param args - The arguments for setting the digital asset description.\n * @param args.aptosConfig - The Aptos configuration to use for the transaction.\n * @param args.creator - The account that is creating the transaction.\n * @param args.description - The new description for the digital asset.\n * @param args.digitalAssetAddress - The address of the digital asset whose description is being set.\n * @param args.digitalAssetType - (Optional) The type of the digital asset.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function setDigitalAssetDescriptionTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  description: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, description, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_description\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(description)],\n      abi: setDigitalAssetDescriptionAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetNameAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Sets the name of a digital asset on the Aptos blockchain.\n * This function allows you to update the name of a specified digital asset, enabling better identification and categorization.\n *\n * @param args - The parameters for setting the digital asset name.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that is creating the transaction.\n * @param args.name - The new name to assign to the digital asset.\n * @param args.digitalAssetAddress - The address of the digital asset to update.\n * @param args.digitalAssetType - (Optional) The type of the digital asset, represented as a Move struct ID.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function setDigitalAssetNameTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  name: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, name, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_name\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(name)],\n      abi: setDigitalAssetNameAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetURIAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Sets the URI for a digital asset, allowing you to update the metadata associated with it.\n *\n * @param args - The arguments for setting the digital asset URI.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.uri - The new URI to be set for the digital asset.\n * @param args.digitalAssetAddress - The address of the digital asset whose URI is being set.\n * @param args.digitalAssetType - The optional type of the digital asset; defaults to a predefined type if not provided.\n * @param args.options - Optional settings for generating the transaction.\n * @group Implementation\n */\nexport async function setDigitalAssetURITransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  uri: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, uri, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_uri\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(uri)],\n      abi: setDigitalAssetURIAbi,\n    },\n    options,\n  });\n}\n\nconst addDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    TypeTagVector.u8(),\n  ],\n};\n\n/**\n * Creates a transaction to add a property to a digital asset.\n * This function helps in enhancing the metadata associated with a digital asset by allowing the addition of custom properties.\n *\n * @param args - The arguments for the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key for the property being added.\n * @param args.propertyType - The type of the property being added.\n * @param args.propertyValue - The value of the property being added.\n * @param args.digitalAssetAddress - The address of the digital asset to which the property is being added.\n * @param args.digitalAssetType - The optional type of the digital asset.\n * @param args.options - Optional transaction generation options.\n * @group Implementation\n */\nexport async function addDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        AccountAddress.from(digitalAssetAddress),\n        new MoveString(propertyKey),\n        new MoveString(PropertyTypeMap[propertyType]),\n        MoveVector.U8(getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType])),\n      ],\n      abi: addDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst removeDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Removes a property from a digital asset on the Aptos blockchain.\n * This function helps in managing the attributes of digital assets by allowing the removal of specific properties.\n *\n * @param args - The arguments for the transaction.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key of the property to be removed.\n * @param args.digitalAssetAddress - The address of the digital asset from which the property will be removed.\n * @param args.digitalAssetType - The type of the digital asset (optional).\n * @param args.options - Additional options for generating the transaction (optional).\n * @group Implementation\n */\nexport async function removeDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, propertyKey, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::remove_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey)],\n      abi: removeDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst updateDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    TypeTagVector.u8(),\n  ],\n};\n\n/**\n * Updates a property of a digital asset by generating a transaction for the Aptos blockchain.\n * This function allows you to modify attributes of a digital asset, facilitating dynamic changes to its properties.\n *\n * @param args - The arguments for updating the digital asset property.\n * @param args.aptosConfig - The configuration settings for the Aptos blockchain.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key of the property to be updated.\n * @param args.propertyType - The type of the property being updated.\n * @param args.propertyValue - The new value for the property.\n * @param args.digitalAssetAddress - The address of the digital asset to update.\n * @param args.digitalAssetType - (Optional) The type of the digital asset.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function updateDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        AccountAddress.from(digitalAssetAddress),\n        new MoveString(propertyKey),\n        new MoveString(PropertyTypeMap[propertyType]),\n\n        /**\n         * Retrieves the raw byte representation of a single property value based on its type.\n         *\n         * @param propertyValue - The value of the property to convert.\n         * @param propertyType - The type of the property, which determines how the value is processed.\n         * @returns The raw byte representation of the property value.\n         * @group Implementation\n         */\n        getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType]),\n      ],\n      abi: updateDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst addDigitalAssetTypedPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }, { constraints: [] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagGeneric(1),\n  ],\n};\n\n/**\n * Creates a transaction to add a typed property to a digital asset.\n * This function helps in customizing digital assets by associating them with specific properties.\n *\n * @param args - The arguments required to create the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key for the property being added.\n * @param args.propertyType - The type of the property being added.\n * @param args.propertyValue - The value of the property being added.\n * @param args.digitalAssetAddress - The address of the digital asset to which the property is being added.\n * @param args.digitalAssetType - (Optional) The type of the digital asset.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function addDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey), propertyValue],\n      abi: addDigitalAssetTypedPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst updateDigitalAssetTypedPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }, { constraints: [] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagGeneric(1),\n  ],\n};\n\n/**\n * Updates the typed property of a digital asset by generating a transaction for the Aptos blockchain.\n *\n * @param args - The arguments for updating the digital asset typed property.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key of the property to be updated.\n * @param args.propertyType - The type of the property being updated.\n * @param args.propertyValue - The new value for the property.\n * @param args.digitalAssetAddress - The address of the digital asset to be updated.\n * @param args.digitalAssetType - Optional. The type of the digital asset, if not provided, defaults to the standard type.\n * @param args.options - Optional. Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function updateDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey), propertyValue],\n      abi: updateDigitalAssetTypedPropertyAbi,\n    },\n    options,\n  });\n}\n\nfunction getPropertyValueRaw(propertyValues: Array<PropertyValue>, propertyTypes: Array<string>): Array<Uint8Array> {\n  const results = new Array<Uint8Array>();\n  propertyTypes.forEach((typ, index) => {\n    results.push(getSinglePropertyValueRaw(propertyValues[index], typ));\n  });\n\n  return results;\n}\n\nfunction getSinglePropertyValueRaw(propertyValue: PropertyValue, propertyType: string): Uint8Array {\n  const typeTag = parseTypeTag(propertyType);\n  const res = checkOrConvertArgument(propertyValue, typeTag, 0, []);\n  return res.bcsToBytes();\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n} from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { Account } from \"../account\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport {\n  addDigitalAssetPropertyTransaction,\n  addDigitalAssetTypedPropertyTransaction,\n  burnDigitalAssetTransaction,\n  CreateCollectionOptions,\n  createCollectionTransaction,\n  freezeDigitalAssetTransferTransaction,\n  getCollectionData,\n  getCollectionDataByCollectionId,\n  getCollectionDataByCreatorAddress,\n  getCollectionDataByCreatorAddressAndCollectionName,\n  getCollectionId,\n  getCurrentDigitalAssetOwnership,\n  getDigitalAssetActivity,\n  getDigitalAssetData,\n  getOwnedDigitalAssets,\n  mintDigitalAssetTransaction,\n  mintSoulBoundTransaction,\n  PropertyType,\n  PropertyValue,\n  removeDigitalAssetPropertyTransaction,\n  setDigitalAssetDescriptionTransaction,\n  setDigitalAssetNameTransaction,\n  setDigitalAssetURITransaction,\n  transferDigitalAssetTransaction,\n  unfreezeDigitalAssetTransferTransaction,\n  updateDigitalAssetPropertyTransaction,\n  updateDigitalAssetTypedPropertyTransaction,\n} from \"../internal/digitalAsset\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * A class to query all `DigitalAsset` related queries on Aptos.\n * @group DigitalAsset\n */\nexport class DigitalAsset {\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your desired network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   * This function is deprecated; use `getCollectionDataByCreatorAddressAndCollectionName` instead.\n   *\n   * If a creator account has two collections with the same name in v1 and v2, you can pass an optional `tokenStandard` parameter\n   * to query a specific standard.\n   *\n   * @param args - The arguments for querying the collection data.\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.collectionName - The name of the collection.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional parameters for the query.\n   * @param args.options.tokenStandard - The token standard to query.\n   * @returns GetCollectionDataResponse - The response type containing the collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Querying collection data by creator address and collection name\n   *   const collection = await aptos.getCollectionData({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     collectionName: \"myCollection\", // specify your collection name\n   *   });\n   *\n   *   console.log(collection);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionData(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n\n    const { creatorAddress, collectionName, options } = args;\n    const address = AccountAddress.from(creatorAddress);\n\n    const whereCondition: any = {\n      collection_name: { _eq: collectionName },\n      creator_address: { _eq: address.toStringLong() },\n    };\n    if (options?.tokenStandard) {\n      whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n    }\n\n    return getCollectionData({ aptosConfig: this.config, options: { where: whereCondition } });\n  }\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   * If a creator account has multiple collections with the same name across different versions,\n   * specify the `tokenStandard` parameter to query a specific standard.\n   *\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.collectionName - The name of the collection.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - Optional token standard to query.\n   * @returns GetCollectionDataResponse - The response type containing collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching collection data by creator address and collection name\n   *   const collection = await aptos.getCollectionDataByCreatorAddressAndCollectionName({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     collectionName: \"myCollection\",\n   *     minimumLedgerVersion: 1, // optional, specify if needed\n   *     options: { tokenStandard: \"v2\" } // optional, specify if needed\n   *   });\n   *\n   *   console.log(collection);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionDataByCreatorAddressAndCollectionName(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n\n    return getCollectionDataByCreatorAddressAndCollectionName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves data for a specific collection created by a given creator address.\n   * This function allows you to query collection data while optionally specifying a minimum ledger version and pagination options.\n   *\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - Optional token standard to query.\n   * @param args.options.pagination - Optional pagination arguments.\n   * @returns GetCollectionDataResponse - The response type containing collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve collection data by creator address\n   *   const collectionData = await aptos.getCollectionDataByCreatorAddress({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     minimumLedgerVersion: 1, // specify the minimum ledger version if needed\n   *     options: {\n   *       tokenStandard: \"v2\", // specify the token standard if needed\n   *       pagination: { limit: 10, offset: 0 } // specify pagination options if needed\n   *     }\n   *   });\n   *\n   *   console.log(collectionData);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionDataByCreatorAddress(args: {\n    creatorAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n\n    return getCollectionDataByCreatorAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries data of a specific collection by the collection ID.\n   *\n   * @param args.collectionId - The ID of the collection, which is the same as the address of the collection object.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional parameters for token standard and pagination.\n   * @returns GetCollectionDataResponse - The response type containing the collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching collection data by collection ID\n   *   const collection = await aptos.getCollectionDataByCollectionId({\n   *     collectionId: \"0x123\", // replace with a real collection ID\n   *   });\n   *\n   *   console.log(collection);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionDataByCollectionId(args: {\n    collectionId: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCollectionDataByCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the ID of a specified collection.\n   * This ID corresponds to the collection's object address in V2, while V1 does not utilize objects and lacks an address.\n   *\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.collectionName - The name of the collection.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - The token standard to query.\n   * @returns The collection ID.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the collection ID for a specific creator and collection name\n   *   const collectionId = await aptos.getCollectionId({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     collectionName: \"myCollection\"\n   *   });\n   *\n   *   console.log(\"Collection ID:\", collectionId);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionId(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg;\n  }): Promise<string> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves digital asset data using the address of a digital asset.\n   *\n   * @param args - The parameters for the request.\n   * @param args.digitalAssetAddress - The address of the digital asset.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns GetTokenDataResponse containing relevant data for the digital asset.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching digital asset data for a specific address\n   *   const digitalAsset = await aptos.getDigitalAssetData({\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(digitalAsset);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getDigitalAssetData(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetTokenDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getDigitalAssetData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the current ownership data of a specified digital asset using its address.\n   *\n   * @param args The parameters for the request.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   *\n   * @returns GetCurrentTokenOwnershipResponse containing relevant ownership data of the digital asset.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the current ownership of a digital asset\n   *   const digitalAssetOwner = await aptos.getCurrentDigitalAssetOwnership({\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(digitalAssetOwner);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCurrentDigitalAssetOwnership(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetCurrentTokenOwnershipResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCurrentDigitalAssetOwnership({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the digital assets owned by a specified address.\n   *\n   * @param args.ownerAddress The address of the owner.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional pagination and ordering parameters for the response.\n   *\n   * @returns GetOwnedTokensResponse containing ownership data of the digital assets belonging to the ownerAddress.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the digital assets owned by the specified address\n   *   const digitalAssets = await aptos.getOwnedDigitalAssets({\n   *     ownerAddress: \"0x1\", // replace with a real account address\n   *   });\n   *\n   *   console.log(digitalAssets);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getOwnedDigitalAssets(args: {\n    ownerAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetOwnedTokensResponse[0]>;\n  }): Promise<GetOwnedTokensResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getOwnedDigitalAssets({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the activity data for a specified digital asset using its address.\n   *\n   * @param args - The parameters for the request.\n   * @param args.digitalAssetAddress - The address of the digital asset.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to sync up to before querying.\n   * @param args.options - Optional pagination and ordering parameters.\n   *\n   * @returns A promise that resolves to the activity data related to the digital asset.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the activity data for a digital asset\n   *   const digitalAssetActivity = await aptos.getDigitalAssetActivity({\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(digitalAssetActivity);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getDigitalAssetActivity(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n  }): Promise<GetTokenActivityResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getDigitalAssetActivity({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Creates a new collection within the specified account.\n   *\n   * @param args.creator - The account of the collection's creator.\n   * @param args.description - The description of the collection.\n   * @param args.name - The name of the collection.\n   * @param args.uri - The URI to additional info about the collection.\n   * @param args.options - Optional parameters for generating the transaction.\n   *\n   * The parameters below are optional:\n   * @param args.maxSupply - Controls the max supply of the digital assets. Defaults to MAX_U64_BIG_INT.\n   * @param args.mutableDescription - Controls mutability of the collection's description. Defaults to true.\n   * @param args.mutableRoyalty - Controls mutability of the collection's royalty. Defaults to true.\n   * @param args.mutableUri - Controls mutability of the collection's URI. Defaults to true.\n   * @param args.mutableTokenDescription - Controls mutability of the digital asset's description. Defaults to true.\n   * @param args.mutableTokenName - Controls mutability of the digital asset's name. Defaults to true.\n   * @param args.mutableTokenProperties - Controls mutability of digital asset's properties. Defaults to true.\n   * @param args.mutableTokenUri - Controls mutability of the digital asset's URI. Defaults to true.\n   * @param args.tokensBurnableByCreator - Controls whether digital assets can be burnable by the creator. Defaults to true.\n   * @param args.tokensFreezableByCreator - Controls whether digital assets can be frozen by the creator. Defaults to true.\n   * @param args.royaltyNumerator - The numerator of the royalty to be paid to the creator when a digital asset is transferred.\n   * Defaults to 0.\n   * @param args.royaltyDenominator - The denominator of the royalty to be paid to the creator when a digital asset is\n   * transferred. Defaults to 1.\n   *\n   * @returns A SimpleTransaction that when submitted will create the collection.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Creating a new collection transaction\n   *   const transaction = await aptos.createCollectionTransaction({\n   *     creator: Account.generate(), // Replace with a real account\n   *     description: \"A unique collection of digital assets.\",\n   *     name: \"My Digital Collection\",\n   *     uri: \"https://mycollection.com\",\n   *   });\n   *\n   *   console.log(\"Transaction created:\", transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async createCollectionTransaction(\n    args: {\n      creator: Account;\n      description: string;\n      name: string;\n      uri: string;\n      options?: InputGenerateTransactionOptions;\n    } & CreateCollectionOptions,\n  ): Promise<SimpleTransaction> {\n    return createCollectionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Create a transaction to mint a digital asset into the creator's account within an existing collection.\n   * This function helps you generate a transaction that can be simulated or submitted to the blockchain for minting a digital asset.\n   *\n   * @param args.creator - The creator of the collection.\n   * @param args.collection - The name of the collection the digital asset belongs to.\n   * @param args.description - The description of the digital asset.\n   * @param args.name - The name of the digital asset.\n   * @param args.uri - The URI to additional info about the digital asset.\n   * @param args.propertyKeys - Optional array of property keys for the digital asset.\n   * @param args.propertyTypes - Optional array of property types for the digital asset.\n   * @param args.propertyValues - Optional array of property values for the digital asset.\n   * @param args.options - Optional transaction generation options.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Creating a transaction to mint a digital asset\n   *   const transaction = await aptos.mintDigitalAssetTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     collection: \"MyCollection\",\n   *     description: \"This is a digital asset.\",\n   *     name: \"MyDigitalAsset\",\n   *     uri: \"https://example.com/my-digital-asset\",\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async mintDigitalAssetTransaction(args: {\n    creator: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    propertyKeys?: Array<string>;\n    propertyTypes?: Array<PropertyType>;\n    propertyValues?: Array<PropertyValue>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return mintDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Transfer ownership of a non-fungible digital asset.\n   * This function allows you to transfer a digital asset only if it is not frozen, meaning the ownership transfer is not disabled.\n   *\n   * @param args The arguments for transferring the digital asset.\n   * @param args.sender The sender account of the current digital asset owner.\n   * @param args.digitalAssetAddress The address of the digital asset being transferred.\n   * @param args.recipient The account address of the recipient.\n   * @param args.digitalAssetType Optional. The type of the digital asset, defaults to \"0x4::token::Token\".\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Transfer a digital asset\n   *   const transaction = await aptos.transferDigitalAssetTransaction({\n   *     sender: Account.generate(), // replace with a real sender account\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *     recipient: \"0x456\", // replace with a real recipient account address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async transferDigitalAssetTransaction(args: {\n    sender: Account;\n    digitalAssetAddress: AccountAddressInput;\n    recipient: AccountAddress;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Mint a soul bound digital asset into a recipient's account.\n   * This function allows you to create a unique digital asset that is bound to a specific account.\n   *\n   * @param args - The arguments for minting the soul bound transaction.\n   * @param args.account - The account that mints the digital asset.\n   * @param args.collection - The collection name that the digital asset belongs to.\n   * @param args.description - The digital asset description.\n   * @param args.name - The digital asset name.\n   * @param args.uri - The digital asset URL.\n   * @param args.recipient - The account address where the digital asset will be created.\n   * @param args.propertyKeys - The property keys for storing on-chain properties.\n   * @param args.propertyTypes - The type of property values.\n   * @param args.propertyValues - The property values to be stored on-chain.\n   * @param args.options - Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Mint a soul bound digital asset\n   *   const transaction = await aptos.mintSoulBoundTransaction({\n   *     account: Account.generate(), // Replace with a real account\n   *     collection: \"collectionName\",\n   *     description: \"collectionDescription\",\n   *     name: \"digitalAssetName\",\n   *     uri: \"digital-asset-uri.com\",\n   *     recipient: \"0x123\" // Replace with a real recipient account address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async mintSoulBoundTransaction(args: {\n    account: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    recipient: AccountAddressInput;\n    propertyKeys?: Array<string>;\n    propertyTypes?: Array<PropertyType>;\n    propertyValues?: Array<PropertyValue>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return mintSoulBoundTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Burn a digital asset by its creator, allowing for the removal of a specified digital asset from the blockchain.\n   *\n   * @param args The arguments for burning the digital asset.\n   * @param args.creator The creator account that is burning the digital asset.\n   * @param args.digitalAssetAddress The address of the digital asset to be burned.\n   * @param args.digitalAssetType Optional. The type of the digital asset being burned.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const creator = Account.generate(); // Replace with a real creator account\n   *   const transaction = await aptos.burnDigitalAssetTransaction({\n   *     creator: creator,\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async burnDigitalAssetTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return burnDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Freeze the ability to transfer a specified digital asset.\n   * This function allows the creator to restrict the transfer capability of a digital asset.\n   *\n   * @param args The arguments for freezing the digital asset transfer.\n   * @param args.creator The creator account initiating the freeze.\n   * @param args.digitalAssetAddress The address of the digital asset to be frozen.\n   * @param args.digitalAssetType Optional. The type of the digital asset being frozen.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Freeze the digital asset transfer\n   *   const transaction = await aptos.freezeDigitalAssetTransaferTransaction({\n   *     creator: Account.generate(), // Replace with a real account if needed\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async freezeDigitalAssetTransaferTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return freezeDigitalAssetTransferTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Unfreeze the ability to transfer a digital asset.\n   * This function allows the specified creator account to unfreeze the transfer of a digital asset identified by its address.\n   *\n   * @param args The parameters for unfreezing the digital asset transfer.\n   * @param args.creator The creator account that is unfreezing the digital asset transfer.\n   * @param args.digitalAssetAddress The address of the digital asset to unfreeze.\n   * @param args.digitalAssetType Optional. The type of the digital asset being unfrozen.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Unfreeze the ability to transfer a digital asset\n   *   const transaction = await aptos.unfreezeDigitalAssetTransaferTransaction({\n   *     creator: Account.generate(), // replace with a real creator account\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  // TODO: Rename Transafer to Transfer\n  async unfreezeDigitalAssetTransaferTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return unfreezeDigitalAssetTransferTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the digital asset description to provide additional context or information about the asset.\n   *\n   * @param args The parameters for setting the digital asset description.\n   * @param args.creator The creator account responsible for the digital asset.\n   * @param args.description The digital asset description to be set.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Set the digital asset description\n   *   const transaction = await aptos.setDigitalAssetDescriptionTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     description: \"This is a digital asset description.\",\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async setDigitalAssetDescriptionTransaction(args: {\n    creator: Account;\n    description: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetDescriptionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the digital asset name, allowing you to define a name for a specific digital asset on the blockchain.\n   *\n   * @param args The parameters for setting the digital asset name.\n   * @param args.creator The creator account responsible for the transaction.\n   * @param args.name The desired name for the digital asset.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.digitalAssetType Optional. The type of the digital asset, represented as a Move struct ID.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the blockchain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const creator = Account.generate(); // Generate a new account for the creator\n   *   const digitalAssetAddress = \"0x123\"; // replace with a real digital asset address\n   *\n   *   // Set the digital asset name\n   *   const transaction = await aptos.setDigitalAssetNameTransaction({\n   *     creator: creator,\n   *     name: \"digitalAssetName\",\n   *     digitalAssetAddress: digitalAssetAddress,\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async setDigitalAssetNameTransaction(args: {\n    creator: Account;\n    name: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetNameTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the URI for a digital asset, allowing you to associate a unique identifier with the asset.\n   *\n   * @param args The parameters for the transaction.\n   * @param args.creator The creator account initiating the transaction.\n   * @param args.uri The digital asset URI to be set.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Set the URI for a digital asset\n   *   const transaction = await aptos.setDigitalAssetURITransaction({\n   *     creator: Account.generate(), // Replace with a real creator account\n   *     uri: \"digital-asset-uri.com\",\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async setDigitalAssetURITransaction(args: {\n    creator: Account;\n    uri: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetURITransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Add a digital asset property to the blockchain.\n   * This function allows you to specify a new property for a digital asset, including its key, type, and value.\n   *\n   * @param args - The arguments for adding a digital asset property.\n   * @param args.creator - The account that mints the digital asset.\n   * @param args.propertyKey - The property key for storing on-chain properties.\n   * @param args.propertyType - The type of property value.\n   * @param args.propertyValue - The property value to be stored on-chain.\n   * @param args.digitalAssetAddress - The digital asset address.\n   * @param args.digitalAssetType - (Optional) The type of the digital asset.\n   * @param args.options - (Optional) Options for generating the transaction.\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Add a digital asset property\n   *   const transaction = await aptos.addDigitalAssetPropertyTransaction({\n   *     creator: Account.generate(), // Replace with a real account\n   *     propertyKey: \"newKey\",\n   *     propertyType: \"BOOLEAN\",\n   *     propertyValue: true,\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async addDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return addDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Remove a digital asset property from the blockchain.\n   * This function allows you to delete an existing property associated with a digital asset.\n   *\n   * @param args The parameters required to remove the digital asset property.\n   * @param args.creator The account that mints the digital asset.\n   * @param args.propertyKey The property key for storing on-chain properties.\n   * @param args.propertyType The type of property value.\n   * @param args.propertyValue The property value to be stored on-chain.\n   * @param args.digitalAssetAddress The digital asset address.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Remove a digital asset property\n   *   const transaction = await aptos.removeDigitalAssetPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"newKey\",\n   *     propertyType: \"BOOLEAN\",\n   *     propertyValue: true,\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async removeDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return removeDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Update a digital asset property on-chain.\n   *\n   * @param args The parameters for updating the digital asset property.\n   * @param args.creator The account that mints the digital asset.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.propertyKey The property key for storing on-chain properties.\n   * @param args.propertyType The type of property value.\n   * @param args.propertyValue The property value to be stored on-chain.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Update a digital asset property\n   *   const transaction = await aptos.updateDigitalAssetPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"newKey\",\n   *     propertyType: \"BOOLEAN\",\n   *     propertyValue: false,\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async updateDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return updateDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Add a typed digital asset property to the blockchain.\n   * This function allows you to define and store a specific property for a digital asset, enabling better categorization and\n   * management of digital assets.\n   *\n   * @param args - The parameters for adding the typed property.\n   * @param args.creator - The account that mints the digital asset.\n   * @param args.propertyKey - The property key for storing on-chain properties.\n   * @param args.propertyType - The type of property value.\n   * @param args.propertyValue - The property value to be stored on-chain.\n   * @param args.digitalAssetAddress - The digital asset address.\n   * @param args.digitalAssetType - The optional type of the digital asset.\n   * @param args.options - Optional transaction generation options.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Adding a typed digital asset property\n   *   const transaction = await aptos.addDigitalAssetTypedPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"typedKey\",\n   *     propertyType: \"STRING\",\n   *     propertyValue: \"hello\",\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async addDigitalAssetTypedPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return addDigitalAssetTypedPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Update a typed digital asset property on-chain.\n   * This function allows you to modify the properties of a digital asset, enabling dynamic updates to its attributes.\n   *\n   * @param args - The arguments for updating the digital asset property.\n   * @param args.creator - The account that mints the digital asset.\n   * @param args.propertyKey - The property key for storing on-chain properties.\n   * @param args.propertyType - The type of property value.\n   * @param args.propertyValue - The property value to be stored on-chain.\n   * @param args.digitalAssetAddress - The digital asset address.\n   * @param args.digitalAssetType - (Optional) The type of the digital asset.\n   * @param args.options - (Optional) Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Update a typed digital asset property\n   *   const transaction = await aptos.updateDigitalAssetTypedPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"typedKey\",\n   *     propertyType: \"U8\",\n   *     propertyValue: 2,\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async updateDigitalAssetTypedPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return updateDigitalAssetTypedPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/event}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * event namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { AnyNumber, GetEventsResponse, PaginationArgs, MoveStructId, OrderByArg, WhereArg } from \"../types\";\nimport { GetEventsQuery } from \"../types/generated/operations\";\nimport { GetEvents } from \"../types/generated/queries\";\nimport { EventsBoolExp, InputMaybe } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\nconst MAX_EVENT_TYPE_LENGTH = 300;\nconst checkEventTypeLength = (eventType?: InputMaybe<string>) => {\n  if (eventType && eventType.length > MAX_EVENT_TYPE_LENGTH) {\n    throw new Error(`Event type length exceeds the maximum length of ${MAX_EVENT_TYPE_LENGTH}`);\n  }\n};\n\n/**\n * Retrieves events associated with a specific module event type.\n * This function allows you to filter events based on the event type and pagination options.\n *\n * @param args - The arguments for retrieving module events.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.eventType - The MoveStructId representing the type of event to retrieve.\n * @param [args.options] - Optional pagination and ordering parameters for the event retrieval.\n * @group Implementation\n */\nexport async function getModuleEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  eventType: MoveStructId;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, eventType, options } = args;\n\n  const whereCondition: EventsBoolExp = {\n    _or: [\n      // EventHandle events\n      { account_address: { _eq: eventType.split(\"::\")[0] } },\n      // Module events\n      {\n        account_address: { _eq: \"0x0000000000000000000000000000000000000000000000000000000000000000\" },\n        sequence_number: { _eq: 0 },\n        creation_number: { _eq: 0 },\n      },\n    ],\n    indexed_type: { _eq: eventType },\n  };\n\n  return getEvents({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieve events associated with a specific account and creation number.\n *\n * @param args - The parameters for retrieving account events.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.accountAddress - The address of the account for which events are being retrieved.\n * @param args.creationNumber - The creation number to filter events.\n * @param args.options - Optional pagination and ordering parameters for the event retrieval.\n * @group Implementation\n */\nexport async function getAccountEventsByCreationNumber(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  creationNumber: AnyNumber;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, creationNumber, options } = args;\n  const address = AccountAddress.from(accountAddress);\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address.toStringLong() },\n    creation_number: { _eq: creationNumber },\n  };\n\n  return getEvents({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves events associated with a specific account and event type.\n *\n * @param args - The parameters for retrieving account events.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.accountAddress - The address of the account for which to retrieve events.\n * @param args.eventType - The type of event to filter by.\n * @param args.options - Optional pagination and ordering parameters for the event retrieval.\n * @group Implementation\n */\nexport async function getAccountEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  eventType: MoveStructId;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, eventType, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address },\n    indexed_type: { _eq: eventType },\n  };\n\n  return getEvents({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves a list of events based on specified filtering and pagination options.\n *\n * @param args - The arguments for retrieving events.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.offset] - The number of records to skip before starting to collect the result set.\n * @param [args.options.limit] - The maximum number of records to return.\n * @param [args.options.orderBy] - Defines the order in which to return the events.\n * @param [args.options.where] - Conditions to filter the events.\n * @param [args.options.where.indexed_type] - Filters events by the indexed type.\n * @group Implementation\n */\nexport async function getEvents(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]> & WhereArg<EventsBoolExp>;\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, options } = args;\n\n  /**\n   * Checks the length of event types based on the provided filtering options.\n   *\n   * @param options - The options for querying event types.\n   * @param options.where - The conditions to filter the event types.\n   * @param options.where.indexed_type - The indexed type to filter by.\n   * @param options.where.indexed_type._eq - The specific value to match for the indexed type.\n   * @param options.offset - The number of items to skip before starting to collect the result set.\n   * @param options.limit - The maximum number of items to return.\n   * @param options.orderBy - The criteria to sort the results.\n   * @group Implementation\n   */\n  // eslint-disable-next-line no-underscore-dangle\n  checkEventTypeLength(options?.where?.indexed_type?._eq);\n\n  const graphqlQuery = {\n    query: GetEvents,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetEventsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getEvents\",\n  });\n\n  return data.events;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getAccountEventsByCreationNumber,\n  getAccountEventsByEventType,\n  getModuleEventsByEventType,\n  getEvents,\n} from \"../internal/event\";\nimport { AnyNumber, GetEventsResponse, MoveStructId, OrderByArg, PaginationArgs, WhereArg } from \"../types\";\nimport { EventsBoolExp } from \"../types/generated/types\";\nimport { AccountAddressInput } from \"../core\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `Event` Aptos related queries.\n * @group Event\n */\nexport class Event {\n  /**\n   * Initializes a new instance of the Aptos client with the provided configuration.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., Testnet, Mainnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet to use for funding accounts.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with Testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own network if needed\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Retrieve module events based on a specified event type.\n   * This function allows you to query for events that are associated with a particular module event type in the Aptos blockchain.\n   *\n   * @param args - The arguments for retrieving module events.\n   * @param args.eventType - The event type to filter the results.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional pagination and ordering parameters for the event results.\n   *\n   * @returns Promise<GetEventsResponse> - A promise that resolves to the retrieved events.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve module events for a specific event type\n   *   const events = await aptos.getModuleEventsByEventType({\n   *     eventType: \"0x1::transaction_fee::FeeStatement\", // specify the event type\n   *     minimumLedgerVersion: 1, // optional: specify minimum ledger version if needed\n   *   });\n   *\n   *   console.log(events); // log the retrieved events\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getModuleEventsByEventType(args: {\n    eventType: MoveStructId;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getModuleEventsByEventType({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve events associated with a specific account address and creation number.\n   *\n   * @param args - The parameters for retrieving account events.\n   * @param args.accountAddress - The account address to query events for.\n   * @param args.creationNumber - The event creation number to filter the events.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to sync up to before querying.\n   *\n   * @returns Promise<GetEventsResponse>\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get events for the account at creation number 0\n   *   const events = await aptos.getAccountEventsByCreationNumber({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     creationNumber: 0,\n   *   });\n   *\n   *   console.log(events);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getAccountEventsByCreationNumber(args: {\n    accountAddress: AccountAddressInput;\n    creationNumber: AnyNumber;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getAccountEventsByCreationNumber({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve events associated with a specific account address and event type.\n   *\n   * @param args.accountAddress - The account address to query events for.\n   * @param args.eventType - The type of event to filter by.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional pagination and ordering parameters for the event query.\n   *\n   * @returns Promise<GetEventsResponse>\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get events for a specific account and event type\n   *   const events = await aptos.getAccountEventsByEventType({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     eventType: \"0x1::transaction_fee::FeeStatement\", // replace with a real event type\n   *     minimumLedgerVersion: 1, // optional, specify if needed\n   *   });\n   *\n   *   console.log(events);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getAccountEventsByEventType(args: {\n    accountAddress: AccountAddressInput;\n    eventType: MoveStructId;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getAccountEventsByEventType({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve all events from the Aptos blockchain.\n   * An optional `where` clause can be provided to filter the results based on specific criteria.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional pagination and filtering options.\n   * @param args.options.where Optional condition to filter events.\n   * @param args.options.offset Optional pagination offset.\n   * @param args.options.limit Optional maximum number of events to return.\n   * @param args.options.orderBy Optional ordering of the results.\n   *\n   * @returns GetEventsQuery response type containing the events.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve all events\n   *   const events = await aptos.getEvents();\n   *\n   *   // Retrieve events with filtering by account address\n   *   const whereCondition = {\n   *     account_address: { _eq: \"0x123\" }, // replace with a real account address\n   *   };\n   *   const filteredEvents = await aptos.getEvents({\n   *     options: { where: whereCondition },\n   *   });\n   *\n   *   console.log(events);\n   *   console.log(filteredEvents);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getEvents(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]> & WhereArg<EventsBoolExp>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getEvents({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/faucet}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * faucet namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosFaucet } from \"../client\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { TransactionResponseType, UserTransactionResponse, WaitForTransactionOptions } from \"../types\";\nimport { DEFAULT_TXN_TIMEOUT_SEC } from \"../utils/const\";\nimport { waitForTransaction } from \"./transaction\";\n\n/**\n * Funds an account with a specified amount of tokens from the Aptos faucet.\n * This function is useful for quickly providing a new or existing account with tokens to facilitate transactions.\n *\n * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n * the minting page at https://aptos.dev/network/faucet.\n *\n * @param args - The arguments for funding the account.\n * @param args.aptosConfig - The configuration settings for connecting to the Aptos network.\n * @param args.accountAddress - The address of the account to be funded.\n * @param args.amount - The amount of tokens to fund the account with.\n * @param args.options - Optional parameters for the transaction.\n * @param args.options.timeoutSecs - The maximum time to wait for the transaction to complete, in seconds.\n * @param args.options.checkSuccess - A flag indicating whether to check if the transaction was successful.\n *\n * @throws Error if the transaction does not return a user transaction type.\n * @group Implementation\n */\nexport async function fundAccount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  amount: number;\n  options?: WaitForTransactionOptions;\n}): Promise<UserTransactionResponse> {\n  const { aptosConfig, accountAddress, amount, options } = args;\n  const timeout = options?.timeoutSecs || DEFAULT_TXN_TIMEOUT_SEC;\n  const { data } = await postAptosFaucet<any, { txn_hashes: Array<string> }>({\n    aptosConfig,\n    path: \"fund\",\n    body: {\n      address: AccountAddress.from(accountAddress).toString(),\n      amount,\n    },\n    originMethod: \"fundAccount\",\n  });\n\n  const txnHash = data.txn_hashes[0];\n\n  const res = await waitForTransaction({\n    aptosConfig,\n    transactionHash: txnHash,\n    options: {\n      timeoutSecs: timeout,\n      checkSuccess: options?.checkSuccess,\n    },\n  });\n\n  // Response is always User transaction for a user submitted transaction\n  if (res.type === TransactionResponseType.User) {\n    return res;\n  }\n\n  throw new Error(`Unexpected transaction received for fund account: ${res.type}`);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fundAccount } from \"../internal/faucet\";\nimport { UserTransactionResponse, WaitForTransactionOptions } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexer } from \"../internal/transaction\";\nimport { ProcessorType } from \"../utils\";\n\n/**\n * A class to query all `Faucet` related queries on Aptos.\n * @group Faucet\n */\nexport class Faucet {\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   *\n   * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n   * the minting page at https://aptos.dev/network/faucet.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.DEVNET }); // specify your own network if needed\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Faucet\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * This function creates an account if it does not exist and mints the specified amount of coins into that account.\n   *\n   * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n   * the minting page at https://aptos.dev/network/faucet.\n   *\n   * @param args - The arguments for funding the account.\n   * @param args.accountAddress - The address of the account to fund.\n   * @param args.amount - The amount of tokens to fund the account with.\n   * @param args.options - Configuration options for waiting for the transaction.\n   * @returns Transaction hash of the transaction that funded the account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.DEVNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fund an account with a specified amount of tokens\n   *   const transaction = await aptos.fundAccount({\n   *     accountAddress: \"0x1\", // replace with your account address\n   *     amount: 100,\n   *   });\n   *\n   *   console.log(\"Transaction hash:\", transaction.hash);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Faucet\n   */\n  async fundAccount(args: {\n    accountAddress: AccountAddressInput;\n    amount: number;\n    options?: WaitForTransactionOptions;\n  }): Promise<UserTransactionResponse> {\n    const fundTxn = await fundAccount({ aptosConfig: this.config, ...args });\n\n    // If the user explicitly says to NOT wait by setting waitForIndexer to false, then we skip this.\n    // But, by default we want to wait for the indexer.\n    if (args.options?.waitForIndexer === undefined || args.options?.waitForIndexer) {\n      await waitForIndexer({\n        aptosConfig: this.config,\n        minimumLedgerVersion: BigInt(fundTxn.version),\n        processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n      });\n    }\n\n    return fundTxn;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/fungible_asset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * fungible_asset namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  AnyNumber,\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n  WhereArg,\n} from \"../types\";\nimport { queryIndexer } from \"./general\";\nimport {\n  GetCurrentFungibleAssetBalances,\n  GetFungibleAssetActivities,\n  GetFungibleAssetMetadata,\n} from \"../types/generated/queries\";\nimport {\n  GetCurrentFungibleAssetBalancesQuery,\n  GetFungibleAssetActivitiesQuery,\n  GetFungibleAssetMetadataQuery,\n} from \"../types/generated/operations\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\nimport { AccountAddressInput } from \"../core\";\nimport { Account } from \"../account\";\nimport {\n  EntryFunctionABI,\n  InputGenerateTransactionOptions,\n  parseTypeTag,\n  TypeTagAddress,\n  TypeTagU64,\n} from \"../transactions\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * Retrieves metadata for fungible assets based on specified criteria.\n * This function allows you to filter and paginate through fungible asset metadata.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for Aptos.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.limit] - The maximum number of results to return.\n * @param [args.options.offset] - The number of results to skip before starting to collect the result set.\n * @param [args.options.where] - Conditions to filter the results.\n * @group Implementation\n */\nexport async function getFungibleAssetMetadata(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<FungibleAssetMetadataBoolExp>;\n}): Promise<GetFungibleAssetMetadataResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetMetadata,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetMetadataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetMetadata\",\n  });\n\n  return data.fungible_asset_metadata;\n}\n\n/**\n * Retrieves the activities associated with fungible assets.\n * This function allows you to filter and paginate through the activities based on specified conditions.\n *\n * @param args - The arguments for retrieving fungible asset activities.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.limit] - The maximum number of activities to retrieve.\n * @param [args.options.offset] - The number of activities to skip before starting to collect the result set.\n * @param [args.options.where] - Conditions to filter the activities.\n * @returns A promise that resolves to an array of fungible asset activities.\n * @group Implementation\n */\nexport async function getFungibleAssetActivities(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<FungibleAssetActivitiesBoolExp>;\n}): Promise<GetFungibleAssetActivitiesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetActivities,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetActivitiesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetActivities\",\n  });\n\n  return data.fungible_asset_activities;\n}\n\n/**\n * Retrieves the current balances of fungible assets for a specified configuration.\n *\n * @param args - The arguments for retrieving fungible asset balances.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.options - Optional parameters for pagination and filtering.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the results.\n * @param args.options.where - Conditions to filter the results based on specific criteria.\n * @returns The current balances of fungible assets.\n * @group Implementation\n */\nexport async function getCurrentFungibleAssetBalances(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n}): Promise<GetCurrentFungibleAssetBalancesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetCurrentFungibleAssetBalances,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentFungibleAssetBalancesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentFungibleAssetBalances\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n\nconst faTransferAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [] }],\n  parameters: [parseTypeTag(\"0x1::object::Object\"), new TypeTagAddress(), new TypeTagU64()],\n};\n\n/**\n * Transfers a specified amount of a fungible asset from the sender to the recipient.\n * This function helps facilitate the transfer of digital assets between accounts on the Aptos blockchain.\n *\n * @param args - The parameters for the transfer operation.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.sender - The account initiating the transfer.\n * @param args.fungibleAssetMetadataAddress - The address of the fungible asset's metadata.\n * @param args.recipient - The address of the account receiving the asset.\n * @param args.amount - The amount of the fungible asset to transfer.\n * @param args.options - Optional settings for generating the transaction.\n * @group Implementation\n */\nexport async function transferFungibleAsset(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  fungibleAssetMetadataAddress: AccountAddressInput;\n  recipient: AccountAddressInput;\n  amount: AnyNumber;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, fungibleAssetMetadataAddress, recipient, amount, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::primary_fungible_store::transfer\",\n      typeArguments: [\"0x1::fungible_asset::Metadata\"],\n      functionArguments: [fungibleAssetMetadataAddress, recipient, amount],\n      abi: faTransferAbi,\n    },\n    options,\n  });\n}\n\n/**\n * Transfers a specified amount of a fungible asset from any (primary or secondary) fungible store to any (primary or secondary) fungible store.\n * This function helps facilitate the transfer of digital assets between fungible stores on the Aptos blockchain.\n *\n * @param args - The parameters for the transfer operation.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.sender - The account initiating the transfer.\n * @param args.fromStore - The address of the fungible store initiating the transfer.\n * @param args.toStore - The address of the fungible store receiving the asset.\n * @param args.amount - The amount of the fungible asset to transfer. Must be a positive number.\n * @param args.options - Optional settings for generating the transaction.\n * @returns A SimpleTransaction that can be submitted to the blockchain.\n * @throws Error if the transaction generation fails or if the input parameters are invalid.\n * @group Implementation\n */\nexport async function transferFungibleAssetBetweenStores(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  fromStore: AccountAddressInput;\n  toStore: AccountAddressInput;\n  amount: AnyNumber;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, fromStore, toStore, amount, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::dispatchable_fungible_asset::transfer\",\n      typeArguments: [\"0x1::fungible_asset::FungibleStore\"],\n      functionArguments: [fromStore, toStore, amount],\n      abi: faTransferAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyNumber,\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n  WhereArg,\n} from \"../types\";\nimport {\n  getCurrentFungibleAssetBalances,\n  getFungibleAssetActivities,\n  getFungibleAssetMetadata,\n  transferFungibleAsset,\n  transferFungibleAssetBetweenStores,\n} from \"../internal/fungibleAsset\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { Account } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions } from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * A class for querying and managing fungible asset-related operations on the Aptos blockchain.\n * @group FungibleAsset\n */\nexport class FungibleAsset {\n  /**\n   * Initializes a new instance of the Aptos class with the provided configuration.\n   * This allows you to interact with the Aptos blockchain using the specified network settings.\n   *\n   * @param config - The configuration settings for connecting to the Aptos network.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own network if needed\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries all fungible asset metadata.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional configuration for pagination and filtering.\n   *\n   * @returns A list of fungible asset metadata.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching fungible asset metadata\n   *   const fungibleAssets = await aptos.getFungibleAssetMetadata();\n   *   console.log(fungibleAssets);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetMetadata(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<FungibleAssetMetadataBoolExp>;\n  }): Promise<GetFungibleAssetMetadataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getFungibleAssetMetadata({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the fungible asset metadata for a specific asset type.\n   * This function helps retrieve detailed information about a fungible asset based on its type.\n   *\n   * @param args - The parameters for the query.\n   * @param args.assetType - The asset type of the fungible asset, e.g., \"0x1::aptos_coin::AptosCoin\" for Aptos Coin.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   *\n   * @returns A fungible asset metadata item.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve fungible asset metadata by asset type\n   *   const fungibleAsset = await aptos.getFungibleAssetMetadataByAssetType({\n   *     assetType: \"0x1::aptos_coin::AptosCoin\" // replace with your asset type\n   *   });\n   *\n   *   console.log(fungibleAsset);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetMetadataByAssetType(args: {\n    assetType: string;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetFungibleAssetMetadataResponse[0]> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    const data = await getFungibleAssetMetadata({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          asset_type: { _eq: args.assetType },\n        },\n      },\n    });\n\n    return data[0];\n  }\n\n  /**\n   * Retrieves fungible asset metadata based on the creator address.\n   *\n   * This function allows you to query metadata for a specific fungible asset created by a given address.\n   *\n   * @param args - The parameters for the query.\n   * @param args.creatorAddress - The creator address of the fungible asset.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   *\n   * @returns A fungible asset metadata item.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve fungible asset metadata by creator address\n   *   const fungibleAsset = await aptos.getFungibleAssetMetadataByCreatorAddress({\n   *     creatorAddress: \"0x123\", // replace with a real creator address\n   *   });\n   *\n   *   console.log(fungibleAsset);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetMetadataByCreatorAddress(args: {\n    creatorAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetFungibleAssetMetadataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    const data = await getFungibleAssetMetadata({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          creator_address: { _eq: AccountAddress.from(args.creatorAddress).toStringLong() },\n        },\n      },\n    });\n\n    return data;\n  }\n\n  /**\n   * Queries all fungible asset activities and returns a list of their metadata.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying.\n   * @param args.options Optional configuration for pagination and filtering.\n   * @returns A list of fungible asset metadata.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching fungible asset activities\n   *   const fungibleAssetActivities = await aptos.getFungibleAssetActivities();\n   *   console.log(fungibleAssetActivities);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetActivities(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<FungibleAssetActivitiesBoolExp>;\n  }): Promise<GetFungibleAssetActivitiesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getFungibleAssetActivities({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries all fungible asset balances.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying.\n   * @param args.options Optional configuration for pagination and filtering.\n   *\n   * @returns A list of fungible asset metadata.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching current fungible asset balances\n   *   const fungibleAssetBalances = await aptos.getCurrentFungibleAssetBalances();\n   *\n   *   console.log(fungibleAssetBalances);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getCurrentFungibleAssetBalances(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n  }): Promise<GetCurrentFungibleAssetBalancesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getCurrentFungibleAssetBalances({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Transfer a specified amount of fungible asset from the sender's primary store to the recipient's primary store.\n   * This method allows you to transfer any fungible asset, including fungible tokens.\n   *\n   * @param args - The arguments for the transfer operation.\n   * @param args.sender - The sender account.\n   * @param args.fungibleAssetMetadataAddress - The fungible asset account address. For example, if you're transferring USDT,\n   * this would be the USDT address.\n   * @param args.recipient - The recipient account address.\n   * @param args.amount - The number of assets to transfer.\n   * @param args.options - Optional parameters for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Transfer fungible asset from sender to recipient\n   *   const transaction = await aptos.transferFungibleAsset({\n   *     sender: Account.generate(), // replace with a real sender account\n   *     fungibleAssetMetadataAddress: \"0x123\", // replace with a real fungible asset address\n   *     recipient: \"0x456\", // replace with a real recipient account\n   *     amount: 5\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async transferFungibleAsset(args: {\n    sender: Account;\n    fungibleAssetMetadataAddress: AccountAddressInput;\n    recipient: AccountAddressInput;\n    amount: AnyNumber;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferFungibleAsset({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Transfer a specified amount of fungible asset from the sender's any (primary or secondary) fungible store to any (primary or secondary) fungible store.\n   * This method allows you to transfer any fungible asset, including fungible tokens.\n   *\n   * @param args - The arguments for the transfer operation.\n   * @param args.sender - The sender account initiating the transfer.\n   * @param args.fromStore - The fungible store address initiating the transfer.\n   * @param args.toStore - The fungible store address receiving the asset.\n   * @param args.amount - The number of assets to transfer. Must be a positive number.\n   * @param args.options - Optional parameters for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @throws Error if:\n   * - The sender account is invalid\n   * - The store addresses are invalid\n   * - The amount is negative or zero\n   * - The transaction fails to generate\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function transferAssets() {\n   *   // Transfer 100 units of the asset from senderStore to recipientStore\n   *   const transaction = await aptos.transferFungibleAssetBetweenStores({\n   *     sender: Account.generate(), // replace with a real sender account\n   *     fromStore: \"0x123\", // replace with a real fungible store address\n   *     toStore: \"0x456\", // replace with a real fungible store address\n   *     amount: 100\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   *\n   * transferAssets().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async transferFungibleAssetBetweenStores(args: {\n    sender: Account;\n    fromStore: AccountAddressInput;\n    toStore: AccountAddressInput;\n    amount: AnyNumber;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferFungibleAssetBetweenStores({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getChainTopUserTransactions,\n  getIndexerLastSuccessVersion,\n  getLedgerInfo,\n  getProcessorStatus,\n  queryIndexer,\n} from \"../internal/general\";\nimport { getBlockByHeight, getBlockByVersion } from \"../internal/transaction\";\nimport { view, viewJson } from \"../internal/view\";\nimport {\n  AnyNumber,\n  Block,\n  GetChainTopUserTransactionsResponse,\n  GetProcessorStatusResponse,\n  GraphqlQuery,\n  LedgerInfo,\n  LedgerVersionArg,\n  MoveValue,\n} from \"../types\";\nimport { ProcessorType } from \"../utils/const\";\nimport { InputViewFunctionData, InputViewFunctionJsonData } from \"../transactions\";\n\n/**\n * A class to query various Aptos-related information and perform operations on the Aptos blockchain.\n * @group General\n */\nexport class General {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows users to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // specify the network\n   *         nodeUrl: \"https://testnet.aptos.dev\" // specify the node URL\n   *     });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries for the Aptos ledger information.\n   *\n   * @returns The Aptos Ledger Info, which includes details such as chain ID, epoch, and ledger version.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the ledger information\n   *   const ledgerInfo = await aptos.getLedgerInfo();\n   *\n   *   console.log(ledgerInfo);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getLedgerInfo(): Promise<LedgerInfo> {\n    return getLedgerInfo({ aptosConfig: this.config });\n  }\n\n  /**\n   * Retrieves the chain ID of the Aptos blockchain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the chain ID\n   *   const chainId = await aptos.getChainId();\n   *   console.log(\"Chain ID:\", chainId);\n   * }\n   * runExample().catch(console.error);\n   *\n   * @returns The chain ID of the Aptos blockchain.\n   * ```\n   * @group General\n   */\n  async getChainId(): Promise<number> {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  /**\n   * Retrieves block information by the specified ledger version.\n   *\n   * @param args - The arguments for retrieving the block.\n   * @param args.ledgerVersion - The ledger version to lookup block information for.\n   * @param args.options - Optional parameters for the request.\n   * @param args.options.withTransactions - If set to true, include all transactions in the block.\n   *\n   * @returns Block information with optional transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve block information for a specific ledger version\n   *   const block = await aptos.getBlockByVersion({ ledgerVersion: 5 });\n   *   console.log(block);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getBlockByVersion(args: {\n    ledgerVersion: AnyNumber;\n    options?: { withTransactions?: boolean };\n  }): Promise<Block> {\n    return getBlockByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieve a block by its height, allowing for the inclusion of transactions if specified.\n   *\n   * @param args - The parameters for the block retrieval.\n   * @param args.blockHeight - The block height to look up, starting at 0.\n   * @param args.options - Optional settings for the retrieval.\n   * @param args.options.withTransactions - If set to true, includes all transactions in the block.\n   *\n   * @returns The block with optional transactions included.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the block at height 5, including transactions\n   *   const block = await aptos.getBlockByHeight({ blockHeight: 5, options: { withTransactions: true } });\n   *   console.log(block);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getBlockByHeight(args: { blockHeight: AnyNumber; options?: { withTransactions?: boolean } }): Promise<Block> {\n    return getBlockByHeight({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a Move view function\n   * @param args.payload Payload for the view function\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @example\n   * const data = await aptos.view({\n   *  payload: {\n   *   function: \"0x1::coin::balance\",\n   *   typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *   functionArguments: [accountAddress],\n   *  }\n   * })\n   *\n   * @returns an array of Move values\n   * @group General\n   */\n  async view<T extends Array<MoveValue>>(args: {\n    payload: InputViewFunctionData;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return view<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a Move view function with JSON, this provides compatability with the old `aptos` package\n   * @param args.payload Payload for the view function\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @example\n   * const data = await aptos.view({\n   *  payload: {\n   *   function: \"0x1::coin::balance\",\n   *   typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *   functionArguments: [accountAddress.toString()],\n   *  }\n   * })\n   *\n   * @returns an array of Move values\n   * @group General\n   */\n  async viewJson<T extends Array<MoveValue>>(args: {\n    payload: InputViewFunctionJsonData;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return viewJson<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the top user transactions based on the specified limit.\n   *\n   * @param args - The arguments for querying top user transactions.\n   * @param args.limit - The number of transactions to return.\n   * @returns GetChainTopUserTransactionsResponse\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch the top user transactions with a limit of 5\n   *   const topUserTransactions = await aptos.getChainTopUserTransactions({ limit: 5 });\n   *\n   *   console.log(topUserTransactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getChainTopUserTransactions(args: { limit: number }): Promise<GetChainTopUserTransactionsResponse> {\n    return getChainTopUserTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieves data from the Aptos Indexer using a GraphQL query.\n   * This function allows you to execute complex queries to fetch specific data from the Aptos blockchain.\n   *\n   * @param args.query.query - A GraphQL query string.\n   * @param args.query.variables - The variables for the query (optional).\n   *\n   * @return The provided T type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Querying the Aptos Indexer for ledger information\n   *   const topUserTransactions = await aptos.queryIndexer({\n   *     query: { query: `query MyQuery {\n   *       ledger_infos {\n   *         chain_id\n   *       }\n   *     }`}\n   *   });\n   *\n   *   console.log(topUserTransactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async queryIndexer<T extends {}>(args: { query: GraphqlQuery }): Promise<T> {\n    return queryIndexer<T>({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for the last successful indexer version, providing insight into the ledger version the indexer is updated to, which\n   * may lag behind the full nodes.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the last successful indexer version\n   *   const version = await aptos.getIndexerLastSuccessVersion();\n   *   console.log(`Last successful indexer version: ${version}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getIndexerLastSuccessVersion(): Promise<bigint> {\n    return getIndexerLastSuccessVersion({ aptosConfig: this.config });\n  }\n\n  /**\n   * Query the processor status for a specific processor type.\n   *\n   * @param processorType The processor type to query.\n   * @returns The status of the specified processor type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the processor status for the account transactions processor\n   *   const status = await aptos.getProcessorStatus(\"account_transactions_processor\");\n   *   console.log(status);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getProcessorStatus(processorType: ProcessorType): Promise<GetProcessorStatusResponse[0]> {\n    return getProcessorStatus({ aptosConfig: this.config, processorType });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/name}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * name namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Account } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { GetANSNameResponse, MoveAddressType, OrderByArg, PaginationArgs, WhereArg } from \"../types\";\nimport { GetNamesQuery } from \"../types/generated/operations\";\nimport { GetNames } from \"../types/generated/queries\";\nimport { CurrentAptosNamesBoolExp } from \"../types/generated/types\";\nimport { Network } from \"../utils/apiEndpoints\";\nimport { queryIndexer } from \"./general\";\nimport { view } from \"./view\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\nexport const VALIDATION_RULES_DESCRIPTION = [\n  \"A name must be between 3 and 63 characters long,\",\n  \"and can only contain lowercase a-z, 0-9, and hyphens.\",\n  \"A name may not start or end with a hyphen.\",\n].join(\" \");\n\n/**\n * Validate if a given fragment is a valid ANS segment.\n * This function checks the length and character constraints of the fragment to ensure it meets the ANS standards.\n *\n * @param fragment - A fragment of a name, either the domain or subdomain.\n * @returns A boolean indicating if the fragment is a valid fragment.\n * @group Implementation\n */\nexport function isValidANSSegment(fragment: string): boolean {\n  if (!fragment) return false;\n  if (fragment.length < 3) return false;\n  if (fragment.length > 63) return false;\n  // only lowercase a-z and 0-9 are allowed, along with -. a domain may not start or end with a hyphen\n  if (!/^[a-z\\d][a-z\\d-]{1,61}[a-z\\d]$/.test(fragment)) return false;\n  return true;\n}\n\n/**\n * Checks if an ANS name is valid or not.\n *\n * @param name - A string of the domain name, which can include or exclude the .apt suffix.\n * @group Implementation\n */\nexport function isValidANSName(name: string): { domainName: string; subdomainName?: string } {\n  const [first, second, ...rest] = name.replace(/\\.apt$/, \"\").split(\".\");\n\n  if (rest.length > 0) {\n    throw new Error(`${name} is invalid. A name can only have two parts, a domain and a subdomain separated by a \".\"`);\n  }\n\n  if (!isValidANSSegment(first)) {\n    throw new Error(`${first} is not valid. ${VALIDATION_RULES_DESCRIPTION}`);\n  }\n\n  if (second && !isValidANSSegment(second)) {\n    throw new Error(`${second} is not valid. ${VALIDATION_RULES_DESCRIPTION}`);\n  }\n\n  return {\n    domainName: second || first,\n    subdomainName: second ? first : undefined,\n  };\n}\n\n/**\n * Policy for determining how subdomains expire in relation to their parent domain.\n * @group Implementation\n */\nexport enum SubdomainExpirationPolicy {\n  Independent = 0,\n  FollowsDomain = 1,\n}\n\n/**\n * Determine if a given ANS name is considered active based on its expiration dates.\n * Domains are active if their expiration date is in the future, while subdomains may\n * follow their parent's expiration policy (1) or expire independently (0).\n * If the subdomain is expiring independently, it can expire before their parent, but not after.\n *\n * @param name - An ANS name returned from one of the functions of the SDK.\n * @returns A boolean indicating whether the contract considers the name active or not.\n * @group Implementation\n */\nexport function isActiveANSName(name: GetANSNameResponse[0]): boolean {\n  if (!name) return false;\n\n  const isTLDExpired = new Date(name.domain_expiration_timestamp).getTime() < Date.now();\n  const isExpired = new Date(name.expiration_timestamp).getTime() < Date.now();\n\n  // If we are a subdomain, if our parent is expired we are always expired\n  if (name.subdomain && isTLDExpired) return false;\n\n  // If we are a subdomain and our expiration policy is to follow the domain, we\n  // are active (since we know our parent is not expired by this point)\n  if (name.subdomain && name.subdomain_expiration_policy === SubdomainExpirationPolicy.FollowsDomain) return true;\n\n  // At this point, we are either a TLD or a subdomain with an independent\n  // expiration policy, we are active as long as we the expiration timestamp\n  return !isExpired;\n}\n\nexport const LOCAL_ANS_ACCOUNT_PK =\n  process.env.ANS_TEST_ACCOUNT_PRIVATE_KEY ??\n  \"ed25519-priv-0x37368b46ce665362562c6d1d4ec01a08c8644c488690df5a17e13ba163e20221\";\nexport const LOCAL_ANS_ACCOUNT_ADDRESS =\n  process.env.ANS_TEST_ACCOUNT_ADDRESS ?? \"0x585fc9f0f0c54183b039ffc770ca282ebd87307916c215a3e692f2f8e4305e82\";\n\nconst NetworkToAnsContract: Record<Network, string | null> = {\n  [Network.TESTNET]: \"0x5f8fd2347449685cf41d4db97926ec3a096eaf381332be4f1318ad4d16a8497c\",\n  [Network.MAINNET]: \"0x867ed1f6bf916171b1de3ee92849b8978b7d1b9e0a8cc982a3d19d535dfd9c0c\",\n  [Network.LOCAL]: LOCAL_ANS_ACCOUNT_ADDRESS,\n  [Network.CUSTOM]: null,\n  [Network.DEVNET]: null,\n};\n\n/**\n * Retrieves the address of the ANS contract based on the specified Aptos network configuration.\n *\n * @param aptosConfig - The configuration object for the Aptos network.\n * @param aptosConfig.network - The network for which to retrieve the ANS contract address.\n *\n * @throws Throws an error if the ANS contract is not deployed to the specified network.\n * @group Implementation\n */\nfunction getRouterAddress(aptosConfig: AptosConfig): string {\n  const address = NetworkToAnsContract[aptosConfig.network];\n  if (!address) throw new Error(`The ANS contract is not deployed to ${aptosConfig.network}`);\n  return address;\n}\n\nconst unwrapOption = <T>(option: any): T | undefined => {\n  if (!!option && typeof option === \"object\" && \"vec\" in option && Array.isArray(option.vec)) {\n    return option.vec[0];\n  }\n\n  return undefined;\n};\n\n/**\n * Retrieve the owner address of a specified domain or subdomain.\n *\n * @param args - The arguments for retrieving the owner address.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.name - The name of the domain or subdomain to query.\n * @returns The account address of the owner, or undefined if not found.\n * @group Implementation\n */\nexport async function getOwnerAddress(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<AccountAddress | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_owner_addr`,\n      functionArguments: [domainName, subdomainName],\n    },\n  });\n\n  const owner = unwrapOption<MoveAddressType>(res[0]);\n\n  return owner ? AccountAddress.from(owner) : undefined;\n}\n\n/**\n * Parameters for registering a name in the Aptos network.\n *\n * @param aptosConfig - Configuration settings for the Aptos network.\n * @param sender - The account initiating the name registration.\n * @param name - The name to be registered.\n * @param expiration - The expiration policy for the name registration.\n * @group Implementation\n */\nexport interface RegisterNameParameters {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  expiration:\n    | { policy: \"domain\"; years?: 1 }\n    | { policy: \"subdomain:follow-domain\" }\n    | { policy: \"subdomain:independent\"; expirationDate: number };\n  transferable?: boolean;\n  toAddress?: AccountAddressInput;\n  targetAddress?: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}\n\n/**\n * Registers a domain or subdomain with the specified parameters. This function ensures that the provided names and expiration\n * policies are valid before proceeding with the registration process.\n *\n * @param args - The parameters required for registering a name.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.expiration - The expiration details for the registration.\n * @param args.name - The name to be registered, which can be a domain or subdomain.\n * @param args.sender - The account details of the sender initiating the registration.\n * @param args.targetAddress - The target address for the registration.\n * @param args.toAddress - The address to which the registration is associated.\n * @param args.options - Additional options for the registration process.\n * @param args.transferable - Indicates whether the registered name is transferable.\n *\n * @throws Error if the provided expiration policy is invalid for subdomains.\n * @throws Error if the domain does not exist.\n * @throws Error if the subdomain expiration time exceeds the domain expiration time.\n *\n * @returns A transaction object representing the registration process.\n * @group Implementation\n */\nexport async function registerName(args: RegisterNameParameters): Promise<SimpleTransaction> {\n  const { aptosConfig, expiration, name, sender, targetAddress, toAddress, options, transferable } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const hasSubdomainPolicy =\n    expiration.policy === \"subdomain:independent\" || expiration.policy === \"subdomain:follow-domain\";\n\n  if (subdomainName && !hasSubdomainPolicy) {\n    throw new Error(\n      \"Subdomains must have an expiration policy of either 'subdomain:independent' or 'subdomain:follow-domain'\",\n    );\n  }\n\n  if (hasSubdomainPolicy && !subdomainName) {\n    throw new Error(`Policy is set to ${expiration.policy} but no subdomain was provided`);\n  }\n\n  if (expiration.policy === \"domain\") {\n    const years = expiration.years ?? 1;\n    if (years !== 1) {\n      throw new Error(\"For now, names can only be registered for 1 year at a time\");\n    }\n\n    const secondsInYear = 31536000;\n    const registrationDuration = years * secondsInYear;\n\n    const transaction = await generateTransaction({\n      aptosConfig,\n      sender: sender.accountAddress.toString(),\n      data: {\n        function: `${routerAddress}::router::register_domain`,\n        functionArguments: [domainName, registrationDuration, targetAddress, toAddress],\n      },\n      options,\n    });\n\n    return transaction;\n  }\n\n  // We are a subdomain\n  if (!subdomainName) {\n    throw new Error(`${expiration.policy} requires a subdomain to be provided.`);\n  }\n\n  const tldExpiration = await getExpiration({ aptosConfig, name: domainName });\n  if (!tldExpiration) {\n    throw new Error(\"The domain does not exist\");\n  }\n\n  const expirationDateInMillisecondsSinceEpoch =\n    expiration.policy === \"subdomain:independent\" ? expiration.expirationDate : tldExpiration;\n\n  if (expirationDateInMillisecondsSinceEpoch > tldExpiration) {\n    throw new Error(\"The subdomain expiration time cannot be greater than the domain expiration time\");\n  }\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::register_subdomain`,\n      functionArguments: [\n        domainName,\n        subdomainName,\n        Math.round(expirationDateInMillisecondsSinceEpoch / 1000),\n        expiration.policy === \"subdomain:follow-domain\" ? 1 : 0,\n        !!transferable,\n        targetAddress,\n        toAddress,\n      ],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * Retrieves the expiration time of a specified domain or subdomain in epoch milliseconds.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.name - The name of the domain or subdomain to check.\n * @returns The expiration time in epoch milliseconds, or undefined if an error occurs.\n * @group Implementation\n */\nexport async function getExpiration(args: { aptosConfig: AptosConfig; name: string }): Promise<number | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  try {\n    const res = await view({\n      aptosConfig,\n      payload: {\n        function: `${routerAddress}::router::get_expiration`,\n        functionArguments: [domainName, subdomainName],\n      },\n    });\n\n    // Normalize expiration time from epoch seconds to epoch milliseconds\n    return Number(res[0]) * 1000;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * Retrieves the primary name associated with a given account address.\n * This function helps in obtaining the complete domain name by combining the subdomain and domain names.\n *\n * @param args - The arguments for retrieving the primary name.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.address - The account address for which to retrieve the primary name.\n * @returns The primary name as a string, or undefined if no domain name exists.\n * @group Implementation\n */\nexport async function getPrimaryName(args: {\n  aptosConfig: AptosConfig;\n  address: AccountAddressInput;\n}): Promise<string | undefined> {\n  const { aptosConfig, address } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_primary_name`,\n      functionArguments: [AccountAddress.from(address).toString()],\n    },\n  });\n\n  const domainName = unwrapOption<MoveAddressType>(res[1]);\n  const subdomainName = unwrapOption<MoveAddressType>(res[0]);\n\n  if (!domainName) return undefined;\n\n  return [subdomainName, domainName].filter(Boolean).join(\".\");\n}\n\n/**\n * Sets the primary name for the specified account, allowing for the association of a domain or subdomain with the account.\n * If no name is provided, it clears the existing primary name.\n *\n * @param args - The arguments for setting the primary name.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.sender - The account that is sending the transaction.\n * @param args.name - The name to set as the primary name. If omitted, the function will clear the primary name.\n * @param args.options - Optional transaction generation options.\n * @returns A transaction object representing the operation.\n * @group Implementation\n */\nexport async function setPrimaryName(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name?: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  if (!name) {\n    const transaction = await generateTransaction({\n      aptosConfig,\n      sender: sender.accountAddress.toString(),\n      data: {\n        function: `${routerAddress}::router::clear_primary_name`,\n        functionArguments: [],\n      },\n      options,\n    });\n\n    return transaction;\n  }\n\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::set_primary_name`,\n      functionArguments: [domainName, subdomainName],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * Retrieves the target address associated with a given domain name and subdomain name.\n *\n * @param args - The arguments for retrieving the target address.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.name - The name of the domain, which may include a subdomain.\n * @returns The target address as an AccountAddress, or undefined if not found.\n * @group Implementation\n */\nexport async function getTargetAddress(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<AccountAddress | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_target_addr`,\n      functionArguments: [domainName, subdomainName],\n    },\n  });\n\n  const target = unwrapOption<MoveAddressType>(res[0]);\n  return target ? AccountAddress.from(target) : undefined;\n}\n\n/**\n * Sets the target address for a specified domain and subdomain in the Aptos network.\n * This function helps to associate a given address with a domain name, allowing for easier access and management of resources.\n *\n * @param args - The arguments for setting the target address.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.sender - The account that is sending the transaction.\n * @param args.name - The name of the domain or subdomain to be set.\n * @param args.address - The address to be associated with the domain or subdomain.\n * @param args.options - Optional parameters for generating the transaction.\n *\n * @returns A transaction object representing the set target address operation.\n * @group Implementation\n */\nexport async function setTargetAddress(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  address: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, address, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::set_target_addr`,\n      functionArguments: [domainName, subdomainName, address],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * Retrieves the active Aptos name associated with the specified domain and subdomain.\n *\n * @param args - The parameters for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.name - The name to look up, which includes the domain and optional subdomain.\n * @returns The active Aptos name if it exists; otherwise, returns undefined.\n * @group Implementation\n */\nexport async function getName(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<GetANSNameResponse[0] | undefined> {\n  const { aptosConfig, name } = args;\n  const { domainName, subdomainName = \"\" } = isValidANSName(name);\n\n  const where: CurrentAptosNamesBoolExp = {\n    domain: { _eq: domainName },\n    subdomain: { _eq: subdomainName },\n  };\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    query: {\n      query: GetNames,\n      variables: {\n        where_condition: where,\n        limit: 1,\n      },\n    },\n    originMethod: \"getName\",\n  });\n\n  // Convert the expiration_timestamp from an ISO string to milliseconds since epoch\n  let res = data.current_aptos_names[0];\n  if (res) {\n    res = sanitizeANSName(res);\n  }\n\n  return isActiveANSName(res) ? res : undefined;\n}\n\n/**\n * Options for querying names, including pagination, ordering, and filtering criteria.\n *\n * @param options - Pagination and filtering options for the query.\n * @group Implementation\n */\ninterface QueryNamesOptions {\n  options?: PaginationArgs & OrderByArg<GetANSNameResponse[0]> & WhereArg<CurrentAptosNamesBoolExp>;\n}\n\n/**\n * Arguments for retrieving account names based on the specified account address.\n *\n * @param accountAddress - The address of the account for which names are to be retrieved.\n * @group Implementation\n */\nexport interface GetAccountNamesArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\n/**\n * Retrieves the current Aptos names associated with a specific account address.\n *\n * @param args - The arguments for retrieving account names.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for querying account names.\n * @param args.options.limit - The maximum number of names to retrieve.\n * @param args.options.offset - The number of names to skip before starting to collect the result set.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.accountAddress - The address of the account for which to retrieve names.\n *\n * @returns An array of sanitized Aptos names associated with the specified account address.\n * @group Implementation\n */\nexport async function getAccountNames(\n  args: { aptosConfig: AptosConfig } & GetAccountNamesArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountNames\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\n/**\n * Arguments for retrieving the domains associated with a specific account.\n *\n * @param accountAddress - The address of the account for which to fetch domains.\n * @group Implementation\n */\nexport interface GetAccountDomainsArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\n/**\n * Retrieves the list of top-level domains owned by a specified account.\n *\n * @param args - The arguments for retrieving account domains.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.options - Optional parameters for the query.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the result set.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.options.where.owner_address - The address of the account whose domains are being queried.\n * @param args.options.where.expiration_timestamp - The minimum expiration timestamp for the domains.\n * @param args.options.where.subdomain - The specific subdomain to filter by.\n *\n * @returns An array of sanitized domain names owned by the specified account.\n * @group Implementation\n */\nexport async function getAccountDomains(\n  args: { aptosConfig: AptosConfig } & GetAccountDomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountDomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n          subdomain: { _eq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\n/**\n * Arguments for retrieving subdomains associated with a specific account.\n *\n * @param accountAddress - The address of the account for which to fetch subdomains.\n * @group Implementation\n */\nexport interface GetAccountSubdomainsArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\n/**\n * Retrieves a list of subdomains owned by a specified account address.\n * This function helps you identify all subdomains associated with a given account.\n *\n * @param args - The arguments for retrieving account subdomains.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for the query.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the result set.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.options.where.owner_address - The address of the account to filter by.\n * @param args.options.where.expiration_timestamp - The expiration timestamp to filter by.\n * @param args.options.where.subdomain - The subdomain condition to filter by.\n * @param args.accountAddress - The address of the account whose subdomains are being queried.\n * @group Implementation\n */\nexport async function getAccountSubdomains(\n  args: { aptosConfig: AptosConfig } & GetAccountSubdomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountSubdomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n          subdomain: { _neq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\n/**\n * Arguments for retrieving subdomains associated with a specific domain.\n *\n * @param domain - The domain for which to fetch subdomains.\n * @group Implementation\n */\nexport interface GetDomainSubdomainsArgs extends QueryNamesOptions {\n  domain: string;\n}\n\n/**\n * Retrieve the active subdomains associated with a specified domain.\n *\n * @param args - The arguments for retrieving subdomains.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.options - Optional parameters for the query.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the results.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.domain - The domain for which to retrieve subdomains.\n *\n * @returns An array of active subdomain names.\n * @group Implementation\n */\nexport async function getDomainSubdomains(\n  args: { aptosConfig: AptosConfig } & GetDomainSubdomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, domain } = args;\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getDomainSubdomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          domain: { _eq: domain },\n          subdomain: { _neq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName).filter(isActiveANSName);\n}\n\n/**\n * This function returns the expiration date in which a name is fully expired as\n * defined by the contract.  The grace period allows for names to be past\n * expiration for a certain amount of time before they are released to the\n * public. The names will not function as normal, but the owner can renew\n * without others taking ownership of the name. At the time of writing, the\n * contract specified 30 days.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - An AptosConfig object containing the configuration settings.\n * @returns The expiration date in ISO 8601 format.\n * @group Implementation\n */\nasync function getANSExpirationDate(args: { aptosConfig: AptosConfig }): Promise<string> {\n  const { aptosConfig } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  const [gracePeriodInSeconds] = await view<[number]>({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::config::reregistration_grace_sec`,\n      functionArguments: [],\n    },\n  });\n\n  const gracePeriodInDays = gracePeriodInSeconds / 60 / 60 / 24;\n  const now = () => new Date();\n  return new Date(now().setDate(now().getDate() - gracePeriodInDays)).toISOString();\n}\n\n/**\n * Renews a domain for a specified duration. This function allows you to extend the registration of a domain for one year.\n *\n * @param args - The parameters required to renew the domain.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.sender - The account that is sending the renewal transaction.\n * @param args.name - The name of the domain to renew.\n * @param args.years - The number of years to renew the domain for. Currently, only 1 year renewals are supported. (optional, default is 1)\n * @param args.options - Additional options for generating the transaction. (optional)\n * @throws Error if the name contains a subdomain or if the years parameter is not equal to 1.\n * @group Implementation\n */\nexport async function renewDomain(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  years?: 1;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, years = 1, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const renewalDuration = years * 31536000;\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  if (subdomainName) {\n    throw new Error(\"Subdomains cannot be renewed\");\n  }\n\n  if (years !== 1) {\n    throw new Error(\"Currently, only 1 year renewals are supported\");\n  }\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::renew_domain`,\n      functionArguments: [domainName, renewalDuration],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * The indexer returns ISO strings for expiration, however the contract works in\n * epoch milliseconds. This function converts the ISO string to epoch\n * milliseconds. In the future, if other properties need sanitization, this can\n * be extended.\n *\n * @param name - The ANS name response to sanitize.\n * @param name.expiration_timestamp - The expiration timestamp in ISO string format.\n * @group Implementation\n */\nfunction sanitizeANSName(name: GetANSNameResponse[0]): GetANSNameResponse[0] {\n  return {\n    ...name,\n    expiration_timestamp: new Date(name.expiration_timestamp).getTime(),\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport {\n  RegisterNameParameters,\n  getExpiration,\n  getOwnerAddress,\n  registerName,\n  getPrimaryName,\n  setPrimaryName,\n  getTargetAddress,\n  setTargetAddress,\n  renewDomain,\n  getName,\n  getAccountDomains,\n  GetAccountDomainsArgs,\n  GetAccountSubdomainsArgs,\n  getAccountSubdomains,\n  getAccountNames,\n  GetAccountNamesArgs,\n  getDomainSubdomains,\n  GetDomainSubdomainsArgs,\n} from \"../internal/ans\";\nimport { GetANSNameResponse } from \"../types\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * A class to handle all `ANS` operations.\n * @group ANS\n */\nexport class ANS {\n  /**\n   * Initializes a new instance of the Aptos class with the provided configuration.\n   * This allows you to interact with the Aptos blockchain using the specified network settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., mainnet, testnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet to use for funding accounts.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for connecting to the Aptos testnet\n   *     const config = new AptosConfig({ network: Network.TESTNET });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Retrieve the owner address of a specified domain name or subdomain name from the contract.\n   *\n   * @param args - The arguments for retrieving the owner address.\n   * @param args.name - A string representing the name of the domain or subdomain to retrieve the owner address for.\n   *\n   * @returns AccountAddress if the name is owned, undefined otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the owner address of \"test.aptos\"\n   *   const owner = await aptos.getOwnerAddress({ name: \"test.aptos\" });\n   *   console.log(owner); // Logs the owner address or undefined if not owned\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getOwnerAddress(args: { name: string }): Promise<AccountAddress | undefined> {\n    return getOwnerAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the expiration time of a domain name or subdomain name from the contract.\n   *\n   * @param args - The arguments for retrieving the expiration.\n   * @param args.name - A string of the name to retrieve.\n   *\n   * @returns number as a unix timestamp in milliseconds.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the expiration time for the domain \"test.aptos\"\n   *   const exp = await aptos.getExpiration({ name: \"test.aptos\" });\n   *\n   *   // Log the expiration date\n   *   console.log(new Date(exp)); // Outputs the expiration date\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getExpiration(args: { name: string }): Promise<number | undefined> {\n    return getExpiration({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the target address of a domain or subdomain name, which indicates the address the name points to for use on-chain.\n   * Note that the target address can point to addresses that do not own the name.\n   *\n   * @param args - The arguments for retrieving the target address.\n   * @param args.name - A string representing the name, which can be a primary name, a subdomain, or a combination (e.g.,\n   * \"primary\", \"primary.apt\", \"secondary.primary\", \"secondary.primary.apt\").\n   *\n   * @returns AccountAddress if the name has a target, undefined otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the target address for the specified domain name\n   *   const targetAddr = await aptos.getTargetAddress({ name: \"test.aptos\" });\n   *\n   *   console.log(targetAddr); // Logs the target address, e.g., 0x123...\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getTargetAddress(args: { name: string }): Promise<AccountAddress | undefined> {\n    return getTargetAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sets the target address of a domain or subdomain name, pointing it to a specified address for use on-chain.\n   * The target address can be different from the owner of the name.\n   *\n   * @param args - The arguments for setting the target address.\n   * @param args.sender - The account initiating the transaction.\n   * @param args.name - A string representing the domain or subdomain name (e.g., \"test.aptos\").\n   * @param args.address - The AccountAddressInput of the address to set the domain or subdomain to.\n   * @param args.options - Optional settings for generating the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Setting the target address for a domain name\n   *   const sender = Account.generate(); // replace with a real account\n   *   const address = \"0x1\"; // replace with a real account address\n   *\n   *   await aptos.setTargetAddress({\n   *     sender: sender,\n   *     name: \"test.aptos\",\n   *     address: address,\n   *   });\n   *\n   *   const targetAddress = await aptos.getTargetAddress({ name: \"test.aptos\" });\n   *   console.log(targetAddress); // Should log the address set for \"test.aptos\"\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async setTargetAddress(args: {\n    sender: Account;\n    name: string;\n    address: AccountAddressInput;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return setTargetAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the primary name for an account. An account can have multiple names, but only one primary name, which may not exist.\n   *\n   * @param args - The arguments for retrieving the primary name.\n   * @param args.address - An AccountAddressInput (address) of the account.\n   *\n   * @returns A string if the account has a primary name, undefined otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the primary name for the specified account address\n   *   const name = await aptos.getPrimaryName({ address: \"0x1\" }); // replace with a real account address\n   *   console.log(name);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getPrimaryName(args: { address: AccountAddressInput }): Promise<string | undefined> {\n    return getPrimaryName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sets the primary name for the sender account, allowing them to designate a single primary name among potentially multiple\n   * names. An account may not have a primary name.\n   *\n   * @param args - The arguments for setting the primary name.\n   * @param args.sender - The sender account.\n   * @param args.name - A string representing the name to set as primary (e.g., \"test.aptos\").\n   * @param args.options - Optional transaction options.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Set the primary name for the sender account\n   *   const sender = Account.generate(); // replace with a real account\n   *   await aptos.setPrimaryName({ sender, name: \"test.aptos\" });\n   *\n   *   const primaryName = await aptos.getPrimaryName({ address: sender.accountAddress });\n   *   console.log(\"Primary Name:\", primaryName); // Should log: \"Primary Name: test.aptos\"\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async setPrimaryName(args: {\n    sender: Account;\n    name?: string;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return setPrimaryName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Registers a new name.\n   *\n   * This function allows you to register a domain or subdomain name with specific expiration policies and options.\n   *\n   * @param args.sender - The sender account.\n   * @param args.name - A string of the name to register. This can be inclusive or exclusive of the .apt suffix. Examples include:\n   * \"test\", \"test.apt\", \"test.aptos.apt\", etc.\n   * @param args.expiration  - An object with the expiration policy of the name.\n   * @param args.expiration.policy - 'domain' | 'subdomain:follow-domain' | 'subdomain:independent'.\n   * - domain: Years is required and the name will expire after the given number of years.\n   * - subdomain:follow-domain: The name will expire at the same time as the domain name.\n   * - subdomain:independent: The name will expire at the given date.\n   * @param args.expiration.expirationDate - An epoch number in milliseconds of the date when the subdomain will expire. Only\n   * applicable when the policy is set to 'subdomain:independent'.\n   * @param args.transferable  - Determines if the subdomain being minted is soul-bound. Applicable only to subdomains.\n   * @param args.targetAddress optional - The address the domain name will resolve to. If not provided, the sender's address will\n   * be used.\n   * @param args.toAddress optional - The address to send the domain name to. If not provided, the transaction will be sent to the\n   * router.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Registering a subdomain name assuming def.apt is already registered and belongs to the sender alice.\n   *   const txn = await aptos.registerName({\n   *     sender: \"0x1\", // replace with a real sender account\n   *     name: \"test.aptos.apt\",\n   *     expiration: {\n   *       policy: \"subdomain:independent\",\n   *       expirationDate: Date.now() + 30 * 24 * 60 * 60 * 1000, // expires in 30 days\n   *     },\n   *   });\n   *\n   *   console.log(\"Transaction:\", txn);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async registerName(args: Omit<RegisterNameParameters, \"aptosConfig\">): Promise<SimpleTransaction> {\n    return registerName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Renews a domain name for one year.\n   * If a domain name was minted with V1 of the contract, it will automatically be upgraded to V2 via this transaction.\n   *\n   * @param args - The arguments for renewing the domain.\n   * @param args.sender - The sender account, which must be the domain owner.\n   * @param args.name - A string representing the domain to renew. Subdomains cannot be renewed.\n   * @param args.years - The number of years to renew the name. Currently, only one year is permitted.\n   * @param args.options - Optional transaction options.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Renew the domain \"test\" for one year\n   *   const transaction = await aptos.renewDomain({\n   *     sender: Account.generate(), // replace with a real account\n   *     name: \"test\"\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async renewDomain(args: {\n    sender: Account;\n    name: string;\n    years?: 1;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return renewDomain({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches a single name from the indexer based on the provided name argument.\n   *\n   * @param args - The arguments for retrieving the name.\n   * @param args.name - A string of the name to retrieve, e.g. \"test.aptos.apt\" or \"test.apt\" or \"test\".\n   *                    Can be inclusive or exclusive of the .apt suffix and can be a subdomain.\n   *\n   * @returns A promise of an ANSName or undefined if the name is not active.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Fetching a name from the indexer\n   *     const name = await aptos.getName({ name: \"test.aptos\" }); // replace with a real name\n   *     console.log(name);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getName(args: { name: string }): Promise<GetANSNameResponse[0] | undefined> {\n    return getName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all names for an account, including both top-level domains and subdomains.\n   *\n   * @param args - The arguments for fetching account names.\n   * @param args.accountAddress - An AccountAddressInput of the address to retrieve names for.\n   * @param args.options - Optional parameters for fetching names.\n   * @param args.options.offset - Optional, the offset to start from when fetching names.\n   * @param args.options.limit - Optional, a number of the names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise of an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch account names for a specific address\n   *   const accountNames = await aptos.getAccountNames({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify how many names to fetch\n   *       orderBy: \"name\", // specify the order by which to sort the names\n   *     },\n   *   });\n   *\n   *   console.log(accountNames);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getAccountNames(args: GetAccountNamesArgs): Promise<GetANSNameResponse> {\n    return getAccountNames({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all top-level domain names for a specified account.\n   *\n   * @param args - The arguments for retrieving account domains.\n   * @param args.accountAddress - An AccountAddressInput of the address to retrieve domain names for.\n   * @param args.options.offset - Optional, the offset to start from when fetching names.\n   * @param args.options.limit - Optional, a number of the names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise of an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching all top-level domain names for a specific account\n   *   const domains = await aptos.getAccountDomains({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify the number of names to fetch\n   *       offset: 0, // specify the offset for pagination\n   *       orderBy: \"created_at\", // specify the order by which to sort the names\n   *       where: {\n   *         // additional filters can be specified here\n   *       },\n   *     },\n   *   });\n   *\n   *   console.log(domains);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getAccountDomains(args: GetAccountDomainsArgs): Promise<GetANSNameResponse> {\n    return getAccountDomains({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all subdomain names for a specified account.\n   *\n   * @param args - The arguments for retrieving subdomains.\n   * @param args.accountAddress - The address to retrieve subdomain names for.\n   * @param args.options - Optional parameters for fetching subdomains.\n   * @param args.options.offset - The offset to start from when fetching names.\n   * @param args.options.limit - The number of names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise of an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Fetching subdomain names for a specific account\n   *     const subdomains = await aptos.getAccountSubdomains({\n   *         accountAddress: \"0x1\", // replace with a real account address\n   *         options: {\n   *             limit: 10, // specify the number of subdomains to fetch\n   *             offset: 0, // specify the offset for pagination\n   *             orderBy: \"name\", // specify the order by which to sort the names\n   *         },\n   *     });\n   *\n   *     console.log(subdomains);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getAccountSubdomains(args: GetAccountSubdomainsArgs): Promise<GetANSNameResponse> {\n    return getAccountSubdomains({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all subdomain names for a given domain, excluding the domain itself.\n   *\n   * @param args - The arguments for fetching subdomains.\n   * @param args.domain - A string of the domain name, e.g., \"test.apt\" or \"test\" (without the suffix of .apt).\n   * @param args.options - Optional parameters for fetching subdomains.\n   * @param args.options.offset - Optional, the offset to start from when fetching names.\n   * @param args.options.limit - Optional, the number of names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise that resolves to an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching subdomains for a specific domain\n   *   const subdomains = await aptos.getDomainSubdomains({\n   *     domain: \"test\", // replace with your domain\n   *     options: {\n   *       limit: 10, // specify the number of subdomains to fetch\n   *       offset: 0, // specify the starting point for fetching\n   *       orderBy: \"name\", // specify the order by which to sort the results\n   *     },\n   *   });\n   *\n   *   console.log(subdomains);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getDomainSubdomains(args: GetDomainSubdomainsArgs): Promise<GetANSNameResponse> {\n    return getDomainSubdomains({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/staking}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * staking namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, OrderByArg } from \"../types\";\nimport { GetDelegatedStakingActivitiesQuery, GetNumberOfDelegatorsQuery } from \"../types/generated/operations\";\nimport { GetDelegatedStakingActivities, GetNumberOfDelegators } from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\n\n/**\n * Retrieves the number of active delegators for a specified pool address.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.poolAddress - The address of the pool for which to retrieve the number of delegators.\n * @returns The number of active delegators for the specified pool address.\n * @group Implementation\n */\nexport async function getNumberOfDelegators(args: {\n  aptosConfig: AptosConfig;\n  poolAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, poolAddress } = args;\n  const address = AccountAddress.from(poolAddress).toStringLong();\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { where_condition: { pool_address: { _eq: address } } },\n  };\n  const data = await queryIndexer<GetNumberOfDelegatorsQuery>({ aptosConfig, query });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.num_active_delegator_per_pool[0] ? data.num_active_delegator_per_pool[0].num_active_delegator : 0;\n}\n\n/**\n * Retrieves the number of active delegators for all pools.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param [args.options] - Optional parameters for ordering the results.\n * @param args.options.orderBy - Specifies the order in which to return the results.\n * @returns The number of active delegators per pool.\n * @group Implementation\n */\nexport async function getNumberOfDelegatorsForAllPools(args: {\n  aptosConfig: AptosConfig;\n  options?: OrderByArg<GetNumberOfDelegatorsResponse[0]>;\n}): Promise<GetNumberOfDelegatorsResponse> {\n  const { aptosConfig, options } = args;\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { order_by: options?.orderBy },\n  };\n  const data = await queryIndexer<GetNumberOfDelegatorsQuery>({\n    aptosConfig,\n    query,\n  });\n  return data.num_active_delegator_per_pool;\n}\n\n/**\n * Retrieves the delegated staking activities for a specified delegator and pool.\n *\n * @param args - The parameters for the query.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.delegatorAddress - The address of the delegator whose activities are being queried.\n * @param args.poolAddress - The address of the pool associated with the delegated staking activities.\n * @returns The delegated staking activities for the specified delegator and pool.\n * @group Implementation\n */\nexport async function getDelegatedStakingActivities(args: {\n  aptosConfig: AptosConfig;\n  delegatorAddress: AccountAddressInput;\n  poolAddress: AccountAddressInput;\n}): Promise<GetDelegatedStakingActivitiesResponse> {\n  const { aptosConfig, delegatorAddress, poolAddress } = args;\n  const query = {\n    query: GetDelegatedStakingActivities,\n    variables: {\n      delegatorAddress: AccountAddress.from(delegatorAddress).toStringLong(),\n      poolAddress: AccountAddress.from(poolAddress).toStringLong(),\n    },\n  };\n  const data = await queryIndexer<GetDelegatedStakingActivitiesQuery>({ aptosConfig, query });\n  return data.delegated_staking_activities;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getDelegatedStakingActivities,\n  getNumberOfDelegators,\n  getNumberOfDelegatorsForAllPools,\n} from \"../internal/staking\";\nimport { AnyNumber, GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, OrderByArg } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `Staking` related queries on Aptos.\n * @group Staking\n */\nexport class Staking {\n  /**\n   * Creates an instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries the current number of delegators in a specified pool. Throws an error if the pool is not found.\n   *\n   * @param args - The parameters for the query.\n   * @param args.poolAddress - The address of the pool to query.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns The number of delegators for the given pool.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the number of delegators for a specific pool\n   *   const delegators = await aptos.getNumberOfDelegators({ poolAddress: \"0x1\" }); // replace with a real pool address\n   *   console.log(`Number of delegators: ${delegators}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  async getNumberOfDelegators(args: {\n    poolAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getNumberOfDelegators({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the current number of delegators across all pools.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional ordering options for the response.\n   * @returns GetNumberOfDelegatorsForAllPoolsResponse response type containing the number of delegators per pool.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the number of delegators for all pools\n   *   const delegators = await aptos.getNumberOfDelegatorsForAllPools();\n   *   console.log(delegators);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  async getNumberOfDelegatorsForAllPools(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: OrderByArg<GetNumberOfDelegatorsResponse[0]>;\n  }): Promise<GetNumberOfDelegatorsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getNumberOfDelegatorsForAllPools({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries delegated staking activities for a specific delegator and pool.\n   *\n   * @param args - The arguments for querying delegated staking activities.\n   * @param args.delegatorAddress - The address of the delegator.\n   * @param args.poolAddress - The address of the staking pool.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns The response containing delegated staking activities.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get delegated staking activities for a specific delegator and pool\n   *   const activities = await aptos.getDelegatedStakingActivities({\n   *     delegatorAddress: \"0x1\", // replace with a real delegator address\n   *     poolAddress: \"0x2\", // replace with a real pool address\n   *     minimumLedgerVersion: 1, // specify your own if needed\n   *   });\n   *\n   *   console.log(activities);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  async getDelegatedStakingActivities(args: {\n    delegatorAddress: AccountAddressInput;\n    poolAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetDelegatedStakingActivitiesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getDelegatedStakingActivities({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, AccountAddressInput } from \"../../core\";\nimport { generateTransaction } from \"../../internal/transactionSubmission\";\nimport {\n  InputGenerateTransactionPayloadData,\n  InputGenerateTransactionOptions,\n  AptosScriptComposer,\n  TransactionPayloadScript,\n  generateRawTransaction,\n} from \"../../transactions\";\nimport { MultiAgentTransaction } from \"../../transactions/instances/multiAgentTransaction\";\nimport { SimpleTransaction } from \"../../transactions/instances/simpleTransaction\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { Deserializer } from \"../../bcs\";\n\n/**\n * A class to handle all `Build` transaction operations.\n * @group Implementation\n */\nexport class Build {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.account - The account details for authentication.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // specify the network\n   *         nodeUrl: \"https://testnet.aptos.dev\", // specify the node URL\n   *     });\n   *\n   *     // Initialize the Aptos client\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Build a simple transaction.\n   *\n   * This function allows you to create a transaction with specified sender and data.\n   *\n   * @param args.sender - The sender account address.\n   * @param args.data - The transaction data.\n   * @param args.options - Optional transaction configurations.\n   * @param args.withFeePayer - Whether there is a fee payer for the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Build a simple transaction\n   *   const transaction = await aptos.transaction.simple({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [\"0x2\", 100], // replace with a real destination account address\n   *     },\n   *     options: {\n   *       gasUnitPrice: 100, // specify your own gas unit price if needed\n   *       maxGasAmount: 1000, // specify your own max gas amount if needed\n   *     },\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  async simple(args: {\n    sender: AccountAddressInput;\n    data: InputGenerateTransactionPayloadData;\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<SimpleTransaction> {\n    return generateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Build a transaction from a series of Move calls.\n   *\n   * This function allows you to create a transaction with a list of Move calls.\n   *\n   * Right now we only tested this logic with single signer and we will add support\n   * for mutli agent transactions if needed.\n   *\n   * @param args.sender - The sender account address.\n   * @param args.builder - The closure to construct the list of calls.\n   * @param args.options - Optional transaction configurations.\n   * @param args.withFeePayer - Whether there is a fee payer for the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Build a transaction from a chained series of Move calls.\n   *   const transaction = await aptos.transaction.build.scriptComposer({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     builder: builder: async (builder) => {\n   *       const coin = await builder.addBatchedCalls({\n   *          function: \"0x1::coin::withdraw\",\n   *          functionArguments: [CallArgument.new_signer(0), 1],\n   *          typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *        });\n   *\n   *        // Pass the returned value from the first function call to the second call\n   *        const fungibleAsset = await builder.addBatchedCalls({\n   *          function: \"0x1::coin::coin_to_fungible_asset\",\n   *          functionArguments: [coin[0]],\n   *          typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *        });\n   *\n   *        await builder.addBatchedCalls({\n   *          function: \"0x1::primary_fungible_store::deposit\",\n   *          functionArguments: [singleSignerED25519SenderAccount.accountAddress, fungibleAsset[0]],\n   *          typeArguments: [],\n   *        });\n   *        return builder;\n   *     },\n   *     options: {\n   *       gasUnitPrice: 100, // specify your own gas unit price if needed\n   *       maxGasAmount: 1000, // specify your own max gas amount if needed\n   *     },\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   */\n  async scriptComposer(args: {\n    sender: AccountAddressInput;\n    builder: (builder: AptosScriptComposer) => Promise<AptosScriptComposer>;\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<SimpleTransaction> {\n    const composer = new AptosScriptComposer(this.config);\n    await composer.init();\n    const builder = await args.builder(composer);\n    const bytes = builder.build();\n    const rawTxn = await generateRawTransaction({\n      aptosConfig: this.config,\n      payload: TransactionPayloadScript.load(new Deserializer(bytes)),\n      ...args,\n    });\n    return new SimpleTransaction(rawTxn, args.withFeePayer === true ? AccountAddress.ZERO : undefined);\n  }\n\n  /**\n   * Build a multi-agent transaction that allows multiple signers to authorize a transaction.\n   *\n   * @param args - The parameters for creating the multi-agent transaction.\n   * @param args.sender - The sender account address.\n   * @param args.data - The transaction data.\n   * @param args.secondarySignerAddresses - An array of the secondary signers' account addresses.\n   * @param args.options - Optional transaction configurations.\n   * @param args.withFeePayer - Whether there is a fee payer for the transaction.\n   *\n   * @returns MultiAgentTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Build a multi-agent transaction\n   *   const transaction = await aptos.multiAgent({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     data: {\n   *       // Transaction data structure\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [\"0x2\", 100], // replace with a real destination account address and amount\n   *     },\n   *     secondarySignerAddresses: [\"0x3\", \"0x4\"], // replace with real secondary signer addresses\n   *     options: {\n   *       // Optional transaction configurations\n   *       maxGasAmount: \"1000\",\n   *       gasUnitPrice: \"1\",\n   *     },\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  async multiAgent(args: {\n    sender: AccountAddressInput;\n    data: InputGenerateTransactionPayloadData;\n    secondarySignerAddresses: AccountAddressInput[];\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<MultiAgentTransaction> {\n    return generateTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PublicKey } from \"../../core\";\nimport { simulateTransaction } from \"../../internal/transactionSubmission\";\nimport { AnyRawTransaction, InputSimulateTransactionOptions } from \"../../transactions\";\nimport { UserTransactionResponse } from \"../../types\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { ValidateFeePayerDataOnSimulation } from \"./helpers\";\n\n/**\n * A class to handle all `Simulate` transaction operations.\n * @group Implementation\n */\nexport class Simulate {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your desired network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Simulates a transaction based on the provided parameters and returns the result.\n   * This function helps you understand the outcome of a transaction before executing it on the blockchain.\n   *\n   * @param args - The parameters for simulating the transaction.\n   * @param args.signerPublicKey - The public key of the signer for the transaction (optional).\n   * @param args.transaction - The raw transaction data to simulate.\n   * @param args.feePayerPublicKey - The public key of the fee payer (optional).\n   * @param args.options - Additional options for simulating the transaction (optional).\n   *\n   * @example\n   * ```typescript\n   * import {\n   *     Account,\n   *     Aptos,\n   *     AptosConfig,\n   *     Network,\n   * } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function example() {\n   *     let sender = Account.generate();\n   *     let receiver = Account.generate();\n   *\n   *     // 0. Set up the client and test accounts\n   *     const config = new AptosConfig({ network: Network.DEVNET });\n   *     const aptos = new Aptos(config);\n   *\n   *     await aptos.fundAccount({\n   *         accountAddress: sender.accountAddress,\n   *         amount: 100_000_000,\n   *     });\n   *\n   *     // 1. Build the transaction to preview the impact of it\n   *     const transaction = await aptos.transaction.build.simple({\n   *         sender: sender.accountAddress,\n   *         data: {\n   *             // All transactions on Aptos are implemented via smart contracts.\n   *             function: \"0x1::aptos_account::transfer\",\n   *             functionArguments: [receiver.accountAddress, 100],\n   *         },\n   *     });\n   *\n   *     // 2. Simulate to see what would happen if we execute this transaction\n   *     const [userTransactionResponse] = await aptos.transaction.simulate.simple({\n   *         signerPublicKey: sender.publicKey,\n   *         transaction,\n   *     });\n   *     console.log(userTransactionResponse);\n   *\n   *     // If the fee looks ok, continue to signing!\n   *     // ...\n   * }\n   *\n   * example();\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSimulation\n  async simple(args: {\n    signerPublicKey?: PublicKey;\n    transaction: AnyRawTransaction;\n    feePayerPublicKey?: PublicKey;\n    options?: InputSimulateTransactionOptions;\n  }): Promise<Array<UserTransactionResponse>> {\n    return simulateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Simulates a multi-agent transaction by generating a signed transaction and posting it to the Aptos full node.\n   * This function helps in understanding the outcome of a transaction involving multiple signers before it is executed.\n   *\n   * @param args - The parameters for simulating the transaction.\n   * @param args.signerPublicKey - The public key of the primary signer (optional).\n   * @param args.transaction - The raw transaction to be simulated.\n   * @param args.secondarySignersPublicKeys - An array of public keys for secondary signers (optional).\n   *        Each element of the array can be optional, allowing the corresponding key check to be skipped.\n   * @param args.feePayerPublicKey - The public key of the fee payer (optional).\n   * @param args.options - Options for simulating the transaction (optional).\n   *\n   * @example\n   * ```typescript\n   * import {\n   *     Account,\n   *     Aptos,\n   *     AptosConfig,\n   *     Network,\n   * } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function example() {\n   *     let sender1 = Account.generate();\n   *     let sender2 = Account.generate();\n   *     let receiver = Account.generate();\n   *\n   *     // 0. Set up the client and test accounts\n   *     const config = new AptosConfig({ network: Network.DEVNET });\n   *     const aptos = new Aptos(config);\n   *\n   *     await aptos.fundAccount({\n   *         accountAddress: sender.accountAddress,\n   *         amount: 100_000_000,\n   *     });\n   *\n   *     // 1. Build\n   *     console.log(\"\\n=== 1. Building the transaction ===\\n\");\n   *     const transaction = await aptos.transaction.build.multiAgent({\n   *     sender: sender1.accountAddress,\n   *     secondarySignerAddresses: [sender2.accountAddress],\n   *     data: {\n   *        // REPLACE WITH YOUR MULTI-AGENT FUNCTION HERE\n   *        function:\n   *          \"<REPLACE WITH YOUR MULTI AGENT MOVE ENTRY FUNCTION> (Syntax {address}::{module}::{function})\",\n   *          functionArguments: [],\n   *        },\n   *      });\n   *      console.log(\"Transaction:\", transaction);\n   *\n   *      // 2. Simulate (Optional)\n   *      console.log(\"\\n === 2. Simulating Response (Optional) === \\n\");\n   *      const [userTransactionResponse] = await aptos.transaction.simulate.multiAgent(\n   *        {\n   *          signerPublicKey: sender1.publicKey,\n   *          secondarySignersPublicKeys: [sender2.publicKey],\n   *          transaction,\n   *        },\n   *      );\n   *      console.log(userTransactionResponse);\n   *\n   *      // If the fee looks ok, continue to signing!\n   *      // ...\n   * }\n   *\n   * example();\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSimulation\n  async multiAgent(args: {\n    signerPublicKey?: PublicKey;\n    transaction: AnyRawTransaction;\n    secondarySignersPublicKeys?: Array<PublicKey | undefined>;\n    feePayerPublicKey?: PublicKey;\n    options?: InputSimulateTransactionOptions;\n  }): Promise<Array<UserTransactionResponse>> {\n    return simulateTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { submitTransaction } from \"../../internal/transactionSubmission\";\nimport { AccountAuthenticator, AnyRawTransaction } from \"../../transactions\";\nimport { PendingTransactionResponse } from \"../../types\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { ValidateFeePayerDataOnSubmission } from \"./helpers\";\n\n/**\n * A class to handle all `Submit` transaction operations.\n * @group Implementation\n */\nexport class Submit {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet for obtaining test tokens.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // Use the TESTNET for testing\n   *         nodeUrl: \"https://testnet.aptos.dev\", // Specify the node URL\n   *         faucetUrl: \"https://faucet.testnet.aptos.dev\" // Specify the faucet URL\n   *     });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Submits a transaction to the Aptos blockchain using the provided transaction details and authenticators.\n   * This function allows you to execute transactions securely by specifying the sender and optional fee payer authenticators.\n   *\n   * @param args - The arguments for submitting the transaction.\n   * @param args.transaction - The raw transaction data to be submitted.\n   * @param args.senderAuthenticator - The authenticator for the sender's account.\n   * @param [args.feePayerAuthenticator] - The optional authenticator for the fee payer's account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new sender account\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [Account.generate().accountAddress, 100], // Replace with a real destination account\n   *     },\n   *   });\n   *\n   *   // Submit the transaction\n   *   const response = await aptos.simple({\n   *     transaction,\n   *     senderAuthenticator: sender.getAuthenticator(), // Use the sender's authenticator\n   *   });\n   *\n   *   console.log(\"Transaction submitted:\", response);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSubmission\n  async simple(args: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    feePayerAuthenticator?: AccountAuthenticator;\n  }): Promise<PendingTransactionResponse> {\n    return submitTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Submits a multi-agent transaction to the Aptos network, allowing multiple signers to authorize the transaction.\n   * This function is useful for scenarios where a transaction requires approval from multiple accounts.\n   *\n   * @param args - The parameters for the multi-agent transaction.\n   * @param args.transaction - The raw transaction to be submitted.\n   * @param args.senderAuthenticator - The authenticator for the sender account.\n   * @param args.additionalSignersAuthenticators - An array of authenticators for additional signers.\n   * @param [args.feePayerAuthenticator] - An optional authenticator for the fee payer account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new sender account\n   *   const additionalSigner1 = Account.generate(); // Generate an additional signer account\n   *   const additionalSigner2 = Account.generate(); // Generate another additional signer account\n   *\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [additionalSigner1.accountAddress, 100],\n   *     },\n   *   });\n   *\n   *   const response = await aptos.multiAgent({\n   *     transaction,\n   *     senderAuthenticator: sender.getAuthenticator(), // Use the sender's authenticator\n   *     additionalSignersAuthenticators: [\n   *       additionalSigner1.getAuthenticator(), // Use the first additional signer's authenticator\n   *       additionalSigner2.getAuthenticator(), // Use the second additional signer's authenticator\n   *     ],\n   *   });\n   *\n   *   console.log(response); // Log the response from the transaction submission\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSubmission\n  async multiAgent(args: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    additionalSignersAuthenticators: Array<AccountAuthenticator>;\n    feePayerAuthenticator?: AccountAuthenticator;\n  }): Promise<PendingTransactionResponse> {\n    return submitTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","import EventEmitter from \"eventemitter3\";\nimport { TransactionWorkerEvents, TransactionWorker, TransactionWorkerEventsEnum } from \"../../transactions/management\";\nimport { InputGenerateTransactionPayloadData, InputGenerateTransactionOptions } from \"../../transactions\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { Account } from \"../../account\";\n\nexport class TransactionManagement extends EventEmitter<TransactionWorkerEvents> {\n  account!: Account;\n\n  transactionWorker!: TransactionWorker;\n\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the provided configuration settings.\n   * This allows you to interact with the Aptos blockchain using the specified network and options.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.account - Optional account settings for authentication.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // specify the network to use\n   *         nodeUrl: \"https://testnet.aptos.dev\" // replace with your node URL\n   *     });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized successfully.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Initializes the transaction worker using the provided sender account and begins listening for events.\n   * This function is essential for setting up the transaction processing environment.\n   *\n   * @param args - The arguments for starting the transaction worker.\n   * @param args.sender - The sender account to sign and submit the transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     const sender = Account.generate(); // Generate a new account for sending transactions\n   *\n   *     // Start the transaction worker with the sender account\n   *     aptos.start({ sender });\n   *\n   *     console.log(\"Transaction worker started with sender:\", sender.accountAddress);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  private start(args: { sender: Account }): void {\n    const { sender } = args;\n    this.account = sender;\n    this.transactionWorker = new TransactionWorker(this.config, sender);\n\n    this.transactionWorker.start();\n    this.registerToEvents();\n  }\n\n  /**\n   * Pushes transaction data to the transaction worker for processing.\n   *\n   * @param args.data An array of transaction payloads to be processed.\n   * @param args.options Optional. Transaction generation configurations (excluding accountSequenceNumber).\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Prepare transaction payloads\n   *   const payloads = [\n   *      {}, // Build your first transaction payload\n   *      {}, // Build your second transaction payload\n   *   ];\n   *\n   *   // Push transaction data to the worker\n   *   aptos.push({\n   *     data: payloads,\n   *     {}, // Specify options as needed\n   *   });\n   *\n   *   console.log(\"Transaction data pushed successfully.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  private push(args: {\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): void {\n    const { data, options } = args;\n\n    for (const d of data) {\n      this.transactionWorker.push(d, options);\n    }\n  }\n\n  /**\n   * Starts listening to transaction worker events, allowing the application to respond to transaction status changes.\n   * This function enables the application to handle events such as transaction sent, execution success, or failure.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Register to listen for transaction events\n   *   aptos.registerToEvents();\n   *\n   *   // You can send a transaction here to see the events in action\n   *   const sender = Account.generate(); // replace with a real account\n   *   const destination = Account.generate(); // replace with a real account\n   *\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [destination.accountAddress, 100],\n   *     },\n   *   });\n   *\n   *   await aptos.transaction.send(transaction);\n   *\n   *   console.log(\"Transaction sent and events registered.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  private registerToEvents() {\n    // TODO - Should we ask events to listen to this as an input?\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionSent, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionSent, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionSendFailed, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionSendFailed, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionExecuted, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionExecuted, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionExecutionFailed, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionExecutionFailed, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.ExecutionFinish, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.ExecutionFinish, data);\n    });\n  }\n\n  /**\n   * Send batch transactions for a single account.\n   *\n   * This function uses a transaction worker that receives payloads to be processed\n   * and submitted to chain.\n   * Note that this process is best for submitting multiple transactions that\n   * don't rely on each other, i.e. batch funds, batch token mints, etc.\n   *\n   * If any worker failure, the functions throws an error.\n   *\n   * @param args.sender The sender account to sign and submit the transaction\n   * @param args.data An array of transaction payloads\n   * @param args.options optional. Transaction generation configurations (excluding accountSequenceNumber)\n   *\n   * @return void. Throws if any error\n   * @group Implementation\n   */\n  forSingleAccount(args: {\n    sender: Account;\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): void {\n    try {\n      const { sender, data, options } = args;\n      this.start({ sender });\n\n      this.push({ data, options });\n    } catch (error: any) {\n      throw new Error(`failed to submit transactions with error: ${error}`);\n    }\n  }\n}\n","/**\n * A wrapper that handles and manages an account sequence number.\n *\n * Submit up to `maximumInFlight` transactions per account in parallel with a timeout of `sleepTime`\n * If local assumes `maximumInFlight` are in flight, determine the actual committed state from the network\n * If there are less than `maximumInFlight` due to some being committed, adjust the window\n * If `maximumInFlight` are in flight, wait `sleepTime` seconds before re-evaluating\n * If ever waiting more than `maxWaitTime` restart the sequence number to the current on-chain state\n *\n * Assumptions:\n * Accounts are expected to be managed by a single AccountSequenceNumber and not used otherwise.\n * They are initialized to the current on-chain state, so if there are already transactions in\n * flight, they may take some time to reset.\n * Accounts are automatically initialized if not explicitly\n *\n * Notes:\n * This is co-routine safe, that is many async tasks can be reading from this concurrently.\n * The state of an account cannot be used across multiple AccountSequenceNumber services.\n * The synchronize method will create a barrier that prevents additional nextSequenceNumber\n * calls until it is complete.\n * This only manages the distribution of sequence numbers it does not help handle transaction\n * failures.\n * If a transaction fails, you should call synchronize and wait for timeouts.\n * @group Implementation\n * @category Transactions\n */\n\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { Account } from \"../../account\";\nimport { getInfo } from \"../../internal/account\";\nimport { nowInSeconds, sleep } from \"../../utils/helpers\";\n\n/**\n * Represents an account's sequence number management for transaction handling on the Aptos blockchain.\n * This class provides methods to retrieve the next available sequence number, synchronize with the on-chain sequence number,\n * and manage local sequence numbers while ensuring thread safety.\n *\n * @param aptosConfig - The configuration settings for Aptos.\n * @param account - The account associated with the sequence number.\n * @param maxWaitTime - The maximum time to wait for a transaction to commit.\n * @param maximumInFlight - The maximum number of transactions that can be in flight at once.\n * @param sleepTime - The time to wait before retrying to get the sequence number.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountSequenceNumber {\n  readonly aptosConfig: AptosConfig;\n\n  readonly account: Account;\n\n  // sequence number on chain\n  // TODO: Change to Uncommitted\n  lastUncommintedNumber: bigint | null = null;\n\n  // local sequence number\n  currentNumber: bigint | null = null;\n\n  /**\n   * We want to guarantee that we preserve ordering of workers to requests.\n   *\n   * `lock` is used to try to prevent multiple coroutines from accessing a shared resource at the same time,\n   * which can result in race conditions and data inconsistency.\n   * This code actually doesn't do it though, since we aren't giving out a slot, it is still somewhat a race condition.\n   *\n   * The ideal solution is likely that each thread grabs the next number from an incremental integer.\n   * When they complete, they increment that number and that entity is able to enter the `lock`.\n   * That would guarantee ordering.\n   * @group Implementation\n   * @category Transactions\n   */\n  lock = false;\n\n  maxWaitTime: number;\n\n  maximumInFlight: number;\n\n  sleepTime: number;\n\n  /**\n   * Creates an instance of the class with the specified configuration and account details.\n   * This constructor initializes the necessary parameters for managing Aptos transactions.\n   *\n   * @param aptosConfig - The configuration settings for Aptos.\n   * @param account - The account associated with the Aptos transactions.\n   * @param maxWaitTime - The maximum time to wait for a transaction to be processed, in milliseconds.\n   * @param maximumInFlight - The maximum number of transactions that can be in flight at the same time.\n   * @param sleepTime - The time to sleep between transaction checks, in milliseconds.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    aptosConfig: AptosConfig,\n    account: Account,\n    maxWaitTime: number,\n    maximumInFlight: number,\n    sleepTime: number,\n  ) {\n    this.aptosConfig = aptosConfig;\n    this.account = account;\n    this.maxWaitTime = maxWaitTime;\n    this.maximumInFlight = maximumInFlight;\n    this.sleepTime = sleepTime;\n  }\n\n  /**\n   * Returns the next available sequence number for this account.\n   * This function ensures that the sequence number is updated and synchronized, handling potential delays in transaction commits.\n   *\n   * @returns {BigInt} The next available sequence number.\n   * @group Implementation\n   * @category Transactions\n   */\n  async nextSequenceNumber(): Promise<bigint | null> {\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n    let nextNumber = BigInt(0);\n    try {\n      if (this.lastUncommintedNumber === null || this.currentNumber === null) {\n        await this.initialize();\n      }\n\n      if (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n        await this.update();\n\n        const startTime = nowInSeconds();\n        while (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n          await sleep(this.sleepTime);\n          if (nowInSeconds() - startTime > this.maxWaitTime) {\n            /* eslint-disable no-console */\n            console.warn(\n              `Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`,\n            );\n            await this.initialize();\n          } else {\n            await this.update();\n          }\n        }\n      }\n      nextNumber = this.currentNumber!;\n      this.currentNumber! += BigInt(1);\n    } catch (e) {\n      console.error(\"error in getting next sequence number for this account\", e);\n    } finally {\n      this.lock = false;\n    }\n    return nextNumber;\n  }\n\n  /**\n   * Initializes this account with the sequence number on chain.\n   *\n   * @returns {Promise<void>} A promise that resolves when the account has been initialized.\n   *\n   * @throws {Error} Throws an error if the account information cannot be retrieved.\n   * @group Implementation\n   * @category Transactions\n   */\n  async initialize(): Promise<void> {\n    const { sequence_number: sequenceNumber } = await getInfo({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress,\n    });\n    this.currentNumber = BigInt(sequenceNumber);\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n  }\n\n  /**\n   * Updates this account's sequence number with the one on-chain.\n   *\n   * @returns The on-chain sequence number for this account.\n   * @group Implementation\n   * @category Transactions\n   */\n  async update(): Promise<bigint> {\n    const { sequence_number: sequenceNumber } = await getInfo({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress,\n    });\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n    return this.lastUncommintedNumber;\n  }\n\n  /**\n   * Synchronizes the local sequence number with the sequence number on-chain for the specified account.\n   * This function polls the network until all submitted transactions have either been committed or until the maximum wait time has elapsed.\n   *\n   * @throws {Error} Throws an error if there is an issue synchronizing the account sequence number with the one on-chain.\n   * @group Implementation\n   * @category Transactions\n   */\n  async synchronize(): Promise<void> {\n    if (this.lastUncommintedNumber === this.currentNumber) return;\n\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n\n    try {\n      await this.update();\n      const startTime = nowInSeconds();\n      while (this.lastUncommintedNumber !== this.currentNumber) {\n        if (nowInSeconds() - startTime > this.maxWaitTime) {\n          /* eslint-disable no-console */\n          console.warn(\n            `Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`,\n          );\n          await this.initialize();\n        } else {\n          await sleep(this.sleepTime);\n          await this.update();\n        }\n      }\n    } catch (e) {\n      console.error(\"error in synchronizing this account sequence number with the one on chain\", e);\n    } finally {\n      this.lock = false;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport EventEmitter from \"eventemitter3\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { Account } from \"../../account\";\nimport { waitForTransaction } from \"../../internal/transaction\";\nimport { generateTransaction, signAndSubmitTransaction } from \"../../internal/transactionSubmission\";\nimport { PendingTransactionResponse, TransactionResponse } from \"../../types\";\nimport { InputGenerateTransactionOptions, InputGenerateTransactionPayloadData } from \"../types\";\nimport { AccountSequenceNumber } from \"./accountSequenceNumber\";\nimport { AsyncQueue, AsyncQueueCancelledError } from \"./asyncQueue\";\nimport { SimpleTransaction } from \"../instances/simpleTransaction\";\n\n/**\n * @group Implementation\n * @category Transactions\n */\nexport const promiseFulfilledStatus = \"fulfilled\";\n\n/**\n * Events emitted by the transaction worker during its operation, allowing the dapp to respond to various transaction states.\n * @group Implementation\n * @category Transactions\n */\nexport enum TransactionWorkerEventsEnum {\n  // fired after a transaction gets sent to the chain\n  TransactionSent = \"transactionSent\",\n  // fired if there is an error sending the transaction to the chain\n  TransactionSendFailed = \"transactionSendFailed\",\n  // fired when a single transaction has executed successfully\n  TransactionExecuted = \"transactionExecuted\",\n  // fired if a single transaction fails in execution\n  TransactionExecutionFailed = \"transactionExecutionFailed\",\n  // fired when the worker has finished its job / when the queue has been emptied\n  ExecutionFinish = \"executionFinish\",\n}\n\n/**\n * Defines the events emitted by the transaction worker during various stages of transaction processing. *\n * @group Implementation\n * @category Transactions\n */\nexport interface TransactionWorkerEvents {\n  transactionSent: (data: SuccessEventData) => void;\n  transactionSendFailed: (data: FailureEventData) => void;\n  transactionExecuted: (data: SuccessEventData) => void;\n  transactionExecutionFailed: (data: FailureEventData) => void;\n  executionFinish: (data: ExecutionFinishEventData) => void;\n}\n\n/**\n * The payload for when the worker has finished its job.\n * @group Implementation\n * @category Transactions\n */\nexport type ExecutionFinishEventData = {\n  message: string;\n};\n\n/**\n * The payload for a success event.\n * @group Implementation\n * @category Transactions\n */\nexport type SuccessEventData = {\n  message: string;\n  transactionHash: string;\n};\n\n/**\n * The payload for a failure event.\n * @group Implementation\n * @category Transactions\n */\nexport type FailureEventData = {\n  message: string;\n  error: string;\n};\n\n/**\n * TransactionWorker provides a simple framework for receiving payloads to be processed.\n *\n * Once one `start()` the process and pushes a new transaction, the worker acquires\n * the current account's next sequence number (by using the AccountSequenceNumber class),\n * generates a signed transaction and pushes an async submission process into the `outstandingTransactions` queue.\n * At the same time, the worker processes transactions by reading the `outstandingTransactions` queue\n * and submits the next transaction to chain, it\n * 1) waits for resolution of the submission process or get pre-execution validation error\n * and 2) waits for the resolution of the execution process or get an execution error.\n * The worker fires events for any submission and/or execution success and/or failure.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionWorker extends EventEmitter<TransactionWorkerEvents> {\n  readonly aptosConfig: AptosConfig;\n\n  readonly account: Account;\n\n  // current account sequence number\n  // TODO: Rename Sequnce -> Sequence\n  readonly accountSequnceNumber: AccountSequenceNumber;\n\n  readonly taskQueue: AsyncQueue<() => Promise<void>> = new AsyncQueue<() => Promise<void>>();\n\n  // process has started\n  started: boolean;\n\n  /**\n   * transactions payloads waiting to be generated and signed\n   *\n   * TODO support entry function payload from ABI builder\n   * @group Implementation\n   * @category Transactions\n   */\n  transactionsQueue = new AsyncQueue<\n    [InputGenerateTransactionPayloadData, InputGenerateTransactionOptions | undefined]\n  >();\n\n  /**\n   * signed transactions waiting to be submitted\n   * @group Implementation\n   * @category Transactions\n   */\n  outstandingTransactions = new AsyncQueue<[Promise<PendingTransactionResponse>, bigint]>();\n\n  /**\n   * transactions that have been submitted to chain\n   * @group Implementation\n   * @category Transactions\n   */\n  sentTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * transactions that have been committed to chain\n   * @group Implementation\n   * @category Transactions\n   */\n  executedTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * Initializes a new instance of the class, providing a framework for receiving payloads to be processed.\n   *\n   * @param aptosConfig - A configuration object for Aptos.\n   * @param account - The account that will be used for sending transactions.\n   * @param maxWaitTime - The maximum wait time to wait before re-syncing the sequence number to the current on-chain state,\n   * default is 30 seconds.\n   * @param maximumInFlight - The maximum number of transactions that can be submitted per account, default is 100.\n   * @param sleepTime - The time to wait in seconds before re-evaluating if the maximum number of transactions are in flight,\n   * default is 10 seconds.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    aptosConfig: AptosConfig,\n    account: Account,\n    maxWaitTime: number = 30,\n    maximumInFlight: number = 100,\n    sleepTime: number = 10,\n  ) {\n    super();\n    this.aptosConfig = aptosConfig;\n    this.account = account;\n    this.started = false;\n    this.accountSequnceNumber = new AccountSequenceNumber(\n      aptosConfig,\n      account,\n      maxWaitTime,\n      maximumInFlight,\n      sleepTime,\n    );\n  }\n\n  /**\n   * Submits the next transaction for the account by generating it with the current sequence number\n   * and adding it to the outstanding transaction queue for processing.\n   * This function continues to submit transactions until there are no more to process.\n   *\n   * @throws {Error} Throws an error if the transaction submission fails.\n   * @group Implementation\n   * @category Transactions\n   */\n  async submitNextTransaction() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        const sequenceNumber = await this.accountSequnceNumber.nextSequenceNumber();\n        if (sequenceNumber === null) return;\n        const transaction = await this.generateNextTransaction(this.account, sequenceNumber);\n        if (!transaction) return;\n        const pendingTransaction = signAndSubmitTransaction({\n          aptosConfig: this.aptosConfig,\n          transaction,\n          signer: this.account,\n        });\n        await this.outstandingTransactions.enqueue([pendingTransaction, sequenceNumber]);\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      throw new Error(`Submit transaction failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Reads the outstanding transaction queue and submits the transactions to the chain.\n   * This function processes each transaction, checking their status and emitting events based on whether they were successfully\n   * sent or failed.\n   *\n   * @throws {Error} Throws an error if the process execution fails.\n   * @event TransactionWorkerEventsEnum.TransactionSent - Emitted when a transaction has been successfully committed to the chain.\n   * @event TransactionWorkerEventsEnum.TransactionSendFailed - Emitted when a transaction fails to commit, along with the error\n   * reason.\n   * @event TransactionWorkerEventsEnum.ExecutionFinish - Emitted when the execution of transactions is complete.\n   * @group Implementation\n   * @category Transactions\n   */\n  async processTransactions() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        const awaitingTransactions = [];\n        const sequenceNumbers = [];\n        let [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n        awaitingTransactions.push(pendingTransaction);\n        sequenceNumbers.push(sequenceNumber);\n\n        while (!this.outstandingTransactions.isEmpty()) {\n          [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n          awaitingTransactions.push(pendingTransaction);\n          sequenceNumbers.push(sequenceNumber);\n        }\n        // send awaiting transactions to chain\n        const sentTransactions = await Promise.allSettled(awaitingTransactions);\n        for (let i = 0; i < sentTransactions.length && i < sequenceNumbers.length; i += 1) {\n          // check sent transaction status\n          const sentTransaction = sentTransactions[i];\n          sequenceNumber = sequenceNumbers[i];\n          if (sentTransaction.status === promiseFulfilledStatus) {\n            // transaction sent to chain\n            this.sentTransactions.push([sentTransaction.value.hash, sequenceNumber, null]);\n            // check sent transaction execution\n            this.emit(TransactionWorkerEventsEnum.TransactionSent, {\n              message: `transaction hash ${sentTransaction.value.hash} has been committed to chain`,\n              transactionHash: sentTransaction.value.hash,\n            });\n            await this.checkTransaction(sentTransaction, sequenceNumber);\n          } else {\n            // send transaction failed\n            this.sentTransactions.push([sentTransaction.status, sequenceNumber, sentTransaction.reason]);\n            this.emit(TransactionWorkerEventsEnum.TransactionSendFailed, {\n              message: `failed to commit transaction ${this.sentTransactions.length} with error ${sentTransaction.reason}`,\n              error: sentTransaction.reason,\n            });\n          }\n        }\n        this.emit(TransactionWorkerEventsEnum.ExecutionFinish, {\n          message: `execute ${sentTransactions.length} transactions finished`,\n        });\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      throw new Error(`Process execution failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Once a transaction has been sent to the chain, this function checks for its execution status.\n   * @param sentTransaction - The transaction that was sent to the chain and is now waiting to be executed.\n   * @param sequenceNumber - The account's sequence number that was sent with the transaction.\n   * @group Implementation\n   * @category Transactions\n   */\n  async checkTransaction(sentTransaction: PromiseFulfilledResult<PendingTransactionResponse>, sequenceNumber: bigint) {\n    try {\n      const waitFor: Array<Promise<TransactionResponse>> = [];\n      waitFor.push(waitForTransaction({ aptosConfig: this.aptosConfig, transactionHash: sentTransaction.value.hash }));\n      const sentTransactions = await Promise.allSettled(waitFor);\n\n      for (let i = 0; i < sentTransactions.length; i += 1) {\n        const executedTransaction = sentTransactions[i];\n        if (executedTransaction.status === promiseFulfilledStatus) {\n          // transaction executed to chain\n          this.executedTransactions.push([executedTransaction.value.hash, sequenceNumber, null]);\n          this.emit(TransactionWorkerEventsEnum.TransactionExecuted, {\n            message: `transaction hash ${executedTransaction.value.hash} has been executed on chain`,\n            transactionHash: sentTransaction.value.hash,\n          });\n        } else {\n          // transaction execution failed\n          this.executedTransactions.push([executedTransaction.status, sequenceNumber, executedTransaction.reason]);\n          this.emit(TransactionWorkerEventsEnum.TransactionExecutionFailed, {\n            message: `failed to execute transaction ${this.executedTransactions.length} with error ${executedTransaction.reason}`,\n            error: executedTransaction.reason,\n          });\n        }\n      }\n    } catch (error: any) {\n      throw new Error(`Check transaction failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Pushes a transaction to the transactions queue for processing.\n   *\n   * @param transactionData - The transaction payload containing necessary details.\n   * @param transactionData.abi - For all entry function payloads, the ABI to skip remote ABI lookups.\n   * @param options - Optional parameters for transaction configuration.\n   * @param options.maxGasAmount - Maximum gas amount for the transaction.\n   * @param options.gasUnitPrice - Gas unit price for the transaction.\n   * @param options.expireTimestamp - Expiration timestamp on the transaction.\n   * @param options.accountSequenceNumber - The sequence number for the transaction.\n   * @group Implementation\n   * @category Transactions\n   */\n  async push(\n    transactionData: InputGenerateTransactionPayloadData,\n    options?: InputGenerateTransactionOptions,\n  ): Promise<void> {\n    this.transactionsQueue.enqueue([transactionData, options]);\n  }\n\n  /**\n   * Generates a signed transaction that can be submitted to the chain.\n   *\n   * @param account - An Aptos account used as the sender of the transaction.\n   * @param sequenceNumber - A sequence number the transaction will be generated with.\n   * @returns A signed transaction object or undefined if the transaction queue is empty.\n   * @group Implementation\n   * @category Transactions\n   */\n  async generateNextTransaction(account: Account, sequenceNumber: bigint): Promise<SimpleTransaction | undefined> {\n    if (this.transactionsQueue.isEmpty()) return undefined;\n    const [transactionData, options] = await this.transactionsQueue.dequeue();\n    return generateTransaction({\n      aptosConfig: this.aptosConfig,\n      sender: account.accountAddress,\n      data: transactionData,\n      options: { ...options, accountSequenceNumber: sequenceNumber },\n    });\n  }\n\n  /**\n   * Starts transaction submission and processing by executing tasks from the queue until it is cancelled.\n   *\n   * @throws {Error} Throws an error if unable to start transaction batching.\n   * @group Implementation\n   * @category Transactions\n   */\n  async run() {\n    try {\n      while (!this.taskQueue.isCancelled()) {\n        const task = await this.taskQueue.dequeue();\n        await task();\n      }\n    } catch (error: any) {\n      throw new Error(`Unable to start transaction batching: ${error}`);\n    }\n  }\n\n  /**\n   * Starts the transaction management process.\n   *\n   * @throws {Error} Throws an error if the worker has already started.\n   * @group Implementation\n   * @category Transactions\n   */\n  start() {\n    if (this.started) {\n      throw new Error(\"worker has already started\");\n    }\n    this.started = true;\n    this.taskQueue.enqueue(() => this.submitNextTransaction());\n    this.taskQueue.enqueue(() => this.processTransactions());\n    this.run();\n  }\n\n  /**\n   * Stops the transaction management process.\n   *\n   * @throws {Error} Throws an error if the worker has already stopped.\n   * @group Implementation\n   * @category Transactions\n   */\n  stop() {\n    if (this.taskQueue.isCancelled()) {\n      throw new Error(\"worker has already stopped\");\n    }\n    this.started = false;\n    this.taskQueue.cancel();\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getGasPriceEstimation,\n  getTransactionByHash,\n  getTransactionByVersion,\n  getTransactions,\n  isTransactionPending,\n  waitForTransaction,\n} from \"../internal/transaction\";\nimport {\n  AnyNumber,\n  CommittedTransactionResponse,\n  GasEstimation,\n  HexInput,\n  PaginationArgs,\n  PendingTransactionResponse,\n  TransactionResponse,\n  WaitForTransactionOptions,\n} from \"../types\";\nimport {\n  FeePayerOrFeePayerAuthenticatorOrNeither,\n  getSigningMessage,\n  publicPackageTransaction,\n  signAndSubmitAsFeePayer,\n  signAndSubmitTransaction,\n  signAsFeePayer,\n  signTransaction,\n} from \"../internal/transactionSubmission\";\nimport {\n  AccountAuthenticator,\n  AnyRawTransaction,\n  InputGenerateTransactionOptions,\n  InputGenerateTransactionPayloadData,\n} from \"../transactions\";\nimport { AccountAddressInput, AuthenticationKey, Ed25519PrivateKey } from \"../core\";\nimport { Account } from \"../account\";\nimport { Build } from \"./transactionSubmission/build\";\nimport { Simulate } from \"./transactionSubmission/simulate\";\nimport { Submit } from \"./transactionSubmission/submit\";\nimport { TransactionManagement } from \"./transactionSubmission/management\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\nimport { rotateAuthKey } from \"../internal/account\";\n\n/**\n * Represents a transaction in the Aptos blockchain,\n * providing methods to build, simulate, submit, and manage transactions.\n * This class encapsulates functionalities for querying transaction details,\n * estimating gas prices, signing transactions, and handling transaction states.\n *\n * This class is used as part of the Aptos object, so should be called like so:\n * @example\n * ```typescript\n * import { Account, Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n * const COIN_STORE = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n * const ALICE_INITIAL_BALANCE = 100_000_000;\n * const TRANSFER_AMOUNT = 100;\n *\n * async function example() {\n *   console.log(\n *     \"This example will create two accounts (Alice and Bob), fund them, and transfer between them.\",\n *   );\n *\n *   // Set up the client\n *   const config = new AptosConfig({ network: Network.DEVNET });\n *   const aptos = new Aptos(config);\n *\n *   // Generate two account credentials\n *   // Each account has a private key, a public key, and an address\n *   const alice = Account.generate();\n *   const bob = Account.generate();\n *\n *   console.log(\"=== Addresses ===\\n\");\n *   console.log(`Alice's address is: ${alice.accountAddress}`);\n *   console.log(`Bob's address is: ${bob.accountAddress}`);\n *\n *   // Fund the accounts using a faucet\n *   console.log(\"\\n=== Funding accounts ===\\n\");\n *\n *   await aptos.fundAccount({\n *     accountAddress: alice.accountAddress,\n *     amount: ALICE_INITIAL_BALANCE,\n *   });\n *\n *   // Send a transaction from Alice's account to Bob's account\n *   const txn = await aptos.transaction.build.simple({\n *     sender: alice.accountAddress,\n *     data: {\n *       // All transactions on Aptos are implemented via smart contracts.\n *       function: \"0x1::aptos_account::transfer\",\n *       functionArguments: [bob.accountAddress, 100],\n *     },\n *   });\n *\n *   console.log(\"\\n=== Transfer transaction ===\\n\");\n *   // Both signs and submits\n *   const committedTxn = await aptos.signAndSubmitTransaction({\n *     signer: alice,\n *     transaction: txn,\n *  });\n *   // Waits for Aptos to verify and execute the transaction\n *   const executedTransaction = await aptos.waitForTransaction({\n *     transactionHash: committedTxn.hash,\n *   });\n *   console.log(\"Transaction hash:\", executedTransaction.hash);\n *\n *  console.log(\"\\n=== Balances after transfer ===\\n\");\n *  const newAliceAccountBalance = await aptos.getAccountResource({\n *    accountAddress: alice.accountAddress,\n *    resourceType: COIN_STORE,\n *  });\n *  const newAliceBalance = Number(newAliceAccountBalance.coin.value);\n *  console.log(`Alice's balance is: ${newAliceBalance}`);\n *\n *  const newBobAccountBalance = await aptos.getAccountResource({\n *    accountAddress: bob.accountAddress,\n *    resourceType: COIN_STORE,\n *  });\n *  const newBobBalance = Number(newBobAccountBalance.coin.value);\n *  console.log(`Bob's balance is: ${newBobBalance}`);\n * }\n *\n * example();\n * ```\n * @group Transaction\n */\nexport class Transaction {\n  readonly config: AptosConfig;\n\n  readonly build: Build;\n\n  readonly simulate: Simulate;\n\n  readonly submit: Submit;\n\n  readonly batch: TransactionManagement;\n\n  /**\n   * Creates an instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., Testnet, Mainnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client instance\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify the network\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client created successfully:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n    this.build = new Build(this.config);\n    this.simulate = new Simulate(this.config);\n    this.submit = new Submit(this.config);\n    this.batch = new TransactionManagement(this.config);\n  }\n\n  /**\n   * Queries on-chain transactions, excluding pending transactions.\n   * Use this function to retrieve historical transactions from the blockchain.\n   *\n   * @param args Optional parameters for pagination.\n   * @param args.options Optional pagination options.\n   * @param args.options.offset The number of the transaction to start with.\n   * @param args.options.limit The number of results to return.\n   *\n   * @returns An array of on-chain transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch transactions with pagination\n   *   const transactions = await aptos.getTransactions({\n   *     options: {\n   *       offset: 0, // Start from the first transaction\n   *       limit: 10, // Limit to 10 results\n   *     },\n   *   });\n   *\n   *   console.log(transactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getTransactions(args?: { options?: PaginationArgs }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transaction by version. This function will not return pending transactions.\n   *\n   * @param args - The arguments for querying the transaction.\n   * @param args.ledgerVersion - Transaction version is an unsigned 64-bit number.\n   * @returns On-chain transaction. Only on-chain transactions have versions, so this\n   * function cannot be used to query pending transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching a transaction by its version\n   *   const transaction = await aptos.getTransactionByVersion({ ledgerVersion: 1 }); // replace 1 with a real version\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getTransactionByVersion(args: { ledgerVersion: AnyNumber }): Promise<TransactionResponse> {\n    return getTransactionByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transactions by their transaction hash, returning both pending and committed transactions.\n   *\n   * @param args - The arguments for querying the transaction.\n   * @param args.transactionHash - The transaction hash should be a hex-encoded bytes string with a 0x prefix.\n   * @returns The transaction from the mempool (pending) or the on-chain (committed) transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch a transaction by its hash\n   *   const transaction = await aptos.getTransactionByHash({ transactionHash: \"0x123\" }); // replace with a real transaction hash\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getTransactionByHash(args: { transactionHash: HexInput }): Promise<TransactionResponse> {\n    return getTransactionByHash({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Defines if the specified transaction is currently in a pending state.\n   * This function helps you determine the status of a transaction using its hash.\n   *\n   * @param args - The arguments for the function.\n   * @param args.transactionHash - A hash of the transaction in hexadecimal format.\n   * @returns `true` if the transaction is in a pending state and `false` otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Check if the transaction is pending using its hash\n   *   const isPendingTransaction = await aptos.isPendingTransaction({ transactionHash: \"0x123\" }); // replace with a real transaction hash\n   *   console.log(\"Is the transaction pending?\", isPendingTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async isPendingTransaction(args: { transactionHash: HexInput }): Promise<boolean> {\n    return isTransactionPending({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Waits for a transaction to move past the pending state and provides the transaction response.\n   * There are 4 cases.\n   * 1. Transaction is successfully processed and committed to the chain.\n   *    - The function will resolve with the transaction response from the API.\n   * 2. Transaction is rejected for some reason, and is therefore not committed to the blockchain.\n   *    - The function will throw an AptosApiError with an HTTP status code indicating some problem with the request.\n   * 3. Transaction is committed but execution failed, meaning no changes were\n   *    written to the blockchain state.\n   *    - If `checkSuccess` is true, the function will throw a FailedTransactionError\n   *      If `checkSuccess` is false, the function will resolve with the transaction response where the `success` field is false.\n   * 4. Transaction does not move past the pending state within `args.options.timeoutSecs` seconds.\n   *    - The function will throw a WaitForTransactionError\n   *\n   * @param args.transactionHash - The hash of a transaction previously submitted to the blockchain.\n   * @param args.options - Optional parameters for waiting behavior.\n   * @param args.options.timeoutSecs - Timeout in seconds. Defaults to 20 seconds.\n   * @param args.options.checkSuccess - A boolean which controls whether the function will error if the transaction failed.\n   * Defaults to true.\n   * @returns The transaction on-chain response.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Wait for a transaction to complete using its hash\n   *   const transactionHash = \"0x123\"; // replace with a real transaction hash\n   *   const transactionResponse = await aptos.waitForTransaction({\n   *     transactionHash,\n   *     options: {\n   *       timeoutSecs: 30, // specify your own timeout if needed\n   *       checkSuccess: true,\n   *     },\n   *   });\n   *\n   *   console.log(transactionResponse);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async waitForTransaction(args: {\n    transactionHash: HexInput;\n    options?: WaitForTransactionOptions;\n  }): Promise<CommittedTransactionResponse> {\n    return waitForTransaction({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Estimates the gas unit price required to process a transaction on the Aptos blockchain in a timely manner.\n   * This helps users to understand the cost associated with their transactions.\n   * {@link https://api.mainnet.aptoslabs.com/v1/spec#/operations/estimate_gas_price}\n   *\n   * @returns An object containing the estimated gas price.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET }); // Specify your network\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the gas price estimation\n   *   const gasPriceEstimation = await aptos.getGasPriceEstimation();\n   *\n   *   console.log(\"Estimated Gas Price:\", gasPriceEstimation);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getGasPriceEstimation(): Promise<GasEstimation> {\n    return getGasPriceEstimation({\n      aptosConfig: this.config,\n    });\n  }\n\n  /**\n   * Returns a signing message for a transaction, allowing a user to sign it using their preferred method before submission to the network.\n   *\n   * @param args - The arguments for obtaining the signing message.\n   * @param args.transaction - A raw transaction for signing elsewhere.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     const transaction = await aptos.transaction.build.simple({\n   *         sender: \"0x1\", // replace with a real sender address\n   *         data: {\n   *             function: \"0x1::aptos_account::transfer\",\n   *             functionArguments: [\"0x2\", 100], // replace with a real destination address\n   *         },\n   *     });\n   *\n   *     const message = await aptos.getSigningMessage({ transaction });\n   *     console.log(message);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getSigningMessage(args: { transaction: AnyRawTransaction }): Uint8Array {\n    return getSigningMessage(args);\n  }\n\n  /**\n   * Generates a transaction to publish a Move package to the blockchain.\n   * This function helps you create a transaction that can be simulated or submitted to the chain for publishing a package.\n   *\n   * To get the `metadataBytes` and `byteCode`, can compile using Aptos CLI with command\n   * `aptos move compile --save-metadata ...`,\n   *\n   * {@link https://aptos.dev/tutorials/your-first-dapp/#step-4-publish-a-move-module}\n   *\n   * @param args The arguments for publishing the package.\n   * @param args.account The publisher account.\n   * @param args.metadataBytes The package metadata bytes.\n   * @param args.moduleBytecode An array of the bytecode of each module in the package in compiler output order.\n   * @param args.options Optional settings for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Replace with a real account address\n   *   const account = \"0x1\";\n   *   const metadataBytes = \"0x...\"; // replace with real metadata bytes\n   *   const byteCode = \"0x...\"; // replace with real module bytecode\n   *\n   *   const transaction = await aptos.publishPackageTransaction({\n   *     account,\n   *     metadataBytes,\n   *     moduleBytecode: [byteCode],\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async publishPackageTransaction(args: {\n    account: AccountAddressInput;\n    metadataBytes: HexInput;\n    moduleBytecode: Array<HexInput>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return publicPackageTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Rotates the authentication key for a given account.  Once an account is rotated, only the new private key\n   * or keyless signing scheme can be used to sign transactions for the account.\n   *\n   * @param args - The arguments for rotating the authentication key.\n   * @param args.fromAccount - The account from which the authentication key will be rotated.\n   * @param args.toAccount - (Optional) The target account to rotate to. Required if not using toNewPrivateKey or toAuthKey.\n   * @param args.toNewPrivateKey - (Optional) The new private key to rotate to. Required if not using toAccount or toAuthKey.\n   * @param args.toAuthKey - (Optional) The new authentication key to rotate to. Can only be used with dangerouslySkipVerification=true.\n   * @param args.dangerouslySkipVerification - (Optional) If true, skips verification steps after rotation. Required when using toAuthKey.\n   *\n   * @remarks\n   * This function supports three modes of rotation:\n   * 1. Using a target Account object (toAccount)\n   * 2. Using a new private key (toNewPrivateKey)\n   * 3. Using a raw authentication key (toAuthKey) - requires dangerouslySkipVerification=true\n   *\n   * When not using dangerouslySkipVerification, the function performs additional safety checks and account setup.\n   *\n   * If the new key is a multi key, skipping verification is dangerous because verification will publish the public key onchain and\n   * prevent users from being locked out of the account from loss of knowledge of one of the public keys.\n   *\n   * @returns PendingTransactionResponse\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account, PrivateKey } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Rotate the authentication key for an account\n   *   const response = await aptos.rotateAuthKey({\n   *     // replace with a real account\n   *     fromAccount: Account.generate(),\n   *     // replace with a real private key\n   *     toNewPrivateKey: new PrivateKey(\"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"),\n   *   });\n   *\n   *   console.log(response);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async rotateAuthKey(\n    args: {\n      fromAccount: Account;\n    } & (\n      | { toAccount: Account; dangerouslySkipVerification?: never }\n      | { toNewPrivateKey: Ed25519PrivateKey; dangerouslySkipVerification?: never }\n      | { toAuthKey: AuthenticationKey; dangerouslySkipVerification: true }\n    ),\n  ): Promise<PendingTransactionResponse> {\n    return rotateAuthKey({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sign a transaction that can later be submitted to the chain.\n   * This function is essential for ensuring the authenticity of the transaction by using the provided account's signing capabilities.\n   *\n   * @param args - The arguments for signing the transaction.\n   * @param args.signer - The account that will sign the transaction.\n   * @param args.transaction - A raw transaction to sign.\n   *\n   * @returns AccountAuthenticator - The authenticator for the signed transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new account for signing\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [ \"0x1\", 100 ], // replace with a real account address and amount\n   *     },\n   *   });\n   *\n   *   const signedTransaction = await aptos.transaction.sign({\n   *     signer: sender,\n   *     transaction,\n   *   }); // Sign the transaction\n   *\n   *   console.log(\"Signed Transaction:\", signedTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  // eslint-disable-next-line class-methods-use-this\n  sign(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n    return signTransaction({\n      ...args,\n    });\n  }\n\n  /**\n   * Sign a transaction as a fee payer that can later be submitted to the chain.\n   * This function ensures that the transaction is marked with the fee payer's address, allowing it to be processed correctly.\n   *\n   * @param args - The arguments for signing the transaction.\n   * @param args.signer - The fee payer signer account.\n   * @param args.transaction - A raw transaction to sign on. This transaction must include a `feePayerAddress` property.\n   *\n   * @returns AccountAuthenticator - The authenticator for the signed transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new account for the fee payer\n   *   const transaction = await aptos.transaction.build.simple({\n   *     // All transactions on Aptos are implemented via smart contracts.\n   *     function: \"0x1::aptos_account::transfer\",\n   *     functionArguments: [sender.accountAddress, 100],\n   *     feePayerAddress: sender.accountAddress, // Set the fee payer address\n   *   });\n   *\n   *   const signedTransaction = await aptos.transaction.signAsFeePayer({\n   *     signer: sender,\n   *     transaction,\n   *   });\n   *\n   *   console.log(\"Signed transaction as fee payer:\", signedTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  // eslint-disable-next-line class-methods-use-this\n  signAsFeePayer(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n    return signAsFeePayer({\n      ...args,\n    });\n  }\n\n  // TRANSACTION SUBMISSION //\n\n  /**\n   * @deprecated Prefer to use `aptos.transaction.batch.forSingleAccount()`\n   *\n   * Batch transactions for a single account by submitting multiple transaction payloads.\n   * This function is useful for efficiently processing and submitting transactions that do not depend on each other, such as\n   * batch funding or batch token minting.\n   *\n   * @param args - The arguments for batching transactions.\n   * @param args.sender - The sender account to sign and submit the transactions.\n   * @param args.data - An array of transaction payloads to be processed.\n   * @param args.options - Optional. Transaction generation configurations (excluding accountSequenceNumber).\n   *\n   * @throws Error if any worker failure occurs during submission.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   * const sender = Account.generate(); // Generate a new account for sending transactions\n   *\n   * async function runExample() {\n   *   const transactions = [\n   *     { }, // Build your first transaction payload\n   *     { }, // Build your second transaction payload\n   *   ];\n   *\n   *   // Batch transactions for the single account\n   *   await aptos.batchTransactionsForSingleAccount({\n   *     sender,\n   *     data: transactions,\n   *   });\n   *\n   *   console.log(\"Batch transactions submitted successfully.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async batchTransactionsForSingleAccount(args: {\n    sender: Account;\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): Promise<void> {\n    try {\n      const { sender, data, options } = args;\n      this.batch.forSingleAccount({ sender, data, options });\n    } catch (error: any) {\n      throw new Error(`failed to submit transactions with error: ${error}`);\n    }\n  }\n\n  /**\n   * Sign and submit a single signer transaction to the blockchain.\n   * This function allows you to execute a transaction after signing it with the specified account.\n   *\n   * @param args The arguments for signing and submitting the transaction.\n   * @param args.signer The signer account to sign the transaction.\n   * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new account for sending the transaction\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [ \"0x1\", 100 ], // replace with a real account address\n   *     },\n   *   });\n   *\n   *   // Sign and submit the transaction\n   *   const pendingTransaction = await aptos.signAndSubmitTransaction({\n   *     signer: sender,\n   *     transaction,\n   *   });\n   *\n   *   console.log(pendingTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @return PendingTransactionResponse\n   * @group Transaction\n   */\n  async signAndSubmitTransaction(\n    args: FeePayerOrFeePayerAuthenticatorOrNeither & {\n      signer: Account;\n      transaction: AnyRawTransaction;\n    },\n  ): Promise<PendingTransactionResponse> {\n    return signAndSubmitTransaction({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Sign and submit a single signer transaction as the fee payer to chain given an authenticator by the sender of the transaction.\n   *\n   * @param args.feePayer The fee payer account to sign the transaction\n   * @param args.senderAuthenticator The AccountAuthenticator signed by the sender of the transaction\n   * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses\n   *\n   * @example\n   * const transaction = await aptos.transaction.build.simple({sender: alice.accountAddress, feePayer: true ...})\n   * const senderAuthenticator = alice.signTransactionWithAuthenticator(transaction)\n   * const pendingTransaction = await aptos.signAndSubmitAsFeePayer({\n   *  senderAuthenticator,\n   *  feePayer: bob,\n   *  transaction,\n   * })\n   *\n   * @return PendingTransactionResponse\n   * @group Transaction\n   */\n  async signAndSubmitAsFeePayer(args: {\n    feePayer: Account;\n    senderAuthenticator: AccountAuthenticator;\n    transaction: AnyRawTransaction;\n  }): Promise<PendingTransactionResponse> {\n    return signAndSubmitAsFeePayer({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/keyless}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * keyless namespace and without having a dependency cycle error.\n * @group Implementation\n */\nimport { jwtDecode, JwtPayload } from \"jwt-decode\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosPepperService, postAptosProvingService } from \"../client\";\nimport {\n  AccountAddressInput,\n  EphemeralSignature,\n  Groth16Zkp,\n  Hex,\n  KeylessPublicKey,\n  MoveJWK,\n  ZeroKnowledgeSig,\n  ZkProof,\n  getKeylessConfig,\n} from \"../core\";\nimport { HexInput, ZkpVariant } from \"../types\";\nimport { Account, EphemeralKeyPair, KeylessAccount, ProofFetchCallback } from \"../account\";\nimport { PepperFetchRequest, PepperFetchResponse, ProverRequest, ProverResponse } from \"../types/keyless\";\nimport { lookupOriginalAccountAddress } from \"./account\";\nimport { FederatedKeylessPublicKey } from \"../core/crypto/federatedKeyless\";\nimport { FederatedKeylessAccount } from \"../account/FederatedKeylessAccount\";\nimport { MoveVector } from \"../bcs\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions\";\nimport { KeylessError, KeylessErrorType } from \"../errors\";\nimport { FIREBASE_AUTH_ISS_PATTERN } from \"../utils/const\";\n\n/**\n * Retrieves a pepper value based on the provided configuration and authentication details.\n *\n * @param args - The arguments required to fetch the pepper.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.jwt - The JSON Web Token used for authentication.\n * @param args.ephemeralKeyPair - The ephemeral key pair used for the operation.\n * @param args.uidKey - An optional unique identifier key (defaults to \"sub\").\n * @param args.derivationPath - An optional derivation path for the key.\n * @returns A Uint8Array containing the fetched pepper value.\n * @group Implementation\n */\nexport async function getPepper(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  uidKey?: string;\n  derivationPath?: string;\n}): Promise<Uint8Array> {\n  const { aptosConfig, jwt, ephemeralKeyPair, uidKey = \"sub\", derivationPath } = args;\n\n  const body = {\n    jwt_b64: jwt,\n    epk: ephemeralKeyPair.getPublicKey().bcsToHex().toStringWithoutPrefix(),\n    exp_date_secs: ephemeralKeyPair.expiryDateSecs,\n    epk_blinder: Hex.fromHexInput(ephemeralKeyPair.blinder).toStringWithoutPrefix(),\n    uid_key: uidKey,\n    derivation_path: derivationPath,\n  };\n  const { data } = await postAptosPepperService<PepperFetchRequest, PepperFetchResponse>({\n    aptosConfig,\n    path: \"fetch\",\n    body,\n    originMethod: \"getPepper\",\n    overrides: { WITH_CREDENTIALS: false },\n  });\n  return Hex.fromHexInput(data.pepper).toUint8Array();\n}\n\n/**\n * Generates a zero-knowledge proof based on the provided parameters.\n * This function is essential for creating a signed proof that can be used in various cryptographic operations.\n *\n * @param args - The parameters required to generate the proof.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.jwt - The JSON Web Token used for authentication.\n * @param args.ephemeralKeyPair - The ephemeral key pair used for generating the proof.\n * @param args.pepper - An optional hex input used to enhance security (default is generated if not provided).\n * @param args.uidKey - An optional string that specifies the unique identifier key (defaults to \"sub\").\n * @throws Error if the pepper length is not valid or if the ephemeral key pair's lifespan exceeds the maximum allowed.\n * @group Implementation\n */\nexport async function getProof(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  pepper?: HexInput;\n  uidKey?: string;\n  maxExpHorizonSecs?: number;\n}): Promise<ZeroKnowledgeSig> {\n  const {\n    aptosConfig,\n    jwt,\n    ephemeralKeyPair,\n    pepper = await getPepper(args),\n    uidKey = \"sub\",\n    maxExpHorizonSecs = (await getKeylessConfig({ aptosConfig })).maxExpHorizonSecs,\n  } = args;\n  if (Hex.fromHexInput(pepper).toUint8Array().length !== KeylessAccount.PEPPER_LENGTH) {\n    throw new Error(`Pepper needs to be ${KeylessAccount.PEPPER_LENGTH} bytes`);\n  }\n  const decodedJwt = jwtDecode<JwtPayload>(jwt);\n  if (typeof decodedJwt.iat !== \"number\") {\n    throw new Error(\"iat was not found\");\n  }\n  if (maxExpHorizonSecs < ephemeralKeyPair.expiryDateSecs - decodedJwt.iat) {\n    throw Error(`The EphemeralKeyPair is too long lived.  It's lifespan must be less than ${maxExpHorizonSecs}`);\n  }\n  const json = {\n    jwt_b64: jwt,\n    epk: ephemeralKeyPair.getPublicKey().bcsToHex().toStringWithoutPrefix(),\n    epk_blinder: Hex.fromHexInput(ephemeralKeyPair.blinder).toStringWithoutPrefix(),\n    exp_date_secs: ephemeralKeyPair.expiryDateSecs,\n    exp_horizon_secs: maxExpHorizonSecs,\n    pepper: Hex.fromHexInput(pepper).toStringWithoutPrefix(),\n    uid_key: uidKey,\n  };\n\n  const { data } = await postAptosProvingService<ProverRequest, ProverResponse>({\n    aptosConfig,\n    path: \"prove\",\n    body: json,\n    originMethod: \"getProof\",\n    overrides: { WITH_CREDENTIALS: false },\n  });\n\n  const proofPoints = data.proof;\n  const groth16Zkp = new Groth16Zkp({\n    a: proofPoints.a,\n    b: proofPoints.b,\n    c: proofPoints.c,\n  });\n\n  const signedProof = new ZeroKnowledgeSig({\n    proof: new ZkProof(groth16Zkp, ZkpVariant.Groth16),\n    trainingWheelsSignature: EphemeralSignature.fromHex(data.training_wheels_signature),\n    expHorizonSecs: maxExpHorizonSecs,\n  });\n  return signedProof;\n}\n\n/**\n * Derives a keyless account by fetching the necessary proof and looking up the original account address.\n * This function helps in creating a keyless account that can be used without managing private keys directly.\n *\n * @param args - The arguments required to derive the keyless account.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.jwt - The JSON Web Token used for authentication.\n * @param args.ephemeralKeyPair - The ephemeral key pair used for cryptographic operations.\n * @param args.uidKey - An optional unique identifier key for the user.\n * @param args.pepper - An optional hexadecimal input used for additional security.\n * @param args.proofFetchCallback - An optional callback function to handle the proof fetch outcome.\n * @returns A keyless account object.\n * @group Implementation\n */\nexport async function deriveKeylessAccount(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  uidKey?: string;\n  pepper?: HexInput;\n  proofFetchCallback?: ProofFetchCallback;\n}): Promise<KeylessAccount>;\n\nexport async function deriveKeylessAccount(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  jwkAddress: AccountAddressInput;\n  uidKey?: string;\n  pepper?: HexInput;\n  proofFetchCallback?: ProofFetchCallback;\n}): Promise<FederatedKeylessAccount>;\n\nexport async function deriveKeylessAccount(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  jwkAddress?: AccountAddressInput;\n  uidKey?: string;\n  pepper?: HexInput;\n  proofFetchCallback?: ProofFetchCallback;\n}): Promise<KeylessAccount | FederatedKeylessAccount> {\n  const { aptosConfig, jwt, jwkAddress, uidKey, proofFetchCallback, pepper = await getPepper(args) } = args;\n  const { verificationKey, maxExpHorizonSecs } = await getKeylessConfig({ aptosConfig });\n\n  const proofPromise = getProof({ ...args, pepper, maxExpHorizonSecs });\n  // If a callback is provided, pass in the proof as a promise to KeylessAccount.create.  This will make the proof be fetched in the\n  // background and the callback will handle the outcome of the fetch.  This allows the developer to not have to block on the proof fetch\n  // allowing for faster rendering of UX.\n  //\n  // If no callback is provided, the just await the proof fetch and continue synchronously.\n  const proof = proofFetchCallback ? proofPromise : await proofPromise;\n\n  // Look up the original address to handle key rotations and then instantiate the account.\n  if (jwkAddress !== undefined) {\n    const publicKey = FederatedKeylessPublicKey.fromJwtAndPepper({ jwt, pepper, jwkAddress, uidKey });\n    const address = await lookupOriginalAccountAddress({\n      aptosConfig,\n      authenticationKey: publicKey.authKey().derivedAddress(),\n    });\n\n    return FederatedKeylessAccount.create({\n      ...args,\n      address,\n      proof,\n      pepper,\n      proofFetchCallback,\n      jwkAddress,\n      verificationKey,\n    });\n  }\n\n  const publicKey = KeylessPublicKey.fromJwtAndPepper({ jwt, pepper, uidKey });\n  const address = await lookupOriginalAccountAddress({\n    aptosConfig,\n    authenticationKey: publicKey.authKey().derivedAddress(),\n  });\n  return KeylessAccount.create({ ...args, address, proof, pepper, proofFetchCallback, verificationKey });\n}\n\nexport interface JWKS {\n  keys: MoveJWK[];\n}\n\nexport async function updateFederatedKeylessJwkSetTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  iss: string;\n  jwksUrl?: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, iss, options } = args;\n\n  let { jwksUrl } = args;\n\n  if (jwksUrl === undefined) {\n    if (FIREBASE_AUTH_ISS_PATTERN.test(iss)) {\n      jwksUrl = \"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\";\n    } else {\n      jwksUrl = iss.endsWith(\"/\") ? `${iss}.well-known/jwks.json` : `${iss}/.well-known/jwks.json`;\n    }\n  }\n\n  let response: Response;\n\n  try {\n    response = await fetch(jwksUrl);\n    if (!response.ok) {\n      throw new Error(`${response.status} ${response.statusText}`);\n    }\n  } catch (error) {\n    let errorMessage: string;\n    if (error instanceof Error) {\n      errorMessage = `${error.message}`;\n    } else {\n      errorMessage = `error unknown - ${error}`;\n    }\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWK_FETCH_FAILED_FEDERATED,\n      details: `Failed to fetch JWKS at ${jwksUrl}: ${errorMessage}`,\n    });\n  }\n\n  const jwks: JWKS = await response.json();\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::jwks::update_federated_jwk_set\",\n      functionArguments: [\n        iss,\n        MoveVector.MoveString(jwks.keys.map((key) => key.kid)),\n        MoveVector.MoveString(jwks.keys.map((key) => key.alg)),\n        MoveVector.MoveString(jwks.keys.map((key) => key.e)),\n        MoveVector.MoveString(jwks.keys.map((key) => key.n)),\n      ],\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account, EphemeralKeyPair, KeylessAccount, ProofFetchCallback } from \"../account\";\nimport { FederatedKeylessAccount } from \"../account/FederatedKeylessAccount\";\nimport { AccountAddressInput, ZeroKnowledgeSig } from \"../core\";\nimport {\n  deriveKeylessAccount,\n  getPepper,\n  getProof,\n  updateFederatedKeylessJwkSetTransaction,\n} from \"../internal/keyless\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions\";\nimport { HexInput } from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\n\n/**\n * A class to query all `Keyless` related queries on Aptos.\n *\n * More documentation on how to integrate Keyless Accounts see the below\n * [Aptos Keyless Integration Guide](https://aptos.dev/guides/keyless-accounts/#aptos-keyless-integration-guide).\n * @group Keyless\n */\nexport class Keyless {\n  /**\n   * Initializes a new instance of the Aptos class with the provided configuration.\n   * This allows you to interact with the Aptos blockchain using the specified network settings.\n   *\n   * @param config - The configuration settings for connecting to the Aptos network.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your desired network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Fetches the pepper from the Aptos pepper service API.\n   *\n   * @param args - The arguments for fetching the pepper.\n   * @param args.jwt - JWT token.\n   * @param args.ephemeralKeyPair - The EphemeralKeyPair used to generate the nonce in the JWT token.\n   * @param args.derivationPath - A derivation path used for creating multiple accounts per user via the BIP-44 standard. Defaults\n   * to \"m/44'/637'/0'/0'/0\".\n   * @returns The pepper which is a Uint8Array of length 31.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const ephemeralKeyPair = new EphemeralKeyPair(); // create a new ephemeral key pair\n   *   const jwt = \"your_jwt_token\"; // replace with a real JWT token\n   *\n   *   // Fetching the pepper using the provided JWT and ephemeral key pair\n   *   const pepper = await aptos.getPepper({\n   *     jwt,\n   *     ephemeralKeyPair,\n   *     // derivationPath: \"m/44'/637'/0'/0'/0\" // specify your own if needed\n   *   });\n   *\n   *   console.log(\"Fetched pepper:\", pepper);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  async getPepper(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    derivationPath?: string;\n  }): Promise<Uint8Array> {\n    return getPepper({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches a proof from the Aptos prover service API.\n   *\n   * @param args - The arguments for fetching the proof.\n   * @param args.jwt - JWT token.\n   * @param args.ephemeralKeyPair - The EphemeralKeyPair used to generate the nonce in the JWT token.\n   * @param args.pepper - The pepper used for the account. If not provided, it will be fetched from the Aptos pepper service.\n   * @param args.uidKey - A key in the JWT token to use to set the uidVal in the IdCommitment.\n   *\n   * @returns The proof which is represented by a ZeroKnowledgeSig.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, EphemeralKeyPair, getPepper } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const jwt = \"your_jwt_token\"; // replace with a real JWT token\n   *   const ephemeralKeyPair = new EphemeralKeyPair(); // create a new ephemeral key pair\n   *\n   *   // Fetch the proof using the getProof function\n   *   const proof = await aptos.getProof({\n   *     jwt,\n   *     ephemeralKeyPair,\n   *     pepper: await getPepper({}), // fetch the pepper if not provided\n   *     uidKey: \"sub\", // specify the uid key\n   *   });\n   *\n   *   console.log(\"Fetched proof:\", proof);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  async getProof(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    pepper?: HexInput;\n    uidKey?: string;\n  }): Promise<ZeroKnowledgeSig> {\n    return getProof({ aptosConfig: this.config, ...args });\n  }\n\n  async deriveKeylessAccount(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    uidKey?: string;\n    pepper?: HexInput;\n    proofFetchCallback?: ProofFetchCallback;\n  }): Promise<KeylessAccount>;\n\n  async deriveKeylessAccount(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    jwkAddress: AccountAddressInput;\n    uidKey?: string;\n    pepper?: HexInput;\n    proofFetchCallback?: ProofFetchCallback;\n  }): Promise<FederatedKeylessAccount>;\n\n  /**\n   * Derives a Keyless Account from the provided JWT token and corresponding EphemeralKeyPair. This function computes the proof\n   * via the proving service and can fetch the pepper from the pepper service if not explicitly provided.\n   *\n   * @param args - The arguments required to derive the Keyless Account.\n   * @param args.jwt - The JWT token used for deriving the account.\n   * @param args.ephemeralKeyPair - The EphemeralKeyPair used to generate the nonce in the JWT token.\n   * @param args.jwkAddress - The address the where the JWKs used to verify signatures are found.  Setting the value derives a\n   * FederatedKeylessAccount.\n   * @param args.uidKey - An optional key in the JWT token to set the uidVal in the IdCommitment.\n   * @param args.pepper - An optional pepper value.\n   * @param args.proofFetchCallback - An optional callback function for fetching the proof in the background, allowing for a more\n   * responsive user experience.\n   *\n   * @returns A KeylessAccount that can be used to sign transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, deriveKeylessAccount } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const jwt = \"your_jwt_token\"; // replace with a real JWT token\n   *   const ephemeralKeyPair = new EphemeralKeyPair(); // create a new ephemeral key pair\n   *\n   *   // Deriving the Keyless Account\n   *   const keylessAccount = await deriveKeylessAccount({\n   *     jwt,\n   *     ephemeralKeyPair,\n   *     uidKey: \"your_uid_key\", // optional\n   *     pepper: \"your_pepper\", // optional\n   *   });\n   *\n   *   console.log(\"Keyless Account derived:\", keylessAccount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  async deriveKeylessAccount(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    jwkAddress?: AccountAddressInput;\n    uidKey?: string;\n    pepper?: HexInput;\n    proofFetchCallback?: ProofFetchCallback;\n  }): Promise<KeylessAccount | FederatedKeylessAccount> {\n    return deriveKeylessAccount({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * This installs a set of FederatedJWKs at an address for a given iss.\n   *\n   * It will fetch the JSON Web Keyset (JWK) set from the well-known endpoint and update the FederatedJWKs at the sender's address\n   * to reflect it.\n   *\n   * @param args.sender The account that will install the JWKs\n   * @param args.iss the iss claim of the federated OIDC provider.\n   * @param args.jwksUrl the URL to find the corresponding JWKs. For supported IDP providers this parameter in not necessary.\n   *\n   * @returns The pending transaction that results from submission.\n   * @group Keyless\n   */\n  async updateFederatedKeylessJwkSetTransaction(args: {\n    sender: Account;\n    iss: string;\n    jwksUrl?: string;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return updateFederatedKeylessJwkSetTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","import { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddressInput, AccountAddress } from \"../core\";\nimport { PaginationArgs, OrderByArg, GetObjectDataQueryResponse, WhereArg } from \"../types\";\nimport { GetObjectDataQuery } from \"../types/generated/operations\";\nimport { GetObjectData } from \"../types/generated/queries\";\nimport { CurrentObjectsBoolExp } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\n/**\n * Retrieves the current objects based on specified filtering and pagination options.\n *\n * @param args - The arguments for retrieving object data.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.offset] - The number of items to skip before starting to collect the result set.\n * @param [args.options.limit] - The maximum number of items to return.\n * @param [args.options.orderBy] - The criteria for ordering the results.\n * @param [args.options.where] - The conditions to filter the results.\n * @returns The current objects that match the specified criteria.\n * @group Implementation\n */\nexport async function getObjectData(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]> & WhereArg<CurrentObjectsBoolExp>;\n}): Promise<GetObjectDataQueryResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetObjectData,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n  const data = await queryIndexer<GetObjectDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getObjectData\",\n  });\n\n  return data.current_objects;\n}\n\n/**\n * Retrieves the object data associated with a specific object address.\n * This function allows you to access detailed information about an object in the Aptos blockchain.\n *\n * @param args - The arguments for retrieving object data.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.objectAddress - The address of the object whose data is being retrieved.\n * @param args.options - Optional parameters for pagination and ordering of the results.\n * @group Implementation\n */\nexport async function getObjectDataByObjectAddress(args: {\n  aptosConfig: AptosConfig;\n  objectAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n}): Promise<GetObjectDataQueryResponse[0]> {\n  const { aptosConfig, objectAddress, options } = args;\n  const address = AccountAddress.from(objectAddress).toStringLong();\n\n  const whereCondition: { object_address: { _eq: string } } = {\n    object_address: { _eq: address },\n  };\n  return (await getObjectData({ aptosConfig, options: { ...options, where: whereCondition } }))[0];\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AnyNumber, GetObjectDataQueryResponse, OrderByArg, PaginationArgs } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { ProcessorType } from \"../utils\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { getObjectDataByObjectAddress } from \"../internal/object\";\n\n/**\n * A class to query all `Object` related queries on Aptos.\n * @group Object\n */\nexport class AptosObject {\n  /**\n   * Creates an instance of the Aptos client with the provided configuration.\n   * This allows interaction with the Aptos blockchain using the specified settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., mainnet, testnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet for funding accounts (optional).\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // Specify the desired network\n   *         nodeUrl: \"https://testnet.aptos.dev\", // Replace with your node URL\n   *     });\n   *\n   *     // Create an instance of the Aptos client\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client created successfully\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Object\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Fetches the object data based on the specified object address.\n   *\n   * @param args.objectAddress - The object address to retrieve data for.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to wait for.\n   * @param args.options - Optional configuration options for pagination and ordering.\n   *\n   * @returns The object data corresponding to the provided address.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching object data by object address\n   *   const objectData = await aptos.getObjectDataByObjectAddress({\n   *     objectAddress: \"0x1\", // replace with a real object address\n   *   });\n   *\n   *   console.log(objectData);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Object\n   */\n  async getObjectDataByObjectAddress(args: {\n    objectAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n  }): Promise<GetObjectDataQueryResponse[0]> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.OBJECT_PROCESSOR,\n    });\n    return getObjectDataByObjectAddress({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account } from \"./account\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { Coin } from \"./coin\";\nimport { DigitalAsset } from \"./digitalAsset\";\nimport { Event } from \"./event\";\nimport { Faucet } from \"./faucet\";\nimport { FungibleAsset } from \"./fungibleAsset\";\nimport { General } from \"./general\";\nimport { ANS } from \"./ans\";\nimport { Staking } from \"./staking\";\nimport { Transaction } from \"./transaction\";\nimport { Table } from \"./table\";\nimport { Keyless } from \"./keyless\";\nimport { AptosObject } from \"./object\";\nimport { AccountAbstraction } from \"./account/abstraction\";\n\n/**\n * The main entry point for interacting with the Aptos APIs,\n * providing access to various functionalities organized into\n * distinct namespaces.\n *\n * To utilize the SDK, instantiate a new Aptos object to gain\n * access to the complete range of SDK features.\n *\n * @example\n * ```typescript\n * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * async function runExample() {\n *     // Create a configuration for connecting to the Aptos testnet\n *     const config = new AptosConfig({ network: Network.TESTNET });\n *\n *     // Initialize the Aptos client with the configuration\n *     const aptos = new Aptos(config);\n *\n *     console.log(\"Aptos client initialized:\", aptos);\n * }\n * runExample().catch(console.error);\n * ```\n * @group Client\n */\nexport class Aptos {\n  readonly config: AptosConfig;\n\n  readonly account: Account;\n\n  readonly ans: ANS;\n\n  readonly coin: Coin;\n\n  readonly digitalAsset: DigitalAsset;\n\n  readonly event: Event;\n\n  readonly faucet: Faucet;\n\n  readonly fungibleAsset: FungibleAsset;\n\n  readonly general: General;\n\n  readonly staking: Staking;\n\n  readonly transaction: Transaction;\n\n  readonly table: Table;\n\n  readonly keyless: Keyless;\n\n  readonly object: AptosObject;\n\n  /**\n   * Initializes a new instance of the Aptos client with the provided configuration settings.\n   * This allows you to interact with various Aptos functionalities such as accounts, transactions, and events.\n   *\n   * @param settings - Configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with default settings\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own settings if needed\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  constructor(settings?: AptosConfig) {\n    this.config = new AptosConfig(settings);\n    this.account = new Account(this.config);\n    this.abstraction = new AccountAbstraction(this.config);\n    this.ans = new ANS(this.config);\n    this.coin = new Coin(this.config);\n    this.digitalAsset = new DigitalAsset(this.config);\n    this.event = new Event(this.config);\n    this.faucet = new Faucet(this.config);\n    this.fungibleAsset = new FungibleAsset(this.config);\n    this.general = new General(this.config);\n    this.staking = new Staking(this.config);\n    this.transaction = new Transaction(this.config);\n    this.table = new Table(this.config);\n    this.keyless = new Keyless(this.config);\n    this.object = new AptosObject(this.config);\n  }\n}\n\n// extends Aptos interface so all the methods and properties\n// from the other classes will be recognized by typescript.\nexport interface Aptos\n  extends Account,\n    ANS,\n    Coin,\n    DigitalAsset,\n    Event,\n    Faucet,\n    FungibleAsset,\n    General,\n    Keyless,\n    Staking,\n    Table,\n    AptosObject,\n    Omit<Transaction, \"build\" | \"simulate\" | \"submit\" | \"batch\"> {}\n\n/**\nIn TypeScript, we can’t inherit or extend from more than one class,\nMixins helps us to get around that by creating a partial classes\nthat we can combine to form a single class that contains all the methods and properties from the partial classes.\n{@link https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern}\n\nHere, we combine any subclass and the Aptos class.\n * @group Client\n*/\nfunction applyMixin(targetClass: any, baseClass: any, baseClassProp: string) {\n  // Mixin instance methods\n  Object.getOwnPropertyNames(baseClass.prototype).forEach((propertyName) => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n    if (!propertyDescriptor) return;\n    // eslint-disable-next-line func-names\n    propertyDescriptor.value = function (...args: any) {\n      return (this as any)[baseClassProp][propertyName](...args);\n    };\n    Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n  });\n}\n\napplyMixin(Aptos, Account, \"account\");\napplyMixin(Aptos, AccountAbstraction, \"abstraction\");\napplyMixin(Aptos, ANS, \"ans\");\napplyMixin(Aptos, Coin, \"coin\");\napplyMixin(Aptos, DigitalAsset, \"digitalAsset\");\napplyMixin(Aptos, Event, \"event\");\napplyMixin(Aptos, Faucet, \"faucet\");\napplyMixin(Aptos, FungibleAsset, \"fungibleAsset\");\napplyMixin(Aptos, General, \"general\");\napplyMixin(Aptos, Staking, \"staking\");\napplyMixin(Aptos, Transaction, \"transaction\");\napplyMixin(Aptos, Table, \"table\");\napplyMixin(Aptos, Keyless, \"keyless\");\napplyMixin(Aptos, AptosObject, \"object\");\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
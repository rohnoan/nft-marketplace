{"ast":null,"code":"import { b as u } from \"./chunk-25O4L7YR.mjs\";\nasync function i(e) {\n  let {\n      aptosConfig: t,\n      overrides: s,\n      params: r,\n      contentType: n,\n      acceptType: a,\n      path: p,\n      originMethod: o,\n      type: R\n    } = e,\n    d = t.getRequestUrl(R);\n  return u({\n    url: d,\n    method: \"GET\",\n    originMethod: o,\n    path: p,\n    contentType: n,\n    acceptType: a,\n    params: r,\n    overrides: {\n      ...t.clientConfig,\n      ...s\n    }\n  }, t, e.type);\n}\nasync function y(e) {\n  let {\n    aptosConfig: t\n  } = e;\n  return i({\n    ...e,\n    type: \"Fullnode\",\n    overrides: {\n      ...t.clientConfig,\n      ...t.fullnodeConfig,\n      ...e.overrides,\n      HEADERS: {\n        ...t.clientConfig?.HEADERS,\n        ...t.fullnodeConfig?.HEADERS\n      }\n    }\n  });\n}\nasync function l(e) {\n  return i({\n    ...e,\n    type: \"Pepper\"\n  });\n}\nasync function q(e) {\n  let t = new Array(0),\n    s,\n    r = e.params;\n  do {\n    let n = await i({\n      type: \"Fullnode\",\n      aptosConfig: e.aptosConfig,\n      originMethod: e.originMethod,\n      path: e.path,\n      params: r,\n      overrides: e.overrides\n    });\n    s = n.headers[\"x-aptos-cursor\"], delete n.headers, t.push(...n.data), r.start = s;\n  } while (s != null);\n  return t;\n}\nasync function A(e) {\n  let t = new Array(0),\n    s,\n    r = e.params,\n    n = r.limit;\n  do {\n    let {\n      response: a,\n      cursor: p\n    } = await m({\n      ...e\n    });\n    if (s = p, t.push(...a.data), e?.params && (e.params.start = s), n !== void 0) {\n      let o = n - t.length;\n      if (o <= 0) break;\n      r.limit = o;\n    }\n  } while (s != null);\n  return t;\n}\nasync function m(e) {\n  let t,\n    s = {};\n  typeof e.params?.cursor == \"string\" && (s.start = e.params.cursor), typeof e.params?.limit == \"number\" && (s.limit = e.params.limit);\n  let r = await i({\n    type: \"Fullnode\",\n    aptosConfig: e.aptosConfig,\n    originMethod: e.originMethod,\n    path: e.path,\n    params: s,\n    overrides: e.overrides\n  });\n  return t = r.headers[\"x-aptos-cursor\"], {\n    response: r,\n    cursor: t\n  };\n}\nexport { i as a, y as b, l as c, q as d, A as e, m as f };","map":{"version":3,"names":["i","e","aptosConfig","t","overrides","s","params","r","contentType","n","acceptType","a","path","p","originMethod","o","type","R","d","getRequestUrl","u","url","method","clientConfig","y","fullnodeConfig","HEADERS","l","q","Array","headers","push","data","start","A","limit","response","cursor","m","length","b","c","f"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\client\\get.ts"],"sourcesContent":["import { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse, AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\n/**\n * Options for making a GET request, including configuration for the API client.\n * @group Implementation\n * @category Client\n */\nexport type GetRequestOptions = {\n  /**\n   * The config for the API client\n   * @group Implementation\n   * @category Client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   * @group Implementation\n   * @category Client\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   * @group Implementation\n   * @category Client\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   * @group Implementation\n   * @category Client\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   * @group Implementation\n   * @category Client\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   * @group Implementation\n   * @category Client\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   * @group Implementation\n   * @category Client\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   * @group Implementation\n   * @category Client\n   */\n  overrides?: ClientConfig;\n};\n\n/**\n * Options for making a request to the Aptos API, excluding the \"type\" field.\n * @group Implementation\n * @category Client\n */\nexport type GetAptosRequestOptions = Omit<GetRequestOptions, \"type\">;\n\n/**\n * Executes a GET request to retrieve data based on the provided options.\n *\n * @param options - The options for the GET request.\n * @param options.aptosConfig - The configuration object for Aptos requests.\n * @param options.overrides - Optional overrides for the request configuration.\n * @param options.params - Query parameters to include in the request.\n * @param options.contentType - The content type of the request.\n * @param options.acceptType - The accepted response type.\n * @param options.path - The specific path for the request.\n * @param options.originMethod - The original method of the request.\n * @param options.type - The type of request being made.\n * @returns The response from the GET request.\n * @group Implementation\n * @category Client\n */\nexport async function get<Req extends {}, Res extends {}>(\n  options: GetRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig, overrides, params, contentType, acceptType, path, originMethod, type } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"GET\",\n      originMethod,\n      path,\n      contentType,\n      acceptType,\n      params,\n      overrides: {\n        ...aptosConfig.clientConfig,\n        ...overrides,\n      },\n    },\n    aptosConfig,\n    options.type,\n  );\n}\n\n/**\n * Retrieves data from the Aptos full node using the provided options.\n *\n * @param options - The options for the request to the Aptos full node.\n * @param options.aptosConfig - Configuration settings specific to the Aptos client and full node.\n * @param options.aptosConfig.clientConfig - The client configuration settings.\n * @param options.aptosConfig.fullnodeConfig - The full node configuration settings.\n * @param options.overrides - Additional overrides for the request.\n * @param options.type - The type of API request being made.\n *\n * @returns A promise that resolves with the response from the Aptos full node.\n * @group Implementation\n * @category Client\n */\nexport async function getAptosFullNode<Req extends {}, Res extends {}>(\n  options: GetAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n\n  return get<Req, Res>({\n    ...options,\n    type: AptosApiType.FULLNODE,\n    overrides: {\n      ...aptosConfig.clientConfig,\n      ...aptosConfig.fullnodeConfig,\n      ...options.overrides,\n      HEADERS: { ...aptosConfig.clientConfig?.HEADERS, ...aptosConfig.fullnodeConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Makes a GET request to the Aptos Pepper service to retrieve data.\n *\n * @param options - The options for the request.\n * @param options.param1 - Description of param1.\n * @param options.param2 - Description of param2.\n * @returns AptosResponse - The response from the Aptos Pepper service.\n * @group Implementation\n * @category Client\n */\nexport async function getAptosPepperService<Req extends {}, Res extends {}>(\n  options: GetAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return get<Req, Res>({ ...options, type: AptosApiType.PEPPER });\n}\n\n/**\n * This function is a helper for paginating using a function wrapping an API\n * @group Implementation\n * @category Client\n */\nexport async function paginateWithCursor<Req extends Record<string, any>, Res extends Array<{}>>(\n  options: GetAptosRequestOptions,\n): Promise<Res> {\n  const out: Res = new Array(0) as Res;\n  let cursor: string | undefined;\n  const requestParams = options.params as { start?: string; limit?: number };\n  do {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await get<Req, Res>({\n      type: AptosApiType.FULLNODE,\n      aptosConfig: options.aptosConfig,\n      originMethod: options.originMethod,\n      path: options.path,\n      params: requestParams,\n      overrides: options.overrides,\n    });\n    /**\n     * the cursor is a \"state key\" from the API perspective. Client\n     * should not need to \"care\" what it represents but just use it\n     * to query the next chunk of data.\n     * @group Implementation\n     * @category Client\n     */\n    cursor = response.headers[\"x-aptos-cursor\"];\n    // Now that we have the cursor (if any), we remove the headers before\n    // adding these to the output of this function.\n    delete response.headers;\n    out.push(...response.data);\n    requestParams.start = cursor;\n  } while (cursor !== null && cursor !== undefined);\n  return out;\n}\n\n/// This function is a helper for paginating using a function wrapping an API using offset instead of start\nexport async function paginateWithObfuscatedCursor<Req extends Record<string, any>, Res extends Array<{}>>(\n  options: GetAptosRequestOptions,\n): Promise<Res> {\n  const out: Res = new Array(0) as Res;\n  let cursor: string | undefined;\n  const requestParams = options.params as { start?: string; limit?: number };\n  const totalLimit = requestParams.limit;\n  do {\n    // eslint-disable-next-line no-await-in-loop\n    const { response, cursor: newCursor } = await getPageWithObfuscatedCursor<Req, Res>({ ...options });\n\n    /**\n     * the cursor is a \"state key\" from the API perspective. Client\n     * should not need to \"care\" what it represents but just use it\n     * to query the next chunk of data.\n     */\n    cursor = newCursor;\n    out.push(...response.data);\n    if (options?.params) {\n      options.params.start = cursor;\n    }\n\n    // Re-evaluate length\n    if (totalLimit !== undefined) {\n      const newLimit = totalLimit - out.length;\n      if (newLimit <= 0) {\n        break;\n      }\n      requestParams.limit = newLimit;\n    }\n  } while (cursor !== null && cursor !== undefined);\n  return out;\n}\n\nexport async function getPageWithObfuscatedCursor<Req extends Record<string, any>, Res extends Array<{}>>(\n  options: GetAptosRequestOptions,\n): Promise<{ response: AptosResponse<Req, Res>; cursor: string | undefined }> {\n  let cursor: string | undefined;\n  let requestParams: { start?: string; limit?: number } = {};\n\n  // Drop any other values\n  // TODO: Throw error if cursor is not a string\n  if (typeof options.params?.cursor === \"string\") {\n    requestParams.start = options.params.cursor;\n  }\n  if (typeof options.params?.limit === \"number\") {\n    requestParams.limit = options.params.limit;\n  }\n\n  // eslint-disable-next-line no-await-in-loop\n  const response = await get<Req, Res>({\n    type: AptosApiType.FULLNODE,\n    aptosConfig: options.aptosConfig,\n    originMethod: options.originMethod,\n    path: options.path,\n    params: requestParams,\n    overrides: options.overrides,\n  });\n\n  /**\n   * the cursor is a \"state key\" from the API perspective. Client\n   * should not need to \"care\" what it represents but just use it\n   * to query the next chunk of data.\n   */\n  cursor = response.headers[\"x-aptos-cursor\"];\n  return { response, cursor };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
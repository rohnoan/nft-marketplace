{"ast":null,"code":"import { b as t } from \"./chunk-STY74NUA.mjs\";\nvar o = n => typeof n == \"string\" ? t.isValid(n).valid ? n : new TextEncoder().encode(n) : n;\nexport { o as a };","map":{"version":3,"names":["o","n","t","isValid","valid","TextEncoder","encode","a"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-standard\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\utils.ts"],"sourcesContent":["import { HexInput } from \"../../types\";\nimport { Hex } from \"../hex\";\n\n/**\n * Helper function to convert a message to sign or to verify to a valid message input\n *\n * @param message a message as a string or Uint8Array\n *\n * @returns a valid HexInput - string or Uint8Array\n * @group Implementation\n * @category Serialization\n */\nexport const convertSigningMessage = (message: HexInput): HexInput => {\n  // if message is of type string, verify it is a valid Hex string\n  if (typeof message === \"string\") {\n    const isValid = Hex.isValid(message);\n    // If message is not a valid Hex string, convert it\n    if (!isValid.valid) {\n      return new TextEncoder().encode(message);\n    }\n    // If message is a valid Hex string, return it\n    return message;\n  }\n  // message is a Uint8Array\n  return message;\n};\n"],"mappings":";AAYO,IAAMA,CAAA,GAAyBC,CAAA,IAEhC,OAAOA,CAAA,IAAY,WACLC,CAAA,CAAIC,OAAA,CAAQF,CAAO,EAEtBG,KAAA,GAINH,CAAA,GAHE,IAAII,WAAA,CAAY,EAAEC,MAAA,CAAOL,CAAO,IAMpCA,CAAA;AAAA,SAAAD,CAAA,IAAAO,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
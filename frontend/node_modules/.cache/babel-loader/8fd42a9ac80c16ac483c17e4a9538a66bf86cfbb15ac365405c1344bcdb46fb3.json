{"ast":null,"code":"export function decodeEncodedContext(encodedContext) {\n  const decodedUrlString = atob(encodedContext);\n  return Object.fromEntries(new URLSearchParams(decodedUrlString).entries());\n}\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    const commaSeparatedValues = value.map(encodeValue).join('%2C%20' /* \", \" */);\n    return '%5B' /* \"[\" */ + commaSeparatedValues + /* \"]\" */'%5D';\n  } else if (typeof value === 'bigint') {\n    return `${value}n`;\n  } else {\n    return encodeURIComponent(String(value != null && Object.getPrototypeOf(value) === null ?\n    // Plain objects with no prototype don't have a `toString` method.\n    // Convert them before stringifying them.\n    {\n      ...value\n    } : value));\n  }\n}\nfunction encodeObjectContextEntry([key, value]) {\n  return `${key}=${encodeValue(value)}`;\n}\nexport function encodeContextObject(context) {\n  const searchParamsString = Object.entries(context).map(encodeObjectContextEntry).join('&');\n  return btoa(searchParamsString);\n}","map":{"version":3,"names":["decodeEncodedContext","encodedContext","decodedUrlString","atob","Object","fromEntries","URLSearchParams","entries","encodeValue","value","Array","isArray","commaSeparatedValues","map","join","encodeURIComponent","String","getPrototypeOf","encodeObjectContextEntry","key","encodeContextObject","context","searchParamsString","btoa"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@wallet-standard\\errors\\src\\context.ts"],"sourcesContent":["import type {\n    WALLET_STANDARD_ERROR__FEATURES__WALLET_ACCOUNT_CHAIN_UNSUPPORTED,\n    WALLET_STANDARD_ERROR__FEATURES__WALLET_ACCOUNT_FEATURE_UNIMPLEMENTED,\n    WALLET_STANDARD_ERROR__REGISTRY__WALLET_ACCOUNT_NOT_FOUND,\n    WALLET_STANDARD_ERROR__FEATURES__WALLET_FEATURE_UNIMPLEMENTED,\n    WalletStandardErrorCode,\n} from './codes.js';\n\ntype DefaultUnspecifiedErrorContextToUndefined<T> = {\n    [P in WalletStandardErrorCode]: P extends keyof T ? T[P] : undefined;\n};\n\n/**\n * To add a new error, follow the instructions at\n * https://github.com/wallet-standard/wallet-standard/tree/master/packages/core/errors/#adding-a-new-error\n *\n * WARNING:\n *   - Don't change or remove members of an error's context.\n */\nexport type WalletStandardErrorContext = DefaultUnspecifiedErrorContextToUndefined<{\n    [WALLET_STANDARD_ERROR__FEATURES__WALLET_ACCOUNT_CHAIN_UNSUPPORTED]: {\n        address: string;\n        chain: string;\n        featureName: string;\n        supportedChains: string[];\n        supportedFeatures: string[];\n    };\n    [WALLET_STANDARD_ERROR__FEATURES__WALLET_ACCOUNT_FEATURE_UNIMPLEMENTED]: {\n        address: string;\n        featureName: string;\n        supportedChains: string[];\n        supportedFeatures: string[];\n    };\n    [WALLET_STANDARD_ERROR__FEATURES__WALLET_FEATURE_UNIMPLEMENTED]: {\n        featureName: string;\n        supportedFeatures: string[];\n        supportedChains: string[];\n        walletName: string;\n    };\n    [WALLET_STANDARD_ERROR__REGISTRY__WALLET_ACCOUNT_NOT_FOUND]: {\n        address: string;\n        walletName: string;\n    };\n}>;\n\nexport function decodeEncodedContext(encodedContext: string): object {\n    const decodedUrlString = atob(encodedContext);\n    return Object.fromEntries(new URLSearchParams(decodedUrlString).entries());\n}\n\nfunction encodeValue(value: unknown): string {\n    if (Array.isArray(value)) {\n        const commaSeparatedValues = value.map(encodeValue).join('%2C%20' /* \", \" */);\n        return '%5B' /* \"[\" */ + commaSeparatedValues + /* \"]\" */ '%5D';\n    } else if (typeof value === 'bigint') {\n        return `${value}n`;\n    } else {\n        return encodeURIComponent(\n            String(\n                value != null && Object.getPrototypeOf(value) === null\n                    ? // Plain objects with no prototype don't have a `toString` method.\n                      // Convert them before stringifying them.\n                      { ...(value as object) }\n                    : value\n            )\n        );\n    }\n}\n\nfunction encodeObjectContextEntry([key, value]: [string, unknown]): `${typeof key}=${string}` {\n    return `${key}=${encodeValue(value)}`;\n}\n\nexport function encodeContextObject(context: object): string {\n    const searchParamsString = Object.entries(context).map(encodeObjectContextEntry).join('&');\n    return btoa(searchParamsString);\n}\n"],"mappings":"AA6CA,OAAM,SAAUA,oBAAoBA,CAACC,cAAsB;EACvD,MAAMC,gBAAgB,GAAGC,IAAI,CAACF,cAAc,CAAC;EAC7C,OAAOG,MAAM,CAACC,WAAW,CAAC,IAAIC,eAAe,CAACJ,gBAAgB,CAAC,CAACK,OAAO,EAAE,CAAC;AAC9E;AAEA,SAASC,WAAWA,CAACC,KAAc;EAC/B,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACtB,MAAMG,oBAAoB,GAAGH,KAAK,CAACI,GAAG,CAACL,WAAW,CAAC,CAACM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;IAC7E,OAAO,KAAK,CAAC,YAAYF,oBAAoB,GAAG,SAAU,KAAK;EACnE,CAAC,MAAM,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;IAClC,OAAO,GAAGA,KAAK,GAAG;EACtB,CAAC,MAAM;IACH,OAAOM,kBAAkB,CACrBC,MAAM,CACFP,KAAK,IAAI,IAAI,IAAIL,MAAM,CAACa,cAAc,CAACR,KAAK,CAAC,KAAK,IAAI;IAChD;IACA;IACA;MAAE,GAAIA;IAAgB,CAAE,GACxBA,KAAK,CACd,CACJ;EACL;AACJ;AAEA,SAASS,wBAAwBA,CAAC,CAACC,GAAG,EAAEV,KAAK,CAAoB;EAC7D,OAAO,GAAGU,GAAG,IAAIX,WAAW,CAACC,KAAK,CAAC,EAAE;AACzC;AAEA,OAAM,SAAUW,mBAAmBA,CAACC,OAAe;EAC/C,MAAMC,kBAAkB,GAAGlB,MAAM,CAACG,OAAO,CAACc,OAAO,CAAC,CAACR,GAAG,CAACK,wBAAwB,CAAC,CAACJ,IAAI,CAAC,GAAG,CAAC;EAC1F,OAAOS,IAAI,CAACD,kBAAkB,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
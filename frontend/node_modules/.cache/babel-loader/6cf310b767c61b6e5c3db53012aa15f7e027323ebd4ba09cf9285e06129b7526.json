{"ast":null,"code":"var i = `\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    `,\n  a = `\n    fragment AnsTokenFragment on current_aptos_names {\n  domain\n  expiration_timestamp\n  registered_address\n  subdomain\n  token_standard\n  is_primary\n  owner_address\n  subdomain_expiration_policy\n  domain_expiration_timestamp\n}\n    `,\n  n = `\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `,\n  _ = `\n    query getAccountAddressesForAuthKey($where_condition: auth_key_account_addresses_bool_exp, $order_by: [auth_key_account_addresses_order_by!]) {\n  auth_key_account_addresses(where: $where_condition, order_by: $order_by) {\n    auth_key\n    account_address\n    last_transaction_version\n    is_auth_key_used\n  }\n}\n    `,\n  u = `\n    query getAccountCoinsCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `,\n  c = `\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    `,\n  d = `\n    query getAccountCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    `,\n  y = `\n    query getAccountOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${n}`,\n  l = `\n    query getAccountOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${n}`,\n  p = `\n    query getAccountOwnedTokensFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${n}`,\n  m = `\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `,\n  g = `\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `,\n  b = `\n    query getAuthKeysForPublicKey($where_condition: public_key_auth_keys_bool_exp, $order_by: [public_key_auth_keys_order_by!]) {\n  public_key_auth_keys(where: $where_condition, order_by: $order_by) {\n    public_key\n    public_key_type\n    auth_key\n    account_public_key\n    last_transaction_version\n    is_public_key_used\n    signature_type\n  }\n}\n    `,\n  T = `\n    query getChainTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `,\n  k = `\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!) {\n  current_collections_v2(where: $where_condition) {\n    uri\n    total_minted_v2\n    token_standard\n    table_handle_v1\n    mutable_uri\n    mutable_description\n    max_supply\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    cdn_asset_uris {\n      cdn_image_uri\n      asset_uri\n      animation_optimizer_retry_count\n      cdn_animation_uri\n      cdn_json_uri\n      image_optimizer_retry_count\n      json_parser_retry_count\n      raw_animation_uri\n      raw_image_uri\n    }\n  }\n}\n    `,\n  $ = `\n    query getCurrentFungibleAssetBalances($where_condition: current_fungible_asset_balances_bool_exp, $offset: Int, $limit: Int) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n  }\n}\n    `,\n  h = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `,\n  f = `\n    query getEvents($where_condition: events_bool_exp, $offset: Int, $limit: Int, $order_by: [events_order_by!]) {\n  events(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    account_address\n    creation_number\n    data\n    event_index\n    sequence_number\n    transaction_block_height\n    transaction_version\n    type\n    indexed_type\n  }\n}\n    `,\n  A = `\n    query getFungibleAssetActivities($where_condition: fungible_asset_activities_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_activities(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    block_height\n    entry_function_id_str\n    event_index\n    gas_fee_payer_address\n    is_frozen\n    is_gas_fee\n    is_transaction_success\n    owner_address\n    storage_id\n    storage_refund_amount\n    token_standard\n    transaction_timestamp\n    transaction_version\n    type\n  }\n}\n    `,\n  G = `\n    query getFungibleAssetMetadata($where_condition: fungible_asset_metadata_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_metadata(where: $where_condition, offset: $offset, limit: $limit) {\n    icon_uri\n    project_uri\n    supply_aggregator_table_handle_v1\n    supply_aggregator_table_key_v1\n    creator_address\n    asset_type\n    decimals\n    last_transaction_timestamp\n    last_transaction_version\n    name\n    symbol\n    token_standard\n    supply_v2\n    maximum_v2\n  }\n}\n    `,\n  w = `\n    query getNames($offset: Int, $limit: Int, $where_condition: current_aptos_names_bool_exp, $order_by: [current_aptos_names_order_by!]) {\n  current_aptos_names(\n    limit: $limit\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n  ) {\n    ...AnsTokenFragment\n  }\n}\n    ${a}`,\n  q = `\n    query getNumberOfDelegators($where_condition: num_active_delegator_per_pool_bool_exp, $order_by: [num_active_delegator_per_pool_order_by!]) {\n  num_active_delegator_per_pool(where: $where_condition, order_by: $order_by) {\n    num_active_delegator\n    pool_address\n  }\n}\n    `,\n  v = `\n    query getObjectData($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    `,\n  C = `\n    query getProcessorStatus($where_condition: processor_status_bool_exp) {\n  processor_status(where: $where_condition) {\n    last_success_version\n    processor\n    last_updated\n  }\n}\n    `,\n  Q = `\n    query getTableItemsData($where_condition: table_items_bool_exp!, $offset: Int, $limit: Int, $order_by: [table_items_order_by!]) {\n  table_items(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    decoded_key\n    decoded_value\n    key\n    table_handle\n    transaction_version\n    write_set_change_index\n  }\n}\n    `,\n  x = `\n    query getTableItemsMetadata($where_condition: table_metadatas_bool_exp!, $offset: Int, $limit: Int, $order_by: [table_metadatas_order_by!]) {\n  table_metadatas(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    handle\n    key_type\n    value_type\n  }\n}\n    `,\n  F = `\n    query getTokenActivity($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${i}`,\n  D = `\n    query getCurrentTokenOwnership($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${n}`,\n  O = `\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `,\n  I = (s, o, e, t) => s();\nfunction P(s, o = I) {\n  return {\n    getAccountAddressesForAuthKey(e, t) {\n      return o(r => s.request(_, e, {\n        ...t,\n        ...r\n      }), \"getAccountAddressesForAuthKey\", \"query\", e);\n    },\n    getAccountCoinsCount(e, t) {\n      return o(r => s.request(u, e, {\n        ...t,\n        ...r\n      }), \"getAccountCoinsCount\", \"query\", e);\n    },\n    getAccountCoinsData(e, t) {\n      return o(r => s.request(c, e, {\n        ...t,\n        ...r\n      }), \"getAccountCoinsData\", \"query\", e);\n    },\n    getAccountCollectionsWithOwnedTokens(e, t) {\n      return o(r => s.request(d, e, {\n        ...t,\n        ...r\n      }), \"getAccountCollectionsWithOwnedTokens\", \"query\", e);\n    },\n    getAccountOwnedTokens(e, t) {\n      return o(r => s.request(y, e, {\n        ...t,\n        ...r\n      }), \"getAccountOwnedTokens\", \"query\", e);\n    },\n    getAccountOwnedTokensByTokenData(e, t) {\n      return o(r => s.request(l, e, {\n        ...t,\n        ...r\n      }), \"getAccountOwnedTokensByTokenData\", \"query\", e);\n    },\n    getAccountOwnedTokensFromCollection(e, t) {\n      return o(r => s.request(p, e, {\n        ...t,\n        ...r\n      }), \"getAccountOwnedTokensFromCollection\", \"query\", e);\n    },\n    getAccountTokensCount(e, t) {\n      return o(r => s.request(m, e, {\n        ...t,\n        ...r\n      }), \"getAccountTokensCount\", \"query\", e);\n    },\n    getAccountTransactionsCount(e, t) {\n      return o(r => s.request(g, e, {\n        ...t,\n        ...r\n      }), \"getAccountTransactionsCount\", \"query\", e);\n    },\n    getAuthKeysForPublicKey(e, t) {\n      return o(r => s.request(b, e, {\n        ...t,\n        ...r\n      }), \"getAuthKeysForPublicKey\", \"query\", e);\n    },\n    getChainTopUserTransactions(e, t) {\n      return o(r => s.request(T, e, {\n        ...t,\n        ...r\n      }), \"getChainTopUserTransactions\", \"query\", e);\n    },\n    getCollectionData(e, t) {\n      return o(r => s.request(k, e, {\n        ...t,\n        ...r\n      }), \"getCollectionData\", \"query\", e);\n    },\n    getCurrentFungibleAssetBalances(e, t) {\n      return o(r => s.request($, e, {\n        ...t,\n        ...r\n      }), \"getCurrentFungibleAssetBalances\", \"query\", e);\n    },\n    getDelegatedStakingActivities(e, t) {\n      return o(r => s.request(h, e, {\n        ...t,\n        ...r\n      }), \"getDelegatedStakingActivities\", \"query\", e);\n    },\n    getEvents(e, t) {\n      return o(r => s.request(f, e, {\n        ...t,\n        ...r\n      }), \"getEvents\", \"query\", e);\n    },\n    getFungibleAssetActivities(e, t) {\n      return o(r => s.request(A, e, {\n        ...t,\n        ...r\n      }), \"getFungibleAssetActivities\", \"query\", e);\n    },\n    getFungibleAssetMetadata(e, t) {\n      return o(r => s.request(G, e, {\n        ...t,\n        ...r\n      }), \"getFungibleAssetMetadata\", \"query\", e);\n    },\n    getNames(e, t) {\n      return o(r => s.request(w, e, {\n        ...t,\n        ...r\n      }), \"getNames\", \"query\", e);\n    },\n    getNumberOfDelegators(e, t) {\n      return o(r => s.request(q, e, {\n        ...t,\n        ...r\n      }), \"getNumberOfDelegators\", \"query\", e);\n    },\n    getObjectData(e, t) {\n      return o(r => s.request(v, e, {\n        ...t,\n        ...r\n      }), \"getObjectData\", \"query\", e);\n    },\n    getProcessorStatus(e, t) {\n      return o(r => s.request(C, e, {\n        ...t,\n        ...r\n      }), \"getProcessorStatus\", \"query\", e);\n    },\n    getTableItemsData(e, t) {\n      return o(r => s.request(Q, e, {\n        ...t,\n        ...r\n      }), \"getTableItemsData\", \"query\", e);\n    },\n    getTableItemsMetadata(e, t) {\n      return o(r => s.request(x, e, {\n        ...t,\n        ...r\n      }), \"getTableItemsMetadata\", \"query\", e);\n    },\n    getTokenActivity(e, t) {\n      return o(r => s.request(F, e, {\n        ...t,\n        ...r\n      }), \"getTokenActivity\", \"query\", e);\n    },\n    getCurrentTokenOwnership(e, t) {\n      return o(r => s.request(D, e, {\n        ...t,\n        ...r\n      }), \"getCurrentTokenOwnership\", \"query\", e);\n    },\n    getTokenData(e, t) {\n      return o(r => s.request(O, e, {\n        ...t,\n        ...r\n      }), \"getTokenData\", \"query\", e);\n    }\n  };\n}\nexport { i as a, a as b, n as c, _ as d, u as e, c as f, d as g, y as h, l as i, p as j, m as k, g as l, b as m, T as n, k as o, $ as p, h as q, f as r, A as s, G as t, w as u, q as v, v as w, C as x, Q as y, x as z, F as A, D as B, O as C, P as D };","map":{"version":3,"names":["i","a","n","_","u","c","d","y","l","p","m","g","b","T","k","$","h","f","A","G","w","q","v","C","Q","x","F","D","O","I","defaultWrapper","s","o","e","t","P","getAccountAddressesForAuthKey","r","request","getAccountCoinsCount","getAccountCoinsData","getAccountCollectionsWithOwnedTokens","getAccountOwnedTokens","getAccountOwnedTokensByTokenData","getAccountOwnedTokensFromCollection","getAccountTokensCount","getAccountTransactionsCount","getAuthKeysForPublicKey","getChainTopUserTransactions","getCollectionData","getCurrentFungibleAssetBalances","getDelegatedStakingActivities","getEvents","getFungibleAssetActivities","getFungibleAssetMetadata","getNames","getNumberOfDelegators","getObjectData","getProcessorStatus","getTableItemsData","getTableItemsMetadata","getTokenActivity","getCurrentTokenOwnership","getTokenData","j","z","B"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\types\\generated\\queries.ts"],"sourcesContent":["import * as Types from \"./operations\";\n\nimport { GraphQLClient, RequestOptions } from \"graphql-request\";\ntype GraphQLClientRequestHeaders = RequestOptions[\"requestHeaders\"];\nexport const TokenActivitiesFieldsFragmentDoc = `\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    `;\nexport const AnsTokenFragmentFragmentDoc = `\n    fragment AnsTokenFragment on current_aptos_names {\n  domain\n  expiration_timestamp\n  registered_address\n  subdomain\n  token_standard\n  is_primary\n  owner_address\n  subdomain_expiration_policy\n  domain_expiration_timestamp\n}\n    `;\nexport const CurrentTokenOwnershipFieldsFragmentDoc = `\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nexport const GetAccountAddressesForAuthKey = `\n    query getAccountAddressesForAuthKey($where_condition: auth_key_account_addresses_bool_exp, $order_by: [auth_key_account_addresses_order_by!]) {\n  auth_key_account_addresses(where: $where_condition, order_by: $order_by) {\n    auth_key\n    account_address\n    last_transaction_version\n    is_auth_key_used\n  }\n}\n    `;\nexport const GetAccountCoinsCount = `\n    query getAccountCoinsCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountCoinsData = `\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    `;\nexport const GetAccountCollectionsWithOwnedTokens = `\n    query getAccountCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    `;\nexport const GetAccountOwnedTokens = `\n    query getAccountOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensByTokenData = `\n    query getAccountOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensFromCollection = `\n    query getAccountOwnedTokensFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountTokensCount = `\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAuthKeysForPublicKey = `\n    query getAuthKeysForPublicKey($where_condition: public_key_auth_keys_bool_exp, $order_by: [public_key_auth_keys_order_by!]) {\n  public_key_auth_keys(where: $where_condition, order_by: $order_by) {\n    public_key\n    public_key_type\n    auth_key\n    account_public_key\n    last_transaction_version\n    is_public_key_used\n    signature_type\n  }\n}\n    `;\nexport const GetChainTopUserTransactions = `\n    query getChainTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nexport const GetCollectionData = `\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!) {\n  current_collections_v2(where: $where_condition) {\n    uri\n    total_minted_v2\n    token_standard\n    table_handle_v1\n    mutable_uri\n    mutable_description\n    max_supply\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    cdn_asset_uris {\n      cdn_image_uri\n      asset_uri\n      animation_optimizer_retry_count\n      cdn_animation_uri\n      cdn_json_uri\n      image_optimizer_retry_count\n      json_parser_retry_count\n      raw_animation_uri\n      raw_image_uri\n    }\n  }\n}\n    `;\nexport const GetCurrentFungibleAssetBalances = `\n    query getCurrentFungibleAssetBalances($where_condition: current_fungible_asset_balances_bool_exp, $offset: Int, $limit: Int) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n  }\n}\n    `;\nexport const GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nexport const GetEvents = `\n    query getEvents($where_condition: events_bool_exp, $offset: Int, $limit: Int, $order_by: [events_order_by!]) {\n  events(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    account_address\n    creation_number\n    data\n    event_index\n    sequence_number\n    transaction_block_height\n    transaction_version\n    type\n    indexed_type\n  }\n}\n    `;\nexport const GetFungibleAssetActivities = `\n    query getFungibleAssetActivities($where_condition: fungible_asset_activities_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_activities(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    block_height\n    entry_function_id_str\n    event_index\n    gas_fee_payer_address\n    is_frozen\n    is_gas_fee\n    is_transaction_success\n    owner_address\n    storage_id\n    storage_refund_amount\n    token_standard\n    transaction_timestamp\n    transaction_version\n    type\n  }\n}\n    `;\nexport const GetFungibleAssetMetadata = `\n    query getFungibleAssetMetadata($where_condition: fungible_asset_metadata_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_metadata(where: $where_condition, offset: $offset, limit: $limit) {\n    icon_uri\n    project_uri\n    supply_aggregator_table_handle_v1\n    supply_aggregator_table_key_v1\n    creator_address\n    asset_type\n    decimals\n    last_transaction_timestamp\n    last_transaction_version\n    name\n    symbol\n    token_standard\n    supply_v2\n    maximum_v2\n  }\n}\n    `;\nexport const GetNames = `\n    query getNames($offset: Int, $limit: Int, $where_condition: current_aptos_names_bool_exp, $order_by: [current_aptos_names_order_by!]) {\n  current_aptos_names(\n    limit: $limit\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n  ) {\n    ...AnsTokenFragment\n  }\n}\n    ${AnsTokenFragmentFragmentDoc}`;\nexport const GetNumberOfDelegators = `\n    query getNumberOfDelegators($where_condition: num_active_delegator_per_pool_bool_exp, $order_by: [num_active_delegator_per_pool_order_by!]) {\n  num_active_delegator_per_pool(where: $where_condition, order_by: $order_by) {\n    num_active_delegator\n    pool_address\n  }\n}\n    `;\nexport const GetObjectData = `\n    query getObjectData($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    `;\nexport const GetProcessorStatus = `\n    query getProcessorStatus($where_condition: processor_status_bool_exp) {\n  processor_status(where: $where_condition) {\n    last_success_version\n    processor\n    last_updated\n  }\n}\n    `;\nexport const GetTableItemsData = `\n    query getTableItemsData($where_condition: table_items_bool_exp!, $offset: Int, $limit: Int, $order_by: [table_items_order_by!]) {\n  table_items(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    decoded_key\n    decoded_value\n    key\n    table_handle\n    transaction_version\n    write_set_change_index\n  }\n}\n    `;\nexport const GetTableItemsMetadata = `\n    query getTableItemsMetadata($where_condition: table_metadatas_bool_exp!, $offset: Int, $limit: Int, $order_by: [table_metadatas_order_by!]) {\n  table_metadatas(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    handle\n    key_type\n    value_type\n  }\n}\n    `;\nexport const GetTokenActivity = `\n    query getTokenActivity($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nexport const GetCurrentTokenOwnership = `\n    query getCurrentTokenOwnership($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTokenData = `\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(\n  action: (requestHeaders?: Record<string, string>) => Promise<T>,\n  operationName: string,\n  operationType?: string,\n  variables?: any,\n) => Promise<T>;\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAccountAddressesForAuthKey(\n      variables?: Types.GetAccountAddressesForAuthKeyQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountAddressesForAuthKeyQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountAddressesForAuthKeyQuery>(GetAccountAddressesForAuthKey, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountAddressesForAuthKey\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountCoinsCount(\n      variables?: Types.GetAccountCoinsCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCoinsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsCountQuery>(GetAccountCoinsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsCount\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountCoinsData(\n      variables: Types.GetAccountCoinsDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCoinsDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsDataQuery>(GetAccountCoinsData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsData\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountCollectionsWithOwnedTokens(\n      variables: Types.GetAccountCollectionsWithOwnedTokensQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCollectionsWithOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCollectionsWithOwnedTokensQuery>(\n            GetAccountCollectionsWithOwnedTokens,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountCollectionsWithOwnedTokens\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountOwnedTokens(\n      variables: Types.GetAccountOwnedTokensQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensQuery>(GetAccountOwnedTokens, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokens\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountOwnedTokensByTokenData(\n      variables: Types.GetAccountOwnedTokensByTokenDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensByTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensByTokenDataQuery>(GetAccountOwnedTokensByTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokensByTokenData\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountOwnedTokensFromCollection(\n      variables: Types.GetAccountOwnedTokensFromCollectionQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensFromCollectionQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensFromCollectionQuery>(\n            GetAccountOwnedTokensFromCollection,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountOwnedTokensFromCollection\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountTokensCount(\n      variables?: Types.GetAccountTokensCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountTokensCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTokensCountQuery>(GetAccountTokensCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTokensCount\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountTransactionsCount(\n      variables?: Types.GetAccountTransactionsCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountTransactionsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTransactionsCountQuery>(GetAccountTransactionsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTransactionsCount\",\n        \"query\",\n        variables,\n      );\n    },\n    getAuthKeysForPublicKey(\n      variables?: Types.GetAuthKeysForPublicKeyQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAuthKeysForPublicKeyQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAuthKeysForPublicKeyQuery>(GetAuthKeysForPublicKey, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAuthKeysForPublicKey\",\n        \"query\",\n        variables,\n      );\n    },\n    getChainTopUserTransactions(\n      variables?: Types.GetChainTopUserTransactionsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetChainTopUserTransactionsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetChainTopUserTransactionsQuery>(GetChainTopUserTransactions, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getChainTopUserTransactions\",\n        \"query\",\n        variables,\n      );\n    },\n    getCollectionData(\n      variables: Types.GetCollectionDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCollectionDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCollectionDataQuery>(GetCollectionData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCollectionData\",\n        \"query\",\n        variables,\n      );\n    },\n    getCurrentFungibleAssetBalances(\n      variables?: Types.GetCurrentFungibleAssetBalancesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCurrentFungibleAssetBalancesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentFungibleAssetBalancesQuery>(GetCurrentFungibleAssetBalances, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentFungibleAssetBalances\",\n        \"query\",\n        variables,\n      );\n    },\n    getDelegatedStakingActivities(\n      variables?: Types.GetDelegatedStakingActivitiesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetDelegatedStakingActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetDelegatedStakingActivitiesQuery>(GetDelegatedStakingActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getDelegatedStakingActivities\",\n        \"query\",\n        variables,\n      );\n    },\n    getEvents(\n      variables?: Types.GetEventsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetEventsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetEventsQuery>(GetEvents, variables, { ...requestHeaders, ...wrappedRequestHeaders }),\n        \"getEvents\",\n        \"query\",\n        variables,\n      );\n    },\n    getFungibleAssetActivities(\n      variables?: Types.GetFungibleAssetActivitiesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetFungibleAssetActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetActivitiesQuery>(GetFungibleAssetActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetActivities\",\n        \"query\",\n        variables,\n      );\n    },\n    getFungibleAssetMetadata(\n      variables?: Types.GetFungibleAssetMetadataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetFungibleAssetMetadataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetMetadataQuery>(GetFungibleAssetMetadata, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetMetadata\",\n        \"query\",\n        variables,\n      );\n    },\n    getNames(\n      variables?: Types.GetNamesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetNamesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetNamesQuery>(GetNames, variables, { ...requestHeaders, ...wrappedRequestHeaders }),\n        \"getNames\",\n        \"query\",\n        variables,\n      );\n    },\n    getNumberOfDelegators(\n      variables?: Types.GetNumberOfDelegatorsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetNumberOfDelegatorsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetNumberOfDelegatorsQuery>(GetNumberOfDelegators, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getNumberOfDelegators\",\n        \"query\",\n        variables,\n      );\n    },\n    getObjectData(\n      variables?: Types.GetObjectDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetObjectDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetObjectDataQuery>(GetObjectData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getObjectData\",\n        \"query\",\n        variables,\n      );\n    },\n    getProcessorStatus(\n      variables?: Types.GetProcessorStatusQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetProcessorStatusQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetProcessorStatusQuery>(GetProcessorStatus, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getProcessorStatus\",\n        \"query\",\n        variables,\n      );\n    },\n    getTableItemsData(\n      variables: Types.GetTableItemsDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTableItemsDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTableItemsDataQuery>(GetTableItemsData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTableItemsData\",\n        \"query\",\n        variables,\n      );\n    },\n    getTableItemsMetadata(\n      variables: Types.GetTableItemsMetadataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTableItemsMetadataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTableItemsMetadataQuery>(GetTableItemsMetadata, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTableItemsMetadata\",\n        \"query\",\n        variables,\n      );\n    },\n    getTokenActivity(\n      variables: Types.GetTokenActivityQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTokenActivityQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenActivityQuery>(GetTokenActivity, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenActivity\",\n        \"query\",\n        variables,\n      );\n    },\n    getCurrentTokenOwnership(\n      variables: Types.GetCurrentTokenOwnershipQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCurrentTokenOwnershipQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentTokenOwnershipQuery>(GetCurrentTokenOwnership, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentTokenOwnership\",\n        \"query\",\n        variables,\n      );\n    },\n    getTokenData(\n      variables?: Types.GetTokenDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenDataQuery>(GetTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenData\",\n        \"query\",\n        variables,\n      );\n    },\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var i = class {\n    constructor() {\n      this.queue = [];\n      this.pendingDequeue = [];\n      this.cancelled = !1;\n    }\n    enqueue(e) {\n      if (this.cancelled = !1, this.pendingDequeue.length > 0) {\n        this.pendingDequeue.shift()?.resolve(e);\n        return;\n      }\n      this.queue.push(e);\n    }\n    async dequeue() {\n      return this.queue.length > 0 ? Promise.resolve(this.queue.shift()) : new Promise((e, u) => {\n        this.pendingDequeue.push({\n          resolve: e,\n          reject: u\n        });\n      });\n    }\n    isEmpty() {\n      return this.queue.length === 0;\n    }\n    cancel() {\n      this.cancelled = !0, this.pendingDequeue.forEach(async ({\n        reject: e\n      }) => {\n        e(new n(\"Task cancelled\"));\n      }), this.pendingDequeue = [], this.queue.length = 0;\n    }\n    isCancelled() {\n      return this.cancelled;\n    }\n    pendingDequeueLength() {\n      return this.pendingDequeue.length;\n    }\n  },\n  n = class extends Error {};\nexport { i as a, n as b };","map":{"version":3,"names":["i","constructor","queue","pendingDequeue","cancelled","enqueue","e","length","shift","resolve","push","dequeue","Promise","u","reject","isEmpty","cancel","forEach","n","isCancelled","pendingDequeueLength","Error","a","b"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-standard\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\management\\asyncQueue.ts"],"sourcesContent":["/**\n * The AsyncQueue class is an async-aware data structure that provides a queue-like\n * behavior for managing asynchronous tasks or operations.\n * It allows to enqueue items and dequeue them asynchronously.\n * This is not thread-safe, but it is async concurrency safe, and\n * it does not guarantee ordering for those that call into and await on enqueue.\n * @group Implementation\n * @category Transactions\n */\n\ninterface PendingDequeue<T> {\n  resolve: (value: T) => void;\n  reject: (reason?: AsyncQueueCancelledError) => void;\n}\n\nexport class AsyncQueue<T> {\n  readonly queue: T[] = [];\n\n  // The pendingDequeue is used to handle the resolution of promises when items are enqueued and dequeued.\n  private pendingDequeue: PendingDequeue<T>[] = [];\n\n  private cancelled: boolean = false;\n\n  /**\n   * Adds an item to the queue. If there are pending dequeued promises, it resolves the oldest promise with the enqueued item\n   * immediately; otherwise, it adds the item to the queue.\n   *\n   * @param item - The item to be added to the queue.\n   * @group Implementation\n   * @category Transactions\n   */\n  enqueue(item: T): void {\n    this.cancelled = false;\n\n    if (this.pendingDequeue.length > 0) {\n      const promise = this.pendingDequeue.shift();\n\n      promise?.resolve(item);\n\n      return;\n    }\n\n    this.queue.push(item);\n  }\n\n  /**\n   * Dequeues the next item from the queue and returns a promise that resolves to it.\n   * If the queue is empty, it creates a new promise that will be resolved when an item is enqueued.\n   *\n   * @returns Promise<T>\n   * @group Implementation\n   * @category Transactions\n   */\n  async dequeue(): Promise<T> {\n    if (this.queue.length > 0) {\n      return Promise.resolve(this.queue.shift()!);\n    }\n\n    return new Promise<T>((resolve, reject) => {\n      this.pendingDequeue.push({ resolve, reject });\n    });\n  }\n\n  /**\n   * Determine whether the queue is empty.\n   *\n   * @returns boolean - Returns true if the queue has no elements, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isEmpty(): boolean {\n    return this.queue.length === 0;\n  }\n\n  /**\n   * Cancels all pending promises in the queue and rejects them with an AsyncQueueCancelledError.\n   * This ensures that any awaiting code can handle the cancellation appropriately.\n   *\n   * @returns {void}\n   * @group Implementation\n   * @category Transactions\n   */\n  cancel(): void {\n    this.cancelled = true;\n\n    this.pendingDequeue.forEach(async ({ reject }) => {\n      reject(new AsyncQueueCancelledError(\"Task cancelled\"));\n    });\n\n    this.pendingDequeue = [];\n\n    this.queue.length = 0;\n  }\n\n  /**\n   * Determine whether the queue has been cancelled.\n   *\n   * @returns boolean - Returns true if the queue is cancelled, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isCancelled(): boolean {\n    return this.cancelled;\n  }\n\n  /**\n   * Retrieve the length of the pending dequeue.\n   *\n   * @returns number - The number of items currently in the pending dequeue.\n   * @group Implementation\n   * @category Transactions\n   */\n  pendingDequeueLength(): number {\n    return this.pendingDequeue.length;\n  }\n}\n\n/**\n * Represents an error that occurs when an asynchronous queue operation is cancelled.\n * This error extends the built-in Error class to provide additional context for cancellation events.\n *\n * @extends Error\n * @group Implementation\n * @category Transactions\n */\nexport class AsyncQueueCancelledError extends Error {}\n"],"mappings":"AAeO,IAAMA,CAAA,GAAN,MAAoB;IAApBC,YAAA;MACL,KAASC,KAAA,GAAa,EAAC;MAGvB,KAAQC,cAAA,GAAsC,EAAC;MAE/C,KAAQC,SAAA,GAAqB;IAAA;IAU7BC,QAAQC,CAAA,EAAe;MAGrB,IAFA,KAAKF,SAAA,GAAY,IAEb,KAAKD,cAAA,CAAeI,MAAA,GAAS,GAAG;QAClB,KAAKJ,cAAA,CAAeK,KAAA,CAAM,GAEjCC,OAAA,CAAQH,CAAI;QAErB;MACF;MAEA,KAAKJ,KAAA,CAAMQ,IAAA,CAAKJ,CAAI,CACtB;IAAA;IAUA,MAAMK,QAAA,EAAsB;MAC1B,OAAI,KAAKT,KAAA,CAAMK,MAAA,GAAS,IACfK,OAAA,CAAQH,OAAA,CAAQ,KAAKP,KAAA,CAAMM,KAAA,CAAM,CAAE,IAGrC,IAAII,OAAA,CAAW,CAACN,CAAA,EAASO,CAAA,KAAW;QACzC,KAAKV,cAAA,CAAeO,IAAA,CAAK;UAAED,OAAA,EAAAH,CAAA;UAASQ,MAAA,EAAAD;QAAO,CAAC,CAC9C;MAAA,CAAC,CACH;IAAA;IASAE,QAAA,EAAmB;MACjB,OAAO,KAAKb,KAAA,CAAMK,MAAA,KAAW,CAC/B;IAAA;IAUAS,OAAA,EAAe;MACb,KAAKZ,SAAA,GAAY,IAEjB,KAAKD,cAAA,CAAec,OAAA,CAAQ,OAAO;QAAEH,MAAA,EAAAR;MAAO,MAAM;QAChDA,CAAA,CAAO,IAAIY,CAAA,CAAyB,gBAAgB,CAAC,CACvD;MAAA,CAAC,GAED,KAAKf,cAAA,GAAiB,EAAC,EAEvB,KAAKD,KAAA,CAAMK,MAAA,GAAS,CACtB;IAAA;IASAY,YAAA,EAAuB;MACrB,OAAO,KAAKf,SACd;IAAA;IASAgB,qBAAA,EAA+B;MAC7B,OAAO,KAAKjB,cAAA,CAAeI,MAC7B;IAAA;EACF;EAUaW,CAAA,GAAN,cAAuCG,KAAM,GAAC;AAAA,SAAArB,CAAA,IAAAsB,CAAA,EAAAJ,CAAA,IAAAK,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
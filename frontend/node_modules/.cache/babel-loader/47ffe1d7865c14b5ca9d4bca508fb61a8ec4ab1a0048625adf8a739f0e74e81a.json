{"ast":null,"code":"import { c as s } from \"./chunk-BXRBOMHW.mjs\";\nimport { w as i, x as m } from \"./chunk-VHNX2NUR.mjs\";\nimport { b as n } from \"./chunk-GQ557FEA.mjs\";\nasync function b(t) {\n  let {\n    aptosConfig: a,\n    handle: e,\n    data: o,\n    options: r\n  } = t;\n  return (await n({\n    aptosConfig: a,\n    originMethod: \"getTableItem\",\n    path: `tables/${e}/item`,\n    params: {\n      ledger_version: r?.ledgerVersion\n    },\n    body: o\n  })).data;\n}\nasync function f(t) {\n  let {\n      aptosConfig: a,\n      options: e\n    } = t,\n    o = {\n      query: i,\n      variables: {\n        where_condition: e?.where,\n        offset: e?.offset,\n        limit: e?.limit,\n        order_by: e?.orderBy\n      }\n    };\n  return (await s({\n    aptosConfig: a,\n    query: o,\n    originMethod: \"getTableItemsData\"\n  })).table_items;\n}\nasync function T(t) {\n  let {\n      aptosConfig: a,\n      options: e\n    } = t,\n    o = {\n      query: m,\n      variables: {\n        where_condition: e?.where,\n        offset: e?.offset,\n        limit: e?.limit,\n        order_by: e?.orderBy\n      }\n    };\n  return (await s({\n    aptosConfig: a,\n    query: o,\n    originMethod: \"getTableItemsMetadata\"\n  })).table_metadatas;\n}\nexport { b as a, f as b, T as c };","map":{"version":3,"names":["b","t","aptosConfig","a","handle","e","data","o","options","r","n","originMethod","path","params","ledger_version","ledgerVersion","body","f","query","i","variables","where_condition","where","offset","limit","order_by","orderBy","s","table_items","T","m","table_metadatas","c"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-standard\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\table.ts"],"sourcesContent":["import { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosFullNode } from \"../client\";\nimport {\n  TableItemRequest,\n  LedgerVersionArg,\n  PaginationArgs,\n  WhereArg,\n  OrderByArg,\n  GetTableItemsDataResponse,\n  GetTableItemsMetadataResponse,\n} from \"../types\";\nimport { GetTableItemsDataQuery, GetTableItemsMetadataQuery } from \"../types/generated/operations\";\nimport { GetTableItemsData, GetTableItemsMetadata } from \"../types/generated/queries\";\nimport { TableItemsBoolExp, TableMetadatasBoolExp } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\n/**\n * Retrieves a specific item from a table in the Aptos blockchain.\n *\n * @param args - The arguments for retrieving the table item.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.handle - The identifier for the table from which to retrieve the item.\n * @param args.data - The request data for the table item.\n * @param args.options - Optional parameters for the request, including ledger version.\n * @group Implementation\n */\nexport async function getTableItem<T>(args: {\n  aptosConfig: AptosConfig;\n  handle: string;\n  data: TableItemRequest;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, handle, data, options } = args;\n  const response = await postAptosFullNode<TableItemRequest, any>({\n    aptosConfig,\n    originMethod: \"getTableItem\",\n    path: `tables/${handle}/item`,\n    params: { ledger_version: options?.ledgerVersion },\n    body: data,\n  });\n  return response.data as T;\n}\n\n/**\n * Retrieves table items data based on specified conditions and pagination options.\n *\n * @param args - The arguments for retrieving table items data.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for pagination and filtering.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.where - Conditions to filter the table items.\n * @param args.options.orderBy - The criteria to sort the results.\n * @group Implementation\n */\nexport async function getTableItemsData(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<TableItemsBoolExp> & OrderByArg<GetTableItemsDataResponse[0]>;\n}) {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetTableItemsData,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTableItemsDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getTableItemsData\",\n  });\n\n  return data.table_items;\n}\n\n/**\n * Retrieves metadata for table items based on specified options.\n *\n * @param args - The arguments for retrieving table items metadata.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for pagination and filtering.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.where - Conditions to filter the results.\n * @param args.options.orderBy - The order in which to return the results.\n * @returns A promise that resolves to an array of table metadata.\n * @group Implementation\n */\nexport async function getTableItemsMetadata(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<TableMetadatasBoolExp> & OrderByArg<GetTableItemsMetadataResponse[0]>;\n}): Promise<GetTableItemsMetadataResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetTableItemsMetadata,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTableItemsMetadataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getTableItemsMetadata\",\n  });\n\n  return data.table_metadatas;\n}\n"],"mappings":";;;AA0BA,eAAsBA,EAAgBC,CAAA,EAKvB;EACb,IAAM;IAAEC,WAAA,EAAAC,CAAA;IAAaC,MAAA,EAAAC,CAAA;IAAQC,IAAA,EAAAC,CAAA;IAAMC,OAAA,EAAAC;EAAQ,IAAIR,CAAA;EAQ/C,QAPiB,MAAMS,CAAA,CAAyC;IAC9DR,WAAA,EAAAC,CAAA;IACAQ,YAAA,EAAc;IACdC,IAAA,EAAM,UAAUP,CAAM;IACtBQ,MAAA,EAAQ;MAAEC,cAAA,EAAgBL,CAAA,EAASM;IAAc;IACjDC,IAAA,EAAMT;EACR,CAAC,GACeD,IAClB;AAAA;AAcA,eAAsBW,EAAkBhB,CAAA,EAGrC;EACD,IAAM;MAAEC,WAAA,EAAAC,CAAA;MAAaK,OAAA,EAAAH;IAAQ,IAAIJ,CAAA;IAE3BM,CAAA,GAAe;MACnBW,KAAA,EAAOC,CAAA;MACPC,SAAA,EAAW;QACTC,eAAA,EAAiBhB,CAAA,EAASiB,KAAA;QAC1BC,MAAA,EAAQlB,CAAA,EAASkB,MAAA;QACjBC,KAAA,EAAOnB,CAAA,EAASmB,KAAA;QAChBC,QAAA,EAAUpB,CAAA,EAASqB;MACrB;IACF;EAQA,QANa,MAAMC,CAAA,CAAqC;IACtDzB,WAAA,EAAAC,CAAA;IACAe,KAAA,EAAOX,CAAA;IACPI,YAAA,EAAc;EAChB,CAAC,GAEWiB,WACd;AAAA;AAeA,eAAsBC,EAAsB5B,CAAA,EAGD;EACzC,IAAM;MAAEC,WAAA,EAAAC,CAAA;MAAaK,OAAA,EAAAH;IAAQ,IAAIJ,CAAA;IAE3BM,CAAA,GAAe;MACnBW,KAAA,EAAOY,CAAA;MACPV,SAAA,EAAW;QACTC,eAAA,EAAiBhB,CAAA,EAASiB,KAAA;QAC1BC,MAAA,EAAQlB,CAAA,EAASkB,MAAA;QACjBC,KAAA,EAAOnB,CAAA,EAASmB,KAAA;QAChBC,QAAA,EAAUpB,CAAA,EAASqB;MACrB;IACF;EAQA,QANa,MAAMC,CAAA,CAAyC;IAC1DzB,WAAA,EAAAC,CAAA;IACAe,KAAA,EAAOX,CAAA;IACPI,YAAA,EAAc;EAChB,CAAC,GAEWoB,eACd;AAAA;AAAA,SAAA/B,CAAA,IAAAG,CAAA,EAAAc,CAAA,IAAAjB,CAAA,EAAA6B,CAAA,IAAAG,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { a as r } from \"./chunk-EBMEXURY.mjs\";\nimport { b as t } from \"./chunk-STY74NUA.mjs\";\nvar o = class extends r {\n  toUint8Array() {\n    return this.bcsToBytes();\n  }\n  toString() {\n    let i = this.toUint8Array();\n    return t.fromHexInput(i).toString();\n  }\n};\nexport { o as a };","map":{"version":3,"names":["o","r","toUint8Array","bcsToBytes","toString","i","t","fromHexInput","a"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\signature.ts"],"sourcesContent":["import { Serializable } from \"../../bcs\";\nimport { Hex } from \"../hex\";\n\n/**\n * An abstract representation of a crypto signature,\n * associated with a specific signature scheme, e.g., Ed25519 or Secp256k1.\n *\n * This class represents the product of signing a message directly from a\n * PrivateKey and can be verified against a CryptoPublicKey.\n * @group Implementation\n * @category Serialization\n */\nexport abstract class Signature extends Serializable {\n  /**\n   * Get the raw signature bytes\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  /**\n   * Get the signature as a hex string with a 0x prefix e.g. 0x123456...\n   * @returns The hex string representation of the signature.\n   * @group Implementation\n   * @category Serialization\n   */\n  toString(): string {\n    const bytes = this.toUint8Array();\n    return Hex.fromHexInput(bytes).toString();\n  }\n}\n\n/**\n * An abstract representation of an account signature,\n * associated to a specific authentication scheme e.g. Ed25519 or SingleKey\n *\n * This is the product of signing a message through an account,\n * and can be verified against an AccountPublicKey.\n * @group Implementation\n * @category Serialization\n */\n// export abstract class AccountSignature extends Serializable {\n//   /**\n//    * Get the raw signature bytes\n//    */\n//   abstract toUint8Array(): Uint8Array;\n//\n//   /**\n//    * Get the signature as a hex string with a 0x prefix e.g. 0x123456...\n//    */\n//   toString(): string {\n//     const bytes = this.toUint8Array();\n//     return Hex.fromHexInput(bytes).toString();\n//   }\n// }\n"],"mappings":";;AAYO,IAAeA,CAAA,GAAf,cAAiCC,CAAa;EAMnDC,aAAA,EAA2B;IACzB,OAAO,KAAKC,UAAA,CAAW,CACzB;EAAA;EAQAC,SAAA,EAAmB;IACjB,IAAMC,CAAA,GAAQ,KAAKH,YAAA,CAAa;IAChC,OAAOI,CAAA,CAAIC,YAAA,CAAaF,CAAK,EAAED,QAAA,CAAS,CAC1C;EAAA;AACF;AAAA,SAAAJ,CAAA,IAAAQ,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
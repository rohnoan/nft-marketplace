{"ast":null,"code":"// src/index.browser.ts\nasync function aptosClient(options) {\n  return jsonRequest(options);\n}\nasync function jsonRequest(options) {\n  const {\n    requestUrl,\n    requestConfig\n  } = buildRequest(options);\n  const res = await fetch(requestUrl, requestConfig);\n  const data = await res.json();\n  return {\n    status: res.status,\n    statusText: res.statusText,\n    data,\n    headers: res.headers,\n    config: requestConfig\n  };\n}\nasync function bcsRequest(options) {\n  const {\n    requestUrl,\n    requestConfig\n  } = buildRequest(options);\n  const res = await fetch(requestUrl, requestConfig);\n  const data = await res.arrayBuffer();\n  return {\n    status: res.status,\n    statusText: res.statusText,\n    data,\n    headers: res.headers,\n    config: requestConfig\n  };\n}\nfunction buildRequest(options) {\n  var _a, _b, _c;\n  const headers = new Headers();\n  Object.entries((_a = options == null ? void 0 : options.headers) != null ? _a : {}).forEach(([key, value]) => {\n    headers.append(key, String(value));\n  });\n  const body = options.body instanceof Uint8Array ? options.body : JSON.stringify(options.body);\n  const withCredentialsOption = (_b = options.overrides) == null ? void 0 : _b.WITH_CREDENTIALS;\n  let credentials;\n  if (withCredentialsOption === false) {\n    credentials = \"omit\";\n  } else if (withCredentialsOption === true) {\n    credentials = \"include\";\n  } else {\n    credentials = withCredentialsOption != null ? withCredentialsOption : \"include\";\n  }\n  const requestConfig = {\n    method: options.method,\n    headers,\n    body,\n    credentials\n  };\n  const params = new URLSearchParams();\n  Object.entries((_c = options.params) != null ? _c : {}).forEach(([key, value]) => {\n    if (value !== void 0) {\n      params.append(key, String(value));\n    }\n  });\n  const requestUrl = options.url + (params.size > 0 ? `?${params.toString()}` : \"\");\n  return {\n    requestUrl,\n    requestConfig\n  };\n}\nexport { bcsRequest, aptosClient as default, jsonRequest };","map":{"version":3,"names":["aptosClient","options","jsonRequest","requestUrl","requestConfig","buildRequest","res","fetch","data","json","status","statusText","headers","config","bcsRequest","arrayBuffer","_a","_b","_c","Headers","Object","entries","forEach","key","value","append","String","body","Uint8Array","JSON","stringify","withCredentialsOption","overrides","WITH_CREDENTIALS","credentials","method","params","URLSearchParams","url","size","toString"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\node_modules\\@aptos-labs\\aptos-client\\src\\index.browser.ts"],"sourcesContent":["import { AptosClientRequest, AptosClientResponse } from \"./types\";\n\n/**\n * Used for JSON responses\n *\n * @param options\n */\nexport default async function aptosClient<Res>(\n  options: AptosClientRequest,\n): Promise<AptosClientResponse<Res>> {\n  return jsonRequest<Res>(options);\n}\n\nexport async function jsonRequest<Res>(\n  options: AptosClientRequest,\n): Promise<AptosClientResponse<Res>> {\n  const { requestUrl, requestConfig } = buildRequest(options);\n\n  const res = await fetch(requestUrl, requestConfig);\n  const data = await res.json();\n\n  return {\n    status: res.status,\n    statusText: res.statusText,\n    data,\n    headers: res.headers,\n    config: requestConfig,\n  };\n}\n\n/**\n * Used for binary responses, such as BCS outputs\n *\n * @experimental\n * @param options\n */\nexport async function bcsRequest(\n  options: AptosClientRequest,\n): Promise<AptosClientResponse<ArrayBuffer>> {\n  const { requestUrl, requestConfig } = buildRequest(options);\n\n  const res = await fetch(requestUrl, requestConfig);\n  const data = await res.arrayBuffer();\n\n  return {\n    status: res.status,\n    statusText: res.statusText,\n    data,\n    headers: res.headers,\n    config: requestConfig,\n  };\n}\n\nfunction buildRequest(options: AptosClientRequest) {\n  const headers = new Headers();\n  Object.entries(options?.headers ?? {}).forEach(([key, value]) => {\n    headers.append(key, String(value));\n  });\n\n  const body =\n    options.body instanceof Uint8Array\n      ? options.body\n      : JSON.stringify(options.body);\n\n  const withCredentialsOption = options.overrides?.WITH_CREDENTIALS;\n  let credentials: RequestCredentials;\n  if (withCredentialsOption === false) {\n    credentials = \"omit\";\n  } else if (withCredentialsOption === true) {\n    credentials = \"include\";\n  } else {\n    credentials = withCredentialsOption ?? \"include\";\n  }\n\n  const requestConfig: RequestInit = {\n    method: options.method,\n    headers,\n    body,\n    credentials,\n  };\n\n  const params = new URLSearchParams();\n  Object.entries(options.params ?? {}).forEach(([key, value]) => {\n    if (value !== undefined) {\n      params.append(key, String(value));\n    }\n  });\n\n  const requestUrl =\n    options.url + (params.size > 0 ? `?${params.toString()}` : \"\");\n\n  return { requestUrl, requestConfig };\n}\n"],"mappings":";AAOA,eAAOA,YACLC,OAAA,EACmC;EACnC,OAAOC,WAAA,CAAiBD,OAAO;AACjC;AAEA,eAAsBC,YACpBD,OAAA,EACmC;EACnC,MAAM;IAAEE,UAAA;IAAYC;EAAc,IAAIC,YAAA,CAAaJ,OAAO;EAE1D,MAAMK,GAAA,GAAM,MAAMC,KAAA,CAAMJ,UAAA,EAAYC,aAAa;EACjD,MAAMI,IAAA,GAAO,MAAMF,GAAA,CAAIG,IAAA,CAAK;EAE5B,OAAO;IACLC,MAAA,EAAQJ,GAAA,CAAII,MAAA;IACZC,UAAA,EAAYL,GAAA,CAAIK,UAAA;IAChBH,IAAA;IACAI,OAAA,EAASN,GAAA,CAAIM,OAAA;IACbC,MAAA,EAAQT;EACV;AACF;AAQA,eAAsBU,WACpBb,OAAA,EAC2C;EAC3C,MAAM;IAAEE,UAAA;IAAYC;EAAc,IAAIC,YAAA,CAAaJ,OAAO;EAE1D,MAAMK,GAAA,GAAM,MAAMC,KAAA,CAAMJ,UAAA,EAAYC,aAAa;EACjD,MAAMI,IAAA,GAAO,MAAMF,GAAA,CAAIS,WAAA,CAAY;EAEnC,OAAO;IACLL,MAAA,EAAQJ,GAAA,CAAII,MAAA;IACZC,UAAA,EAAYL,GAAA,CAAIK,UAAA;IAChBH,IAAA;IACAI,OAAA,EAASN,GAAA,CAAIM,OAAA;IACbC,MAAA,EAAQT;EACV;AACF;AAEA,SAASC,aAAaJ,OAAA,EAA6B;EArDnD,IAAAe,EAAA,EAAAC,EAAA,EAAAC,EAAA;EAsDE,MAAMN,OAAA,GAAU,IAAIO,OAAA,CAAQ;EAC5BC,MAAA,CAAOC,OAAA,EAAQL,EAAA,GAAAf,OAAA,oBAAAA,OAAA,CAASW,OAAA,KAAT,OAAAI,EAAA,GAAoB,CAAC,CAAC,EAAEM,OAAA,CAAQ,CAAC,CAACC,GAAA,EAAKC,KAAK,MAAM;IAC/DZ,OAAA,CAAQa,MAAA,CAAOF,GAAA,EAAKG,MAAA,CAAOF,KAAK,CAAC;EACnC,CAAC;EAED,MAAMG,IAAA,GACJ1B,OAAA,CAAQ0B,IAAA,YAAgBC,UAAA,GACpB3B,OAAA,CAAQ0B,IAAA,GACRE,IAAA,CAAKC,SAAA,CAAU7B,OAAA,CAAQ0B,IAAI;EAEjC,MAAMI,qBAAA,IAAwBd,EAAA,GAAAhB,OAAA,CAAQ+B,SAAA,KAAR,gBAAAf,EAAA,CAAmBgB,gBAAA;EACjD,IAAIC,WAAA;EACJ,IAAIH,qBAAA,KAA0B,OAAO;IACnCG,WAAA,GAAc;EAChB,WAAWH,qBAAA,KAA0B,MAAM;IACzCG,WAAA,GAAc;EAChB,OAAO;IACLA,WAAA,GAAcH,qBAAA,WAAAA,qBAAA,GAAyB;EACzC;EAEA,MAAM3B,aAAA,GAA6B;IACjC+B,MAAA,EAAQlC,OAAA,CAAQkC,MAAA;IAChBvB,OAAA;IACAe,IAAA;IACAO;EACF;EAEA,MAAME,MAAA,GAAS,IAAIC,eAAA,CAAgB;EACnCjB,MAAA,CAAOC,OAAA,EAAQH,EAAA,GAAAjB,OAAA,CAAQmC,MAAA,KAAR,OAAAlB,EAAA,GAAkB,CAAC,CAAC,EAAEI,OAAA,CAAQ,CAAC,CAACC,GAAA,EAAKC,KAAK,MAAM;IAC7D,IAAIA,KAAA,KAAU,QAAW;MACvBY,MAAA,CAAOX,MAAA,CAAOF,GAAA,EAAKG,MAAA,CAAOF,KAAK,CAAC;IAClC;EACF,CAAC;EAED,MAAMrB,UAAA,GACJF,OAAA,CAAQqC,GAAA,IAAOF,MAAA,CAAOG,IAAA,GAAO,IAAI,IAAIH,MAAA,CAAOI,QAAA,CAAS,CAAC,KAAK;EAE7D,OAAO;IAAErC,UAAA;IAAYC;EAAc;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
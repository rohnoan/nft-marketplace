{"ast":null,"code":"import { a as d } from \"./chunk-YOZBVVKL.mjs\";\nimport { b as s } from \"./chunk-GJ7STZEW.mjs\";\nimport { b as r } from \"./chunk-GYVSI3TS.mjs\";\nasync function g(o) {\n  let {\n      aptosConfig: e,\n      accountAddress: t\n    } = o,\n    {\n      data: n\n    } = await s({\n      aptosConfig: e,\n      originMethod: \"getInfo\",\n      path: `accounts/${r.from(t).toString()}`\n    });\n  return n;\n}\nasync function f(o) {\n  return o.options?.ledgerVersion !== void 0 ? c(o) : d(async () => c(o), `module-${o.accountAddress}-${o.moduleName}`, 1e3 * 60 * 5)();\n}\nasync function c(o) {\n  let {\n      aptosConfig: e,\n      accountAddress: t,\n      moduleName: n,\n      options: i\n    } = o,\n    {\n      data: u\n    } = await s({\n      aptosConfig: e,\n      originMethod: \"getModule\",\n      path: `accounts/${r.from(t).toString()}/module/${n}`,\n      params: {\n        ledger_version: i?.ledgerVersion\n      }\n    });\n  return u;\n}\nexport { g as a, f as b };","map":{"version":3,"names":["g","o","aptosConfig","e","accountAddress","t","data","n","s","originMethod","path","r","from","toString","f","options","ledgerVersion","c","d","moduleName","i","u","params","ledger_version","a","b"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\internal\\utils\\utils.ts"],"sourcesContent":["import { AccountAddress, AccountAddressInput } from \"../../core/accountAddress\";\nimport { MoveModuleBytecode, LedgerVersionArg, AccountData } from \"../../types/types\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { getAptosFullNode } from \"../../client\";\nimport { memoizeAsync } from \"../../utils/memoize\";\n\n/**\n * Retrieves account information for a specified account address.\n *\n * @param args - The arguments for retrieving account information.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.accountAddress - The address of the account to retrieve information for.\n * @group Implementation\n */\nexport async function getInfo(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<AccountData> {\n  const { aptosConfig, accountAddress } = args;\n  const { data } = await getAptosFullNode<{}, AccountData>({\n    aptosConfig,\n    originMethod: \"getInfo\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}`,\n  });\n  return data;\n}\n\n/**\n * Queries for a move module given an account address and module name.\n * This function can help you retrieve the module's ABI and other relevant information.\n *\n * @param args - The arguments for retrieving the module.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The account address in hex-encoded 32 byte format.\n * @param args.moduleName - The name of the module to retrieve.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - Specifies the ledger version of transactions. By default, the latest version will be used.\n * @returns The move module.\n * @group Implementation\n */\nexport async function getModule(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  // We don't memoize the account module by ledger version, as it's not a common use case, this would be handled\n  // by the developer directly\n  if (args.options?.ledgerVersion !== undefined) {\n    return getModuleInner(args);\n  }\n\n  return memoizeAsync(\n    async () => getModuleInner(args),\n    `module-${args.accountAddress}-${args.moduleName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n\n/**\n * Retrieves the bytecode of a specified module from a given account address.\n *\n * @param args - The parameters for retrieving the module bytecode.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.accountAddress - The address of the account from which to retrieve the module.\n * @param args.moduleName - The name of the module to retrieve.\n * @param args.options - Optional parameters for specifying the ledger version.\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nasync function getModuleInner(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  const { aptosConfig, accountAddress, moduleName, options } = args;\n\n  const { data } = await getAptosFullNode<{}, MoveModuleBytecode>({\n    aptosConfig,\n    originMethod: \"getModule\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/module/${moduleName}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data;\n}\n"],"mappings":";;;AAcA,eAAsBA,EAAQC,CAAA,EAGL;EACvB,IAAM;MAAEC,WAAA,EAAAC,CAAA;MAAaC,cAAA,EAAAC;IAAe,IAAIJ,CAAA;IAClC;MAAEK,IAAA,EAAAC;IAAK,IAAI,MAAMC,CAAA,CAAkC;MACvDN,WAAA,EAAAC,CAAA;MACAM,YAAA,EAAc;MACdC,IAAA,EAAM,YAAYC,CAAA,CAAeC,IAAA,CAAKP,CAAc,EAAEQ,QAAA,CAAS,CAAC;IAClE,CAAC;EACD,OAAON,CACT;AAAA;AAeA,eAAsBO,EAAUb,CAAA,EAKA;EAG9B,OAAIA,CAAA,CAAKc,OAAA,EAASC,aAAA,KAAkB,SAC3BC,CAAA,CAAehB,CAAI,IAGrBiB,CAAA,CACL,YAAYD,CAAA,CAAehB,CAAI,GAC/B,UAAUA,CAAA,CAAKG,cAAc,IAAIH,CAAA,CAAKkB,UAAU,IAChD,MAAO,KAAK,CACd,EAAE,CACJ;AAAA;AAaA,eAAeF,EAAehB,CAAA,EAKE;EAC9B,IAAM;MAAEC,WAAA,EAAAC,CAAA;MAAaC,cAAA,EAAAC,CAAA;MAAgBc,UAAA,EAAAZ,CAAA;MAAYQ,OAAA,EAAAK;IAAQ,IAAInB,CAAA;IAEvD;MAAEK,IAAA,EAAAe;IAAK,IAAI,MAAMb,CAAA,CAAyC;MAC9DN,WAAA,EAAAC,CAAA;MACAM,YAAA,EAAc;MACdC,IAAA,EAAM,YAAYC,CAAA,CAAeC,IAAA,CAAKP,CAAc,EAAEQ,QAAA,CAAS,CAAC,WAAWN,CAAU;MACrFe,MAAA,EAAQ;QAAEC,cAAA,EAAgBH,CAAA,EAASJ;MAAc;IACnD,CAAC;EACD,OAAOK,CACT;AAAA;AAAA,SAAArB,CAAA,IAAAwB,CAAA,EAAAV,CAAA,IAAAW,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
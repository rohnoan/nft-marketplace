{"ast":null,"code":"import { b as p } from \"./chunk-NF73V673.mjs\";\nasync function o(e) {\n  let {\n      type: t,\n      originMethod: s,\n      path: i,\n      body: r,\n      acceptType: R,\n      contentType: f,\n      params: c,\n      aptosConfig: n,\n      overrides: A\n    } = e,\n    d = n.getRequestUrl(t);\n  return p({\n    url: d,\n    method: \"POST\",\n    originMethod: s,\n    path: i,\n    body: r,\n    contentType: f,\n    acceptType: R,\n    params: c,\n    overrides: A\n  }, n, e.type);\n}\nasync function q(e) {\n  let {\n    aptosConfig: t\n  } = e;\n  return o({\n    ...e,\n    type: \"Fullnode\",\n    overrides: {\n      ...t.clientConfig,\n      ...t.fullnodeConfig,\n      ...e.overrides,\n      HEADERS: {\n        ...t.clientConfig?.HEADERS,\n        ...t.fullnodeConfig?.HEADERS\n      }\n    }\n  });\n}\nasync function C(e) {\n  let {\n    aptosConfig: t\n  } = e;\n  return o({\n    ...e,\n    type: \"Indexer\",\n    overrides: {\n      ...t.clientConfig,\n      ...t.indexerConfig,\n      ...e.overrides,\n      HEADERS: {\n        ...t.clientConfig?.HEADERS,\n        ...t.indexerConfig?.HEADERS\n      }\n    }\n  });\n}\nasync function E(e) {\n  let {\n      aptosConfig: t\n    } = e,\n    s = {\n      ...t,\n      clientConfig: {\n        ...t.clientConfig\n      }\n    };\n  return delete s?.clientConfig?.API_KEY, o({\n    ...e,\n    type: \"Faucet\",\n    overrides: {\n      ...s.clientConfig,\n      ...s.faucetConfig,\n      ...e.overrides,\n      HEADERS: {\n        ...s.clientConfig?.HEADERS,\n        ...s.faucetConfig?.HEADERS\n      }\n    }\n  });\n}\nasync function a(e) {\n  return o({\n    ...e,\n    type: \"Pepper\"\n  });\n}\nasync function m(e) {\n  return o({\n    ...e,\n    type: \"Prover\"\n  });\n}\nexport { o as a, q as b, C as c, E as d, a as e, m as f };","map":{"version":3,"names":["o","e","type","t","originMethod","s","path","i","body","r","acceptType","R","contentType","f","params","c","aptosConfig","n","overrides","A","d","getRequestUrl","p","url","method","q","clientConfig","fullnodeConfig","HEADERS","C","indexerConfig","E","API_KEY","faucetConfig","a","m","b"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\client\\post.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse, AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\n/**\n * Options for making a POST request, including the API client configuration.\n * @group Implementation\n * @category Client\n */\nexport type PostRequestOptions = {\n  /**\n   * The config for the API client\n   * @group Implementation\n   * @category Client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   * @group Implementation\n   * @category Client\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   * @group Implementation\n   * @category Client\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   * @group Implementation\n   * @category Client\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   * @group Implementation\n   * @category Client\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   * @group Implementation\n   * @category Client\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   * @group Implementation\n   * @category Client\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * The body of the request, should match the content type of the request\n   * @group Implementation\n   * @category Client\n   */\n  body?: any;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   * @group Implementation\n   * @category Client\n   */\n  overrides?: ClientConfig;\n};\n\n/**\n * Options for posting a request to Aptos, excluding the type field.\n * @group Implementation\n * @category Client\n */\nexport type PostAptosRequestOptions = Omit<PostRequestOptions, \"type\">;\n\n/**\n * Executes a POST request to the specified URL with the provided options.\n *\n * @param options - The options for the POST request.\n * @param options.type - The type of the request.\n * @param options.originMethod - The original method that initiated the request.\n * @param options.path - The path for the request.\n * @param options.body - The body content to be sent with the request.\n * @param options.acceptType - The type of response expected from the server.\n * @param options.contentType - The content type of the request body.\n * @param options.params - Additional parameters to include in the request.\n * @param options.aptosConfig - Configuration settings for the Aptos request.\n * @param options.overrides - Any overrides for the default request behavior.\n * @returns The response from the POST request.\n * @group Implementation\n * @category Client\n */\nexport async function post<Req extends {}, Res extends {}>(\n  options: PostRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { type, originMethod, path, body, acceptType, contentType, params, aptosConfig, overrides } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"POST\",\n      originMethod,\n      path,\n      body,\n      contentType,\n      acceptType,\n      params,\n      overrides,\n    },\n    aptosConfig,\n    options.type,\n  );\n}\n\n/**\n * Sends a request to the Aptos full node using the specified options.\n * This function allows you to interact with the Aptos blockchain by sending requests to the full node.\n *\n * @param options - The options for the request.\n * @param options.aptosConfig - Configuration settings for the Aptos client.\n * @param options.aptosConfig.clientConfig - Client-specific configuration settings.\n * @param options.aptosConfig.fullnodeConfig - Full node-specific configuration settings.\n * @param options.overrides - Additional overrides for the request.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosFullNode<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n\n  return post<Req, Res>({\n    ...options,\n    type: AptosApiType.FULLNODE,\n    overrides: {\n      ...aptosConfig.clientConfig,\n      ...aptosConfig.fullnodeConfig,\n      ...options.overrides,\n      HEADERS: { ...aptosConfig.clientConfig?.HEADERS, ...aptosConfig.fullnodeConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Sends a request to the Aptos indexer with the specified options.\n * This function allows you to interact with the Aptos indexer and customize the request using various configurations.\n *\n * @param options - The options for the request to the Aptos indexer.\n * @param options.aptosConfig - Configuration settings specific to the Aptos client and indexer.\n * @param options.aptosConfig.clientConfig - The client configuration settings.\n * @param options.aptosConfig.indexerConfig - The indexer configuration settings.\n * @param options.overrides - Additional overrides for the request.\n * @param options.overrides.HEADERS - Custom headers to include in the request.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosIndexer<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n\n  return post<Req, Res>({\n    ...options,\n    type: AptosApiType.INDEXER,\n    overrides: {\n      ...aptosConfig.clientConfig,\n      ...aptosConfig.indexerConfig,\n      ...options.overrides,\n      HEADERS: { ...aptosConfig.clientConfig?.HEADERS, ...aptosConfig.indexerConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Sends a request to the Aptos faucet to obtain test tokens.\n * This function modifies the provided configuration to ensure that the API_KEY is not included in the request.\n *\n * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n * the minting page at https://aptos.dev/network/faucet.\n *\n * @param options - The options for the request.\n * @param options.aptosConfig - The configuration settings for the Aptos client.\n * @param options.aptosConfig.clientConfig - The client-specific configuration settings.\n * @param options.aptosConfig.clientConfig.HEADERS - Optional headers to include in the request.\n * @param options.aptosConfig.faucetConfig - The configuration settings specific to the faucet.\n * @param options.overrides - Additional overrides for the request configuration.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosFaucet<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n  // Faucet does not support API_KEY\n  // Create a new object with the desired modification\n  const modifiedAptosConfig = {\n    ...aptosConfig,\n    clientConfig: { ...aptosConfig.clientConfig },\n  };\n  // Delete API_KEY config\n  delete modifiedAptosConfig?.clientConfig?.API_KEY;\n\n  return post<Req, Res>({\n    ...options,\n    type: AptosApiType.FAUCET,\n    overrides: {\n      ...modifiedAptosConfig.clientConfig,\n      ...modifiedAptosConfig.faucetConfig,\n      ...options.overrides,\n      HEADERS: { ...modifiedAptosConfig.clientConfig?.HEADERS, ...modifiedAptosConfig.faucetConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Makes a post request to the pepper service.\n *\n * @param options - The options for the request.\n * @param options.url - The URL to which the request is sent.\n * @param options.headers - The headers to include in the request.\n * @param options.body - The body of the request.\n * @returns A promise that resolves to the response from the pepper service.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosPepperService<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.PEPPER });\n}\n\n/**\n * Sends a request to the Aptos proving service with the specified options.\n *\n * @param options - The options for the request to the Aptos proving service.\n * @param options.type - The type of the request, which should be set to AptosApiType.PROVER.\n * @param options.data - The data to be included in the request.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosProvingService<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.PROVER });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
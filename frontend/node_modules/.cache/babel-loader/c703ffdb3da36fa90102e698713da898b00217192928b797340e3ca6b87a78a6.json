{"ast":null,"code":"// src/base64.ts\nfunction base64ToBytes(base64) {\n  const binaryString = atob(base64);\n  return Uint8Array.from(binaryString, m => m.charCodeAt(0));\n}\nfunction bytesToBase64(bytes) {\n  const binaryString = String.fromCharCode(...bytes);\n  return btoa(binaryString);\n}\nfunction base64urlToBytes(base64) {\n  return base64ToBytes(base64.replace(/-/g, \"+\").replace(/_/g, \"/\"));\n}\nfunction bytesToBase64url(bytes) {\n  return bytesToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\n\n// src/helpers.ts\nimport { Network, NetworkToChainId } from \"@aptos-labs/ts-sdk\";\nfunction chainIdToNetwork(chainId) {\n  switch (chainId) {\n    case NetworkToChainId.mainnet:\n      return Network.MAINNET;\n    case NetworkToChainId.testnet:\n      return Network.TESTNET;\n    default:\n      return Network.DEVNET;\n  }\n}\nfunction isSupportedNetwork(network) {\n  return [Network.MAINNET, Network.TESTNET, Network.DEVNET].includes(network);\n}\n\n// src/features/connect/request.ts\nimport { Ed25519PrivateKey } from \"@aptos-labs/ts-sdk\";\n\n// src/WalletRequest.ts\nimport { Deserializer as Deserializer9, Serializer as Serializer9 } from \"@aptos-labs/ts-sdk\";\n\n// src/shared/AccountAuthenticatorInput.ts\nimport { AccountAddress, AccountAuthenticator } from \"@aptos-labs/ts-sdk\";\nfunction serializeAccountAuthenticatorInput(serializer, value) {\n  serializer.serialize(value.address);\n  serializer.serialize(value.authenticator);\n}\nfunction deserializeAccountAuthenticatorInput(deserializer) {\n  const address = deserializer.deserialize(AccountAddress);\n  const authenticator = deserializer.deserialize(AccountAuthenticator);\n  return {\n    address,\n    authenticator\n  };\n}\n\n// src/shared/AccountInfo.ts\nimport { AccountAddress as AccountAddress2 } from \"@aptos-labs/ts-sdk\";\n\n// src/shared/PublicKey.ts\nimport { AnyPublicKey, Ed25519PublicKey, MultiEd25519PublicKey, MultiKey, SigningScheme } from \"@aptos-labs/ts-sdk\";\nfunction serializePublicKey(serializer, value) {\n  if (value instanceof Ed25519PublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.Ed25519);\n  } else if (value instanceof MultiEd25519PublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519);\n  } else if (value instanceof AnyPublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.SingleKey);\n  } else if (value instanceof MultiKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiKey);\n  } else {\n    throw new Error(\"Unexpected public key type\");\n  }\n  serializer.serialize(value);\n}\nfunction deserializePublicKey(deserializer) {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case SigningScheme.Ed25519:\n      return deserializer.deserialize(Ed25519PublicKey);\n    case SigningScheme.MultiEd25519:\n      return deserializer.deserialize(MultiEd25519PublicKey);\n    case SigningScheme.SingleKey:\n      return deserializer.deserialize(AnyPublicKey);\n    case SigningScheme.MultiKey:\n      return deserializer.deserialize(MultiKey);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n\n// src/shared/AccountInfo.ts\nfunction serializeAccountInfo(serializer, value) {\n  serializer.serialize(value.address);\n  serializePublicKey(serializer, value.publicKey);\n  serializer.serializeStr(value.name ?? \"\");\n}\nfunction deserializeAccountInfo(deserializer) {\n  const address = deserializer.deserialize(AccountAddress2);\n  const publicKey = deserializePublicKey(deserializer);\n  const name = deserializer.deserializeStr();\n  return {\n    address,\n    publicKey,\n    ...(name.length > 0 ? {\n      name\n    } : void 0)\n  };\n}\n\n// src/shared/AccountInput.ts\nimport { AccountAddress as AccountAddress3 } from \"@aptos-labs/ts-sdk\";\nfunction serializeAccountInput(serializer, value) {\n  serializer.serialize(value.address);\n  serializer.serializeBool(value.publicKey !== void 0);\n  if (value.publicKey) {\n    serializePublicKey(serializer, value.publicKey);\n  }\n}\nfunction deserializeAccountInput(deserializer) {\n  const address = deserializer.deserialize(AccountAddress3);\n  const hasPublicKey = deserializer.deserializeBool();\n  const publicKey = hasPublicKey ? deserializePublicKey(deserializer) : void 0;\n  return {\n    address,\n    publicKey\n  };\n}\n\n// src/shared/DappInfo.ts\nfunction serializeDappInfo(serializer, value) {\n  serializer.serializeStr(value.domain);\n  serializer.serializeStr(value.name);\n  serializer.serializeBool(value.imageURI !== void 0);\n  if (value.imageURI !== void 0) {\n    serializer.serializeStr(value.imageURI);\n  }\n}\nfunction deserializeDappInfo(deserializer) {\n  const domain = deserializer.deserializeStr();\n  const name = deserializer.deserializeStr();\n  const hasImageUri = deserializer.deserializeBool();\n  const imageURI = hasImageUri ? deserializer.deserializeStr() : void 0;\n  return {\n    domain,\n    imageURI,\n    name\n  };\n}\n\n// src/shared/EntryFunctionArgument.ts\nimport { AccountAddress as AccountAddress4, FixedBytes } from \"@aptos-labs/ts-sdk\";\nvar EntryFunctionArgumentVariant = /* @__PURE__ */(EntryFunctionArgumentVariant2 => {\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"Undefined\"] = 0] = \"Undefined\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"Array\"] = 1] = \"Array\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"String\"] = 2] = \"String\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"Uint8Array\"] = 3] = \"Uint8Array\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"AccountAddress\"] = 4] = \"AccountAddress\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"FixedBytes\"] = 5] = \"FixedBytes\";\n  return EntryFunctionArgumentVariant2;\n})(EntryFunctionArgumentVariant || {});\nfunction serializeEntryFunctionArgument(serializer, argument) {\n  if (argument === void 0 || argument === null) {\n    serializer.serializeU32AsUleb128(0 /* Undefined */);\n    return;\n  }\n  if (Array.isArray(argument)) {\n    serializer.serializeU32AsUleb128(1 /* Array */);\n    serializer.serializeU32AsUleb128(argument.length);\n    for (const subArgument of argument) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n  if (typeof argument === \"string\" || typeof argument === \"number\" || typeof argument === \"boolean\" || typeof argument === \"bigint\") {\n    serializer.serializeU32AsUleb128(2 /* String */);\n    serializer.serializeStr(argument.toString());\n    return;\n  }\n  if (argument instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(3 /* Uint8Array */);\n    serializer.serializeBytes(argument);\n    return;\n  }\n  if (argument instanceof ArrayBuffer) {\n    serializer.serializeU32AsUleb128(3 /* Uint8Array */);\n    serializer.serializeBytes(new Uint8Array(argument));\n    return;\n  }\n  if (\"values\" in argument) {\n    serializer.serializeU32AsUleb128(1 /* Array */);\n    serializer.serializeU32AsUleb128(argument.values.length);\n    for (const subArgument of argument.values) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n  if (\"data\" in argument) {\n    serializer.serializeU32AsUleb128(4 /* AccountAddress */);\n    serializer.serialize(argument);\n    return;\n  }\n  if (argument.value === void 0) {\n    serializer.serializeU32AsUleb128(0 /* Undefined */);\n    serializer.serialize(argument);\n    return;\n  }\n  if (argument.value instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(5 /* FixedBytes */);\n    serializer.serializeBytes(argument.value);\n    return;\n  }\n  serializer.serializeU32AsUleb128(2 /* String */);\n  serializer.serializeStr(argument.value.toString());\n}\nfunction deserializeEntryFunctionArgument(deserializer) {\n  const variant = deserializer.deserializeUleb128AsU32();\n  switch (variant) {\n    case 0 /* Undefined */:\n      {\n        return void 0;\n      }\n    case 1 /* Array */:\n      {\n        const length = deserializer.deserializeUleb128AsU32();\n        const args = [];\n        for (let i = 0; i < length; i += 1) {\n          const argument = deserializeEntryFunctionArgument(deserializer);\n          args.push(argument);\n        }\n        return args;\n      }\n    case 3 /* Uint8Array */:\n      {\n        return deserializer.deserializeBytes();\n      }\n    case 4 /* AccountAddress */:\n      {\n        return deserializer.deserialize(AccountAddress4);\n      }\n    case 2 /* String */:\n      {\n        return deserializer.deserializeStr();\n      }\n    case 5 /* FixedBytes */:\n      {\n        const bytes = deserializer.deserializeBytes();\n        return new FixedBytes(bytes);\n      }\n    default:\n      {\n        throw new Error(\"Unexpected variant\");\n      }\n  }\n}\n\n// src/shared/Signature.ts\nimport { AnySignature, Ed25519Signature, MultiEd25519Signature, SigningScheme as SigningScheme2 } from \"@aptos-labs/ts-sdk\";\nfunction serializeSignature(serializer, value) {\n  if (value instanceof Ed25519Signature) {\n    serializer.serializeU32AsUleb128(SigningScheme2.Ed25519);\n  } else if (value instanceof MultiEd25519Signature) {\n    serializer.serializeU32AsUleb128(SigningScheme2.MultiEd25519);\n  } else if (value instanceof AnySignature) {\n    serializer.serializeU32AsUleb128(SigningScheme2.SingleKey);\n  } else {\n    throw new Error(\"Unexpected signature type\");\n  }\n  serializer.serialize(value);\n}\nfunction deserializeSignature(deserializer) {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case SigningScheme2.Ed25519:\n      return deserializer.deserialize(Ed25519Signature);\n    case SigningScheme2.MultiEd25519:\n      return deserializer.deserialize(MultiEd25519Signature);\n    case SigningScheme2.SingleKey:\n      return deserializer.deserialize(AnySignature);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n\n// src/shared/TransactionPayloadInput.ts\nimport { AccountAddress as AccountAddress5, deserializeFromScriptArgument, Hex, parseTypeTag, TypeTag } from \"@aptos-labs/ts-sdk\";\nvar TransactionPayloadInputVariant = /* @__PURE__ */(TransactionPayloadInputVariant2 => {\n  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2[\"EntryFunction\"] = 0] = \"EntryFunction\";\n  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2[\"Script\"] = 1] = \"Script\";\n  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2[\"Multisig\"] = 2] = \"Multisig\";\n  return TransactionPayloadInputVariant2;\n})(TransactionPayloadInputVariant || {});\nfunction serializeTypeArguments(serializer, typeArguments) {\n  serializer.serializeU32AsUleb128(typeArguments.length);\n  for (const typeArgument of typeArguments) {\n    const typeTag = typeof typeArgument === \"string\" ? parseTypeTag(typeArgument, {\n      allowGenerics: true\n    }) : typeArgument;\n    serializer.serialize(typeTag);\n  }\n}\nfunction deserializeTypeArguments(deserializer) {\n  const typeArguments = [];\n  const typeArgumentsLength = deserializer.deserializeUleb128AsU32();\n  for (let i = 0; i < typeArgumentsLength; i += 1) {\n    const typeTag = deserializer.deserialize(TypeTag);\n    typeArguments.push(typeTag);\n  }\n  return typeArguments;\n}\nfunction serializeEntryFunctionArguments(serializer, functionArguments) {\n  serializer.serializeU32AsUleb128(functionArguments.length);\n  for (const functionArgument of functionArguments) {\n    serializeEntryFunctionArgument(serializer, functionArgument);\n  }\n}\nfunction deserializeEntryFunctionArguments(deserializer) {\n  const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n  const functionArguments = [];\n  for (let i = 0; i < functionArgumentsLength; i += 1) {\n    const functionArgument = deserializeEntryFunctionArgument(deserializer);\n    functionArguments.push(functionArgument);\n  }\n  return functionArguments;\n}\nfunction serializeTransactionPayloadInput(serializer, value) {\n  if (\"multisigAddress\" in value) {\n    serializer.serializeU32AsUleb128(2 /* Multisig */);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n    const multisigAddress = AccountAddress5.from(value.multisigAddress);\n    serializer.serialize(multisigAddress);\n  } else if (\"function\" in value) {\n    serializer.serializeU32AsUleb128(0 /* EntryFunction */);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n  } else {\n    serializer.serializeU32AsUleb128(1 /* Script */);\n    const bytecode = Hex.fromHexInput(value.bytecode);\n    serializer.serializeBytes(bytecode.toUint8Array());\n    serializer.serializeU32AsUleb128(value.functionArguments.length);\n    for (const argument of value.functionArguments) {\n      argument.serializeForScriptFunction(serializer);\n    }\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n  }\n}\nfunction deserializeTransactionPayloadInput(deserializer) {\n  const variant = deserializer.deserializeUleb128AsU32();\n  switch (variant) {\n    case 2 /* Multisig */:\n      {\n        const functionId = deserializer.deserializeStr();\n        const functionArguments = deserializeEntryFunctionArguments(deserializer);\n        const typeArguments = deserializeTypeArguments(deserializer);\n        const multisigAddress = deserializer.deserialize(AccountAddress5);\n        return {\n          function: functionId,\n          functionArguments,\n          multisigAddress,\n          typeArguments\n        };\n      }\n    case 0 /* EntryFunction */:\n      {\n        const functionId = deserializer.deserializeStr();\n        const functionArguments = deserializeEntryFunctionArguments(deserializer);\n        const typeArguments = deserializeTypeArguments(deserializer);\n        return {\n          function: functionId,\n          functionArguments,\n          typeArguments\n        };\n      }\n    case 1 /* Script */:\n      {\n        const bytecode = deserializer.deserializeBytes();\n        const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n        const functionArguments = [];\n        for (let i = 0; i < functionArgumentsLength; i += 1) {\n          const argument = deserializeFromScriptArgument(deserializer);\n          functionArguments.push(argument);\n        }\n        const typeArguments = deserializeTypeArguments(deserializer);\n        return {\n          bytecode,\n          functionArguments,\n          typeArguments\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unexpected variant\");\n      }\n  }\n}\n\n// src/WalletRequest.ts\nfunction serializeWalletRequest({\n  dappInfo,\n  name,\n  version\n}) {\n  const serializer = new Serializer9();\n  serializeDappInfo(serializer, dappInfo);\n  const data = serializer.toUint8Array();\n  return {\n    data,\n    name,\n    version\n  };\n}\nfunction deserializeWalletRequest({\n  data,\n  name,\n  version\n}) {\n  const deserializer = new Deserializer9(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  return {\n    dappInfo,\n    name,\n    version\n  };\n}\nfunction serializeWalletRequestWithArgs({\n  args,\n  dappInfo,\n  name,\n  version\n}, serializeArgsFn) {\n  const serializer = new Serializer9();\n  serializeDappInfo(serializer, dappInfo);\n  serializeArgsFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return {\n    data,\n    name,\n    version\n  };\n}\nfunction deserializeWalletRequestWithArgs({\n  data,\n  name,\n  version\n}, deserializeArgsFn) {\n  const deserializer = new Deserializer9(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  const args = deserializeArgsFn(deserializer);\n  return {\n    args,\n    dappInfo,\n    name,\n    version\n  };\n}\n\n// src/features/connect/request.ts\nvar ConnectRequest;\n(ConnectRequest2 => {\n  ConnectRequest2.name = \"connect\";\n  ConnectRequest2.supportedVersions = [1, 2, 3, 4];\n  ConnectRequest2.currentVersion = 4;\n  function serializeArgs(serializer, value) {\n    serializer.serializeOptionStr(value.dappId);\n    serializer.serializeOptionStr(value.dappEd25519PublicKeyB64);\n    serializer.serializeOptionStr(value.preferredWalletName);\n    serializer.serializeBool(value.claimOptions !== void 0);\n    if (value.claimOptions) {\n      serializer.serialize(value.claimOptions.secretKey);\n      serializer.serializeStr(value.claimOptions.network);\n      serializer.serializeOptionStr(value.claimOptions.asset);\n      if (!isSupportedNetwork(value.claimOptions.network)) {\n        throw new Error(`Unsupported network '${value.claimOptions.network}'`);\n      }\n    }\n  }\n  ConnectRequest2.serializeArgs = serializeArgs;\n  function deserializeArgs(deserializer, version) {\n    if (version === 1) {\n      return {};\n    }\n    const dappId = deserializer.deserializeOption(\"string\");\n    const dappEd25519PublicKeyB64 = deserializer.deserializeOption(\"string\");\n    const preferredWalletName = version >= 3 ? deserializer.deserializeOption(\"string\") : void 0;\n    const hasClaimOptions = version >= 4 ? deserializer.deserializeBool() : false;\n    let claimOptions;\n    if (hasClaimOptions) {\n      const secretKey = deserializer.deserialize(Ed25519PrivateKey);\n      const network = deserializer.deserializeStr();\n      const asset = deserializer.deserializeOption(\"string\");\n      if (!isSupportedNetwork(network)) {\n        throw new Error(`Unsupported network '${network}'`);\n      }\n      claimOptions = {\n        asset,\n        network,\n        secretKey\n      };\n    }\n    return {\n      claimOptions,\n      dappEd25519PublicKeyB64,\n      dappId,\n      preferredWalletName\n    };\n  }\n  ConnectRequest2.deserializeArgs = deserializeArgs;\n  function serialize(dappInfo, args = {}) {\n    return serializeWalletRequestWithArgs({\n      args,\n      dappInfo,\n      name: ConnectRequest2.name,\n      version: ConnectRequest2.currentVersion\n    }, serializeArgs);\n  }\n  ConnectRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequestWithArgs(request, d => deserializeArgs(d, request.version));\n  }\n  ConnectRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === ConnectRequest2.name && ConnectRequest2.supportedVersions.includes(request.version);\n  }\n  ConnectRequest2.isSerialized = isSerialized;\n})(ConnectRequest || (ConnectRequest = {}));\n\n// src/UserResponse.ts\nfunction makeUserApproval(args) {\n  return {\n    args,\n    status: \"approved\"\n  };\n}\nfunction makeUserResponseSerializeFn(serializeArgs) {\n  return (serializer, value) => {\n    serializer.serializeBool(value.status === \"approved\");\n    if (value.status === \"approved\") {\n      serializeArgs(serializer, value.args);\n    }\n  };\n}\nfunction makeUserResponseDeserializeFn(deserializeArgs) {\n  return deserializer => {\n    const isApproved = deserializer.deserializeBool();\n    return isApproved ? {\n      args: deserializeArgs(deserializer),\n      status: \"approved\"\n    } : {\n      status: \"dismissed\"\n    };\n  };\n}\n\n// src/WalletResponse.ts\nimport { Deserializer as Deserializer11, Serializer as Serializer11 } from \"@aptos-labs/ts-sdk\";\nfunction serializeWalletResponse(args, serializeFn) {\n  const serializer = new Serializer11();\n  serializeFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return {\n    data\n  };\n}\nfunction deserializeWalletResponse({\n  data\n}, deserializeFn) {\n  const deserializer = new Deserializer11(data);\n  const args = deserializeFn(deserializer);\n  return {\n    args\n  };\n}\n\n// src/features/connect/response.ts\nvar ConnectResponse;\n(ConnectResponse2 => {\n  ConnectResponse2.supportedVersions = [1, 2];\n  ConnectResponse2.currentVersion = 2;\n  function serializeApprovalArgsV1(serializer, value) {\n    serializeAccountInfo(serializer, value.account);\n  }\n  function serializeApprovalArgs(serializer, value) {\n    serializeAccountInfo(serializer, value.account);\n    serializer.serializeOptionStr(value.pairing !== void 0 ? JSON.stringify(value.pairing) : void 0);\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const account = deserializeAccountInfo(deserializer);\n    const serializedPairing = deserializer.deserializeOption(\"string\");\n    const pairing = serializedPairing !== void 0 ? JSON.parse(serializedPairing) : void 0;\n    return {\n      account,\n      pairing\n    };\n  }\n  const serializeArgsV1 = makeUserResponseSerializeFn(serializeApprovalArgsV1);\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args, version = ConnectResponse2.currentVersion) {\n    return serializeWalletResponse(args, version === 1 ? serializeArgsV1 : serializeArgs);\n  }\n  ConnectResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  ConnectResponse2.deserialize = deserialize;\n})(ConnectResponse || (ConnectResponse = {}));\n\n// src/features/disconnect/request.ts\nvar DisconnectRequest;\n(DisconnectRequest2 => {\n  DisconnectRequest2.name = \"disconnect\";\n  DisconnectRequest2.currentVersion = 1;\n  function serialize(dappInfo) {\n    return serializeWalletRequest({\n      dappInfo,\n      name: DisconnectRequest2.name,\n      version: DisconnectRequest2.currentVersion\n    });\n  }\n  DisconnectRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequest(request);\n  }\n  DisconnectRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === DisconnectRequest2.name && request.version === DisconnectRequest2.currentVersion;\n  }\n  DisconnectRequest2.isSerialized = isSerialized;\n})(DisconnectRequest || (DisconnectRequest = {}));\n\n// src/features/disconnect/response.ts\nvar DisconnectResponse;\n(DisconnectResponse2 => {\n  function serialize(args) {\n    return serializeWalletResponse(args, () => {});\n  }\n  DisconnectResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, () => ({}));\n  }\n  DisconnectResponse2.deserialize = deserialize;\n})(DisconnectResponse || (DisconnectResponse = {}));\n\n// src/shared/AptosSignInInput.ts\nfunction serializeAptosSignInInput(serializer, value) {\n  serializer.serializeStr(JSON.stringify(value));\n}\nfunction deserializeAptosSignInInput(deserializer) {\n  return JSON.parse(deserializer.deserializeStr());\n}\n\n// src/features/signIn/request.ts\nvar SignInRequest;\n(SignInRequest2 => {\n  SignInRequest2.name = \"signIn\";\n  SignInRequest2.supportedVersions = [1, 2];\n  SignInRequest2.currentVersion = 2;\n  function serializeArgs(serializer, value) {\n    if (value.network !== void 0 && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}' in SignInRequest.serializeArgs`);\n    }\n    serializeAptosSignInInput(serializer, value);\n    serializer.serializeStr(value.network);\n  }\n  SignInRequest2.serializeArgs = serializeArgs;\n  function deserializeArgs(deserializer, _) {\n    return {\n      ...deserializeAptosSignInInput(deserializer),\n      network: deserializer.deserializeStr()\n    };\n  }\n  SignInRequest2.deserializeArgs = deserializeArgs;\n  function serialize(dappInfo, args) {\n    return serializeWalletRequestWithArgs({\n      args,\n      dappInfo,\n      name: SignInRequest2.name,\n      version: SignInRequest2.currentVersion\n    }, serializeArgs);\n  }\n  SignInRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequestWithArgs(request, d => deserializeArgs(d, request.version));\n  }\n  SignInRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === SignInRequest2.name && SignInRequest2.supportedVersions.includes(request.version);\n  }\n  SignInRequest2.isSerialized = isSerialized;\n})(SignInRequest || (SignInRequest = {}));\n\n// src/shared/AptosSignInOutput.ts\nimport { AccountInfo } from \"@aptos-labs/wallet-standard\";\nfunction serializeAptosSignInOutputV1(serializer, value) {\n  serializeAccountInfo(serializer, value.account);\n  serializer.serializeStr(JSON.stringify(value.input));\n  serializer.serializeStr(value.plainText);\n  serializeSignature(serializer, value.signature);\n  serializer.serializeBytes(value.signingMessage);\n  serializer.serializeStr(value.type);\n}\nfunction deserializeAptosSignInOutputV1(deserializer) {\n  return {\n    account: new AccountInfo(deserializeAccountInfo(deserializer)),\n    input: JSON.parse(deserializer.deserializeStr()),\n    plainText: deserializer.deserializeStr(),\n    signature: deserializeSignature(deserializer),\n    signingMessage: deserializer.deserializeBytes(),\n    type: deserializer.deserializeStr()\n  };\n}\nfunction serializeAptosSignInOutput(serializer, value) {\n  serializeAccountInfo(serializer, value.account);\n  serializer.serializeStr(JSON.stringify(value.input));\n  serializeSignature(serializer, value.signature);\n  serializer.serializeStr(value.type);\n}\nfunction deserializeAptosSignInOutput(deserializer) {\n  return {\n    account: new AccountInfo(deserializeAccountInfo(deserializer)),\n    input: JSON.parse(deserializer.deserializeStr()),\n    signature: deserializeSignature(deserializer),\n    type: deserializer.deserializeStr()\n  };\n}\n\n// src/features/signIn/response.ts\nvar SignInResponse;\n(SignInResponse2 => {\n  SignInResponse2.supportedVersions = [1, 2];\n  SignInResponse2.currentVersion = 2;\n  function serializeApprovalArgsV1(serializer, value) {\n    serializeAptosSignInOutputV1(serializer, value);\n  }\n  function deserializeApprovalArgsV1(deserializer) {\n    return deserializeAptosSignInOutputV1(deserializer);\n  }\n  function serializeApprovalArgs(serializer, value) {\n    serializeAptosSignInOutput(serializer, value);\n  }\n  function deserializeApprovalArgs(deserializer) {\n    return deserializeAptosSignInOutput(deserializer);\n  }\n  const serializeArgsV1 = makeUserResponseSerializeFn(serializeApprovalArgsV1);\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgsV1 = makeUserResponseDeserializeFn(deserializeApprovalArgsV1);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args, version = SignInResponse2.currentVersion) {\n    return serializeWalletResponse(args, version === 1 ? serializeArgsV1 : serializeArgs);\n  }\n  SignInResponse2.serialize = serialize;\n  function deserialize(serializedResponse, version = SignInResponse2.currentVersion) {\n    return deserializeWalletResponse(serializedResponse, version === 1 ? deserializeArgsV1 : deserializeArgs);\n  }\n  SignInResponse2.deserialize = deserialize;\n})(SignInResponse || (SignInResponse = {}));\n\n// src/features/getConnectedAccounts/request.ts\nvar GetConnectedAccountsRequest;\n(GetConnectedAccountsRequest2 => {\n  GetConnectedAccountsRequest2.name = \"getConnectedAccounts\";\n  GetConnectedAccountsRequest2.currentVersion = 1;\n  function serialize(dappInfo) {\n    return serializeWalletRequest({\n      dappInfo,\n      name: GetConnectedAccountsRequest2.name,\n      version: GetConnectedAccountsRequest2.currentVersion\n    });\n  }\n  GetConnectedAccountsRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequest(request);\n  }\n  GetConnectedAccountsRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === GetConnectedAccountsRequest2.name && request.version === GetConnectedAccountsRequest2.currentVersion;\n  }\n  GetConnectedAccountsRequest2.isSerialized = isSerialized;\n})(GetConnectedAccountsRequest || (GetConnectedAccountsRequest = {}));\n\n// src/features/getConnectedAccounts/response.ts\nvar GetConnectedAccountsResponse;\n(GetConnectedAccountsResponse2 => {\n  function serializeArgs(serializer, args) {\n    serializer.serializeU32AsUleb128(args.length);\n    for (const account of args) {\n      serializeAccountInfo(serializer, account);\n    }\n  }\n  function deserializeArgs(deserializer) {\n    const length = deserializer.deserializeUleb128AsU32();\n    const accounts = [];\n    for (let i = 0; i < length; i += 1) {\n      accounts.push(deserializeAccountInfo(deserializer));\n    }\n    return accounts;\n  }\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  GetConnectedAccountsResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  GetConnectedAccountsResponse2.deserialize = deserialize;\n})(GetConnectedAccountsResponse || (GetConnectedAccountsResponse = {}));\n\n// src/features/isConnected/request.ts\nvar IsConnectedRequest;\n(IsConnectedRequest2 => {\n  IsConnectedRequest2.name = \"isConnected\";\n  IsConnectedRequest2.currentVersion = 1;\n  function serialize(dappInfo) {\n    return serializeWalletRequest({\n      dappInfo,\n      name: IsConnectedRequest2.name,\n      version: IsConnectedRequest2.currentVersion\n    });\n  }\n  IsConnectedRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequest(request);\n  }\n  IsConnectedRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === IsConnectedRequest2.name && request.version === IsConnectedRequest2.currentVersion;\n  }\n  IsConnectedRequest2.isSerialized = isSerialized;\n})(IsConnectedRequest || (IsConnectedRequest = {}));\n\n// src/features/isConnected/response.ts\nvar IsConnectedResponse;\n(IsConnectedResponse2 => {\n  function serializeArgs(serializer, value) {\n    serializer.serializeBool(value);\n  }\n  function deserializeArgs(deserializer) {\n    return deserializer.deserializeBool();\n  }\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  IsConnectedResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  IsConnectedResponse2.deserialize = deserialize;\n})(IsConnectedResponse || (IsConnectedResponse = {}));\n\n// src/features/signAndSubmitTransaction/request.ts\nimport { AccountAddress as AccountAddress6, TransactionPayload } from \"@aptos-labs/ts-sdk\";\nvar SignAndSubmitTransactionRequest;\n(SignAndSubmitTransactionRequest2 => {\n  SignAndSubmitTransactionRequest2.name = \"signAndSubmitTransaction\";\n  SignAndSubmitTransactionRequest2.supportedVersions = [1, 2, 3];\n  SignAndSubmitTransactionRequest2.currentVersion = 3;\n  function serializeArgs(serializer, value) {\n    if (value.network !== void 0 && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n    serializer.serializeBool(value.signerAddress !== void 0);\n    if (value.signerAddress !== void 0) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeOptionStr(value.network);\n    if (\"bcsToBytes\" in value.payload) {\n      serializer.serializeBool(true);\n      serializer.serialize(value.payload);\n    } else {\n      serializer.serializeBool(false);\n      serializeTransactionPayloadInput(serializer, value.payload);\n    }\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n    serializer.serializeU32AsUleb128(value.feePayer ? 1 : 0);\n    if (value.feePayer) {\n      serializeAccountAuthenticatorInput(serializer, value.feePayer);\n    }\n  }\n  SignAndSubmitTransactionRequest2.serializeArgs = serializeArgs;\n  function deserializeArgs(deserializer, version) {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress6) : void 0;\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOption(\"string\");\n    if (network !== void 0 && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n    const isPayloadBcsSerializable = version === 1 || deserializer.deserializeBool();\n    const payload = isPayloadBcsSerializable ? deserializer.deserialize(TransactionPayload) : deserializeTransactionPayloadInput(deserializer);\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n    const hasFeePayer = deserializer.deserializeUleb128AsU32();\n    const feePayer = hasFeePayer ? deserializeAccountAuthenticatorInput(deserializer) : void 0;\n    return {\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : void 0,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : void 0,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : void 0,\n      network,\n      payload,\n      signerAddress\n    };\n  }\n  SignAndSubmitTransactionRequest2.deserializeArgs = deserializeArgs;\n  function serialize(dappInfo, args) {\n    const request = {\n      args,\n      dappInfo,\n      name: SignAndSubmitTransactionRequest2.name,\n      version: SignAndSubmitTransactionRequest2.currentVersion\n    };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n  SignAndSubmitTransactionRequest2.serialize = serialize;\n  function deserialize(serializedRequest) {\n    return deserializeWalletRequestWithArgs(serializedRequest, deserializer => deserializeArgs(deserializer, serializedRequest.version));\n  }\n  SignAndSubmitTransactionRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === SignAndSubmitTransactionRequest2.name && SignAndSubmitTransactionRequest2.supportedVersions.includes(request.version);\n  }\n  SignAndSubmitTransactionRequest2.isSerialized = isSerialized;\n})(SignAndSubmitTransactionRequest || (SignAndSubmitTransactionRequest = {}));\n\n// src/features/signAndSubmitTransaction/response.ts\nvar SignAndSubmitTransactionResponse;\n(SignAndSubmitTransactionResponse2 => {\n  function serializeApprovalArgs(serializer, value) {\n    serializer.serializeStr(value.txnHash);\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const txnHash = deserializer.deserializeStr();\n    return {\n      txnHash\n    };\n  }\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  SignAndSubmitTransactionResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  SignAndSubmitTransactionResponse2.deserialize = deserialize;\n})(SignAndSubmitTransactionResponse || (SignAndSubmitTransactionResponse = {}));\n\n// src/features/signMessage/request.ts\nimport { AccountAddress as AccountAddress7 } from \"@aptos-labs/ts-sdk\";\nvar SignMessageRequest;\n(SignMessageRequest2 => {\n  SignMessageRequest2.name = \"signMessage\";\n  SignMessageRequest2.supportedVersions = [1, 2];\n  SignMessageRequest2.currentVersion = 2;\n  function serializeArgs(serializer, value) {\n    serializer.serializeBool(value.signerAddress !== void 0);\n    if (value.signerAddress !== void 0) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeU8(value.chainId);\n    serializer.serializeBytes(value.nonce);\n    serializer.serializeBytes(value.message);\n  }\n  function deserializeArgs(deserializer, version) {\n    const hasSignerAddress = version >= 2 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress7) : void 0;\n    const chainId = deserializer.deserializeU8();\n    const nonce = deserializer.deserializeBytes();\n    const message = deserializer.deserializeBytes();\n    return {\n      chainId,\n      message,\n      nonce,\n      signerAddress\n    };\n  }\n  function serialize(dappInfo, args) {\n    const request = {\n      args,\n      dappInfo,\n      name: SignMessageRequest2.name,\n      version: SignMessageRequest2.currentVersion\n    };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n  SignMessageRequest2.serialize = serialize;\n  function deserialize(serializedRequest) {\n    return deserializeWalletRequestWithArgs(serializedRequest, d => deserializeArgs(d, serializedRequest.version));\n  }\n  SignMessageRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === SignMessageRequest2.name && request.version === SignMessageRequest2.currentVersion;\n  }\n  SignMessageRequest2.isSerialized = isSerialized;\n})(SignMessageRequest || (SignMessageRequest = {}));\n\n// src/features/signMessage/response.ts\nvar SignMessageResponse;\n(SignMessageResponse2 => {\n  function serializeApprovalArgs(serializer, value) {\n    serializer.serializeStr(value.fullMessage);\n    serializeSignature(serializer, value.signature);\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const fullMessage = deserializer.deserializeStr();\n    const signature = deserializeSignature(deserializer);\n    return {\n      fullMessage,\n      signature\n    };\n  }\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  SignMessageResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  SignMessageResponse2.deserialize = deserialize;\n})(SignMessageResponse || (SignMessageResponse = {}));\n\n// src/features/signTransaction/request.ts\nimport { AccountAddress as AccountAddress8, TransactionPayload as TransactionPayload2 } from \"@aptos-labs/ts-sdk\";\nvar SignTransactionRequest;\n(SignTransactionRequest2 => {\n  SignTransactionRequest2.name = \"signTransaction\";\n  SignTransactionRequest2.supportedVersions = [1, 2, 3, 4];\n  SignTransactionRequest2.currentVersion = 4;\n  function normalizeArgs(args) {\n    const {\n      feePayer,\n      secondarySigners,\n      senderPublicKey,\n      signerAddress,\n      transaction\n    } = args;\n    const sender = {\n      address: transaction.sender,\n      publicKey: senderPublicKey\n    };\n    const network = chainIdToNetwork(args.transaction.chain_id.chainId);\n    return {\n      expirationTimestamp: Number(transaction.expiration_timestamp_secs),\n      feePayer,\n      gasUnitPrice: Number(transaction.gas_unit_price),\n      maxGasAmount: Number(transaction.max_gas_amount),\n      network,\n      payload: transaction.payload,\n      secondarySigners,\n      sender,\n      signerAddress\n    };\n  }\n  SignTransactionRequest2.normalizeArgs = normalizeArgs;\n  function serializeArgs(serializer, value) {\n    if (value.network !== void 0 && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n    serializer.serializeBool(value.signerAddress !== void 0);\n    if (value.signerAddress !== void 0) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeOptionStr(value.network);\n    serializer.serializeBool(value.sender !== void 0);\n    if (value.sender !== void 0) {\n      serializeAccountInput(serializer, value.sender);\n    }\n    if (\"bcsToBytes\" in value.payload) {\n      serializer.serializeBool(true);\n      serializer.serialize(value.payload);\n    } else {\n      serializer.serializeBool(false);\n      serializeTransactionPayloadInput(serializer, value.payload);\n    }\n    serializer.serializeU32AsUleb128(value.expirationSecondsFromNow ?? 0);\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n    serializer.serializeBool(value.feePayer !== void 0);\n    if (value.feePayer !== void 0) {\n      serializeAccountInput(serializer, value.feePayer);\n    }\n    const secondarySigners = value.secondarySigners ?? [];\n    serializer.serializeU32AsUleb128(secondarySigners.length);\n    for (const signer of secondarySigners) {\n      serializeAccountInput(serializer, signer);\n    }\n  }\n  function deserializeArgs(deserializer, version) {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress8) : void 0;\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOption(\"string\");\n    if (network !== void 0 && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n    const hasSender = deserializer.deserializeBool();\n    const sender = hasSender ? deserializeAccountInput(deserializer) : void 0;\n    const isPayloadBcsSerializable = version < 4 || deserializer.deserializeBool();\n    const payload = isPayloadBcsSerializable ? deserializer.deserialize(TransactionPayload2) : deserializeTransactionPayloadInput(deserializer);\n    const expirationSecondsFromNow = deserializer.deserializeUleb128AsU32();\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n    const hasFeePayer = deserializer.deserializeBool();\n    const feePayer = hasFeePayer ? deserializeAccountInput(deserializer) : void 0;\n    const secondarySignersLength = deserializer.deserializeUleb128AsU32();\n    const secondarySigners = [];\n    for (let i = 0; i < secondarySignersLength; i += 1) {\n      secondarySigners.push(deserializeAccountInput(deserializer));\n    }\n    return {\n      expirationSecondsFromNow: expirationSecondsFromNow > 0 ? expirationSecondsFromNow : void 0,\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : void 0,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : void 0,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : void 0,\n      network,\n      payload,\n      secondarySigners,\n      sender,\n      signerAddress\n    };\n  }\n  function serialize(dappInfo, args) {\n    const request = {\n      args,\n      dappInfo,\n      name: SignTransactionRequest2.name,\n      version: SignTransactionRequest2.currentVersion\n    };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n  SignTransactionRequest2.serialize = serialize;\n  function deserialize(serializedRequest) {\n    return deserializeWalletRequestWithArgs(serializedRequest, deserializer => deserializeArgs(deserializer, serializedRequest.version));\n  }\n  SignTransactionRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === SignTransactionRequest2.name && SignTransactionRequest2.supportedVersions.includes(request.version);\n  }\n  SignTransactionRequest2.isSerialized = isSerialized;\n})(SignTransactionRequest || (SignTransactionRequest = {}));\n\n// src/features/signTransaction/response.ts\nimport { AccountAuthenticator as AccountAuthenticator2, RawTransaction as RawTransaction2 } from \"@aptos-labs/ts-sdk\";\nvar SignTransactionResponse;\n(SignTransactionResponse2 => {\n  function serializeApprovalArgs(serializer, value) {\n    serializer.serialize(value.authenticator);\n    serializer.serializeBool(value.rawTransaction !== void 0);\n    if (value.rawTransaction !== void 0) {\n      serializer.serialize(value.rawTransaction);\n    }\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const authenticator = deserializer.deserialize(AccountAuthenticator2);\n    const hasRawTransaction = deserializer.deserializeBool();\n    const rawTransaction = hasRawTransaction ? deserializer.deserialize(RawTransaction2) : void 0;\n    return {\n      authenticator,\n      rawTransaction\n    };\n  }\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  SignTransactionResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  SignTransactionResponse2.deserialize = deserialize;\n})(SignTransactionResponse || (SignTransactionResponse = {}));\n\n// src/messages/common.ts\nfunction isTypedMessage(messageCls, message) {\n  return message?.__messageType === messageCls.TYPE;\n}\n\n// src/messages/prompt.ts\nimport { Deserializer as Deserializer16, Serializer as Serializer16 } from \"@aptos-labs/ts-sdk\";\nvar _PromptConnectionRequestMessage = class _PromptConnectionRequestMessage {\n  constructor() {\n    this.__messageType = _PromptConnectionRequestMessage.TYPE;\n  }\n};\n_PromptConnectionRequestMessage.TYPE = \"PromptConnectionRequest\";\nvar PromptConnectionRequestMessage = _PromptConnectionRequestMessage;\nvar _PromptConnectionResponseMessage = class _PromptConnectionResponseMessage {\n  constructor(serializedRequest) {\n    this.serializedRequest = serializedRequest;\n    this.__messageType = _PromptConnectionResponseMessage.TYPE;\n  }\n};\n_PromptConnectionResponseMessage.TYPE = \"PromptConnectionResponse\";\nvar PromptConnectionResponseMessage = _PromptConnectionResponseMessage;\nvar _PromptApprovalResponseMessage = class _PromptApprovalResponseMessage {\n  constructor(serializedValue) {\n    this.serializedValue = serializedValue;\n    this.__messageType = _PromptApprovalResponseMessage.TYPE;\n  }\n};\n_PromptApprovalResponseMessage.TYPE = \"PromptApprovalResponse\";\nvar PromptApprovalResponseMessage = _PromptApprovalResponseMessage;\nvar _PromptUnauthorizedErrorMessage = class _PromptUnauthorizedErrorMessage {\n  constructor() {\n    this.__messageType = _PromptUnauthorizedErrorMessage.TYPE;\n  }\n};\n_PromptUnauthorizedErrorMessage.TYPE = \"PromptUnauthorizedError\";\nvar PromptUnauthorizedErrorMessage = _PromptUnauthorizedErrorMessage;\nfunction urlEncodeWalletRequest(request) {\n  const serializer = new Serializer16();\n  serializer.serializeStr(request.name);\n  serializer.serializeBytes(request.data);\n  serializer.serializeStr(request.version.toString());\n  return bytesToBase64(serializer.toUint8Array());\n}\nfunction urlDecodeWalletRequest(encodedRequest) {\n  const deserializer = new Deserializer16(base64ToBytes(encodedRequest));\n  const name = deserializer.deserializeStr();\n  const data = deserializer.deserializeBytes();\n  let version;\n  try {\n    version = Number(deserializer.deserializeStr());\n  } catch {\n    version = 1;\n  }\n  return {\n    data,\n    name,\n    version\n  };\n}\n\n// src/PopupWalletRequest.ts\nimport { AccountAddress as AccountAddress9, Ed25519PublicKey as Ed25519PublicKey2, Ed25519Signature as Ed25519Signature2, Serializer as Serializer17 } from \"@aptos-labs/ts-sdk\";\n\n// src/WalletRequestBody.ts\nfunction encodeWalletRequestBody({\n  data,\n  ...rest\n}) {\n  const serialized = JSON.stringify({\n    data,\n    ...rest\n  }, (key, value) => key === \"data\" ? bytesToBase64(value) : value);\n  const utf8Encoded = new TextEncoder().encode(serialized);\n  return bytesToBase64(utf8Encoded);\n}\nfunction decodeWalletRequestBody(encoded) {\n  const utfEncoded = base64ToBytes(encoded);\n  const serialized = new TextDecoder().decode(utfEncoded);\n  return JSON.parse(serialized, (key, value) => key === \"data\" ? base64ToBytes(value) : value);\n}\n\n// src/PopupWalletRequest.ts\nfunction encodePopupWalletRequest(request) {\n  const serialized = JSON.stringify(request, (key, value) => {\n    switch (key) {\n      case \"body\":\n        return encodeWalletRequestBody(value);\n      case \"clientIdentityKey\":\n        return bytesToBase64(value.toUint8Array());\n      case \"signature\":\n        return bytesToBase64(value.toUint8Array());\n      default:\n        return value;\n    }\n  });\n  const utf8Encoded = new TextEncoder().encode(serialized);\n  return bytesToBase64url(utf8Encoded);\n}\nfunction decodePopupWalletRequest(encoded) {\n  const utfEncoded = base64urlToBytes(encoded);\n  const serialized = new TextDecoder().decode(utfEncoded);\n  return JSON.parse(serialized, (key, value) => {\n    switch (key) {\n      case \"body\":\n        return decodeWalletRequestBody(value);\n      case \"clientIdentityKey\":\n        return new Ed25519PublicKey2(base64ToBytes(value));\n      case \"signature\":\n        return new Ed25519Signature2(base64ToBytes(value));\n      default:\n        return value;\n    }\n  });\n}\nfunction makePopupWalletRequestChallenge({\n  accountAddress,\n  body,\n  id,\n  timestamp\n}) {\n  const serializer = new Serializer17();\n  serializer.serializeStr(\"SignedPopupWalletRequest\");\n  serializer.serializeStr(id);\n  serializer.serializeU64(timestamp);\n  serializer.serializeBool(accountAddress !== void 0);\n  if (accountAddress !== void 0) {\n    serializer.serialize(AccountAddress9.from(accountAddress));\n  }\n  serializer.serializeStr(body.name);\n  serializer.serializeU8(body.version);\n  serializer.serializeBytes(body.data);\n  return serializer.toUint8Array();\n}\nexport { ConnectRequest, ConnectResponse, DisconnectRequest, DisconnectResponse, EntryFunctionArgumentVariant, GetConnectedAccountsRequest, GetConnectedAccountsResponse, IsConnectedRequest, IsConnectedResponse, PromptApprovalResponseMessage, PromptConnectionRequestMessage, PromptConnectionResponseMessage, PromptUnauthorizedErrorMessage, SignAndSubmitTransactionRequest, SignAndSubmitTransactionResponse, SignInRequest, SignInResponse, SignMessageRequest, SignMessageResponse, SignTransactionRequest, SignTransactionResponse, TransactionPayloadInputVariant, base64ToBytes, base64urlToBytes, bytesToBase64, bytesToBase64url, chainIdToNetwork, decodePopupWalletRequest, decodeWalletRequestBody, deserializeAccountAuthenticatorInput, deserializeAccountInfo, deserializeAccountInput, deserializeDappInfo, deserializeEntryFunctionArgument, deserializePublicKey, deserializeSignature, deserializeTransactionPayloadInput, deserializeWalletRequest, deserializeWalletRequestWithArgs, deserializeWalletResponse, encodePopupWalletRequest, encodeWalletRequestBody, isSupportedNetwork, isTypedMessage, makePopupWalletRequestChallenge, makeUserApproval, makeUserResponseDeserializeFn, makeUserResponseSerializeFn, serializeAccountAuthenticatorInput, serializeAccountInfo, serializeAccountInput, serializeDappInfo, serializeEntryFunctionArgument, serializePublicKey, serializeSignature, serializeTransactionPayloadInput, serializeWalletRequest, serializeWalletRequestWithArgs, serializeWalletResponse, urlDecodeWalletRequest, urlEncodeWalletRequest };","map":{"version":3,"names":["base64ToBytes","base64","binaryString","atob","Uint8Array","from","m","charCodeAt","bytesToBase64","bytes","String","fromCharCode","btoa","base64urlToBytes","replace","bytesToBase64url","Network","NetworkToChainId","chainIdToNetwork","chainId","mainnet","MAINNET","testnet","TESTNET","DEVNET","isSupportedNetwork","network","includes","Ed25519PrivateKey","Deserializer","Deserializer9","Serializer","Serializer9","AccountAddress","AccountAuthenticator","serializeAccountAuthenticatorInput","serializer","value","serialize","address","authenticator","deserializeAccountAuthenticatorInput","deserializer","deserialize","AccountAddress2","AnyPublicKey","Ed25519PublicKey","MultiEd25519PublicKey","MultiKey","SigningScheme","serializePublicKey","serializeU32AsUleb128","Ed25519","MultiEd25519","SingleKey","Error","deserializePublicKey","signingScheme","deserializeUleb128AsU32","serializeAccountInfo","publicKey","serializeStr","name","deserializeAccountInfo","deserializeStr","length","AccountAddress3","serializeAccountInput","serializeBool","deserializeAccountInput","hasPublicKey","deserializeBool","serializeDappInfo","domain","imageURI","deserializeDappInfo","hasImageUri","AccountAddress4","FixedBytes","EntryFunctionArgumentVariant","EntryFunctionArgumentVariant2","serializeEntryFunctionArgument","argument","Array","isArray","subArgument","toString","serializeBytes","ArrayBuffer","values","deserializeEntryFunctionArgument","variant","args","i","push","deserializeBytes","AnySignature","Ed25519Signature","MultiEd25519Signature","SigningScheme2","serializeSignature","deserializeSignature","AccountAddress5","deserializeFromScriptArgument","Hex","parseTypeTag","TypeTag","TransactionPayloadInputVariant","TransactionPayloadInputVariant2","serializeTypeArguments","typeArguments","typeArgument","typeTag","allowGenerics","deserializeTypeArguments","typeArgumentsLength","serializeEntryFunctionArguments","functionArguments","functionArgument","deserializeEntryFunctionArguments","functionArgumentsLength","serializeTransactionPayloadInput","function","multisigAddress","bytecode","fromHexInput","toUint8Array","serializeForScriptFunction","deserializeTransactionPayloadInput","functionId","serializeWalletRequest","dappInfo","version","data","deserializeWalletRequest","serializeWalletRequestWithArgs","serializeArgsFn","deserializeWalletRequestWithArgs","deserializeArgsFn","ConnectRequest","ConnectRequest2","supportedVersions","currentVersion","serializeArgs","serializeOptionStr","dappId","dappEd25519PublicKeyB64","preferredWalletName","claimOptions","secretKey","asset","deserializeArgs","deserializeOption","hasClaimOptions","request","d","isSerialized","makeUserApproval","status","makeUserResponseSerializeFn","makeUserResponseDeserializeFn","isApproved","Deserializer11","Serializer11","serializeWalletResponse","serializeFn","deserializeWalletResponse","deserializeFn","ConnectResponse","ConnectResponse2","serializeApprovalArgsV1","account","serializeApprovalArgs","pairing","JSON","stringify","deserializeApprovalArgs","serializedPairing","parse","serializeArgsV1","serializedResponse","DisconnectRequest","DisconnectRequest2","DisconnectResponse","DisconnectResponse2","serializeAptosSignInInput","deserializeAptosSignInInput","SignInRequest","SignInRequest2","_","AccountInfo","serializeAptosSignInOutputV1","input","plainText","signature","signingMessage","type","deserializeAptosSignInOutputV1","serializeAptosSignInOutput","deserializeAptosSignInOutput","SignInResponse","SignInResponse2","deserializeApprovalArgsV1","deserializeArgsV1","GetConnectedAccountsRequest","GetConnectedAccountsRequest2","GetConnectedAccountsResponse","GetConnectedAccountsResponse2","accounts","IsConnectedRequest","IsConnectedRequest2","IsConnectedResponse","IsConnectedResponse2","AccountAddress6","TransactionPayload","SignAndSubmitTransactionRequest","SignAndSubmitTransactionRequest2","signerAddress","payload","serializeU64","expirationTimestamp","gasUnitPrice","maxGasAmount","feePayer","hasSignerAddress","isPayloadBcsSerializable","Number","deserializeU64","hasFeePayer","serializedRequest","SignAndSubmitTransactionResponse","SignAndSubmitTransactionResponse2","txnHash","AccountAddress7","SignMessageRequest","SignMessageRequest2","serializeU8","nonce","message","deserializeU8","SignMessageResponse","SignMessageResponse2","fullMessage","AccountAddress8","TransactionPayload2","SignTransactionRequest","SignTransactionRequest2","normalizeArgs","secondarySigners","senderPublicKey","transaction","sender","chain_id","expiration_timestamp_secs","gas_unit_price","max_gas_amount","expirationSecondsFromNow","signer","hasSender","secondarySignersLength","AccountAuthenticator2","RawTransaction","RawTransaction2","SignTransactionResponse","SignTransactionResponse2","rawTransaction","hasRawTransaction","isTypedMessage","messageCls","__messageType","TYPE","Deserializer16","Serializer16","_PromptConnectionRequestMessage","constructor","PromptConnectionRequestMessage","_PromptConnectionResponseMessage","PromptConnectionResponseMessage","_PromptApprovalResponseMessage","serializedValue","PromptApprovalResponseMessage","_PromptUnauthorizedErrorMessage","PromptUnauthorizedErrorMessage","urlEncodeWalletRequest","urlDecodeWalletRequest","encodedRequest","AccountAddress9","Ed25519PublicKey2","Ed25519Signature2","Serializer17","encodeWalletRequestBody","rest","serialized","key","utf8Encoded","TextEncoder","encode","decodeWalletRequestBody","encoded","utfEncoded","TextDecoder","decode","encodePopupWalletRequest","decodePopupWalletRequest","makePopupWalletRequestChallenge","accountAddress","body","id","timestamp"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\base64.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\helpers.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\connect\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\WalletRequest.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\AccountAuthenticatorInput.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\AccountInfo.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\PublicKey.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\AccountInput.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\DappInfo.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\EntryFunctionArgument.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\Signature.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\TransactionPayloadInput.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\UserResponse.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\WalletResponse.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\connect\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\disconnect\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\disconnect\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\AptosSignInInput.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signIn\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\shared\\AptosSignInOutput.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signIn\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\getConnectedAccounts\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\getConnectedAccounts\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\isConnected\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\isConnected\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signAndSubmitTransaction\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signAndSubmitTransaction\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signMessage\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signMessage\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signTransaction\\request.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\features\\signTransaction\\response.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\messages\\common.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\messages\\prompt.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\PopupWalletRequest.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\wallet-api\\src\\WalletRequestBody.ts"],"sourcesContent":["// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport function base64ToBytes(base64: string) {\n  const binaryString = atob(base64);\n  return Uint8Array.from(binaryString, (m) => m.charCodeAt(0));\n}\n\nexport function bytesToBase64(bytes: Uint8Array) {\n  const binaryString = String.fromCharCode(...bytes);\n  return btoa(binaryString);\n}\n\nexport function base64urlToBytes(base64: string) {\n  return base64ToBytes(base64.replace(/-/g, '+').replace(/_/g, '/'));\n}\n\nexport function bytesToBase64url(bytes: Uint8Array) {\n  return bytesToBase64(bytes).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Network, NetworkToChainId, Serializer } from '@aptos-labs/ts-sdk';\n\nexport type SerializeFn<T> = (serializer: Serializer, value: T) => void;\nexport type DeserializeFn<T> = (deserializer: Deserializer) => T;\n\nexport function chainIdToNetwork(chainId: number): Network {\n  switch (chainId) {\n    case NetworkToChainId.mainnet:\n      return Network.MAINNET;\n    case NetworkToChainId.testnet:\n      return Network.TESTNET;\n    default:\n      // TODO: fetch Devnet's chain id and compare, otherwise throw error\n      return Network.DEVNET;\n  }\n}\n\nexport function isSupportedNetwork(network: string): network is Network {\n  return [Network.MAINNET, Network.TESTNET, Network.DEVNET].includes(network as Network);\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Ed25519PrivateKey, Network, Serializer } from '@aptos-labs/ts-sdk';\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\nimport { isSupportedNetwork } from '../../helpers';\n\nexport interface ClaimOptions {\n  asset?: string;\n  network: Network;\n  secretKey: Ed25519PrivateKey;\n}\n\nexport interface ConnectRequest extends WalletRequest<ConnectRequest.RequestName, ConnectRequest.SupportedVersions> {\n  args: ConnectRequest.Args;\n}\n\nexport namespace ConnectRequest {\n  export const name = 'connect' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2, 3, 4] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 4 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export type Args = {\n    claimOptions?: ClaimOptions;\n    dappEd25519PublicKeyB64?: string;\n    dappId?: string;\n    // Whether to display paired accounts under the specified wallet first\n    preferredWalletName?: string;\n  };\n\n  export function serializeArgs(serializer: Serializer, value: Args) {\n    serializer.serializeOptionStr(value.dappId);\n    serializer.serializeOptionStr(value.dappEd25519PublicKeyB64);\n    serializer.serializeOptionStr(value.preferredWalletName);\n\n    serializer.serializeBool(value.claimOptions !== undefined);\n    if (value.claimOptions) {\n      serializer.serialize(value.claimOptions.secretKey);\n      serializer.serializeStr(value.claimOptions.network);\n      serializer.serializeOptionStr(value.claimOptions.asset);\n      if (!isSupportedNetwork(value.claimOptions.network)) {\n        throw new Error(`Unsupported network '${value.claimOptions.network}'`);\n      }\n    }\n  }\n\n  export function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    if (version === 1) {\n      return {};\n    }\n\n    const dappId = deserializer.deserializeOption('string');\n    const dappEd25519PublicKeyB64 = deserializer.deserializeOption('string');\n    const preferredWalletName = version >= 3 ? deserializer.deserializeOption('string') : undefined;\n\n    const hasClaimOptions = version >= 4 ? deserializer.deserializeBool() : false;\n    let claimOptions: ClaimOptions | undefined;\n    if (hasClaimOptions) {\n      const secretKey = deserializer.deserialize(Ed25519PrivateKey);\n      const network = deserializer.deserializeStr();\n      const asset = deserializer.deserializeOption('string');\n\n      if (!isSupportedNetwork(network)) {\n        throw new Error(`Unsupported network '${network}'`);\n      }\n\n      claimOptions = { asset, network, secretKey };\n    }\n\n    return { claimOptions, dappEd25519PublicKeyB64, dappId, preferredWalletName };\n  }\n\n  // endregion\n\n  export function serialize(\n    dappInfo: DappInfo,\n    args: ConnectRequest.Args = {},\n  ): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequestWithArgs({ args, dappInfo, name, version: currentVersion }, serializeArgs);\n  }\n\n  export function deserialize(request: SerializedWalletRequest<RequestName, SupportedVersions>): ConnectRequest {\n    return deserializeWalletRequestWithArgs(request, (d) => deserializeArgs(d, request.version));\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DappInfo, deserializeDappInfo, serializeDappInfo } from './shared';\nimport { DeserializeFn, SerializeFn } from './helpers';\n\nexport interface WalletRequest<RequestName extends string, Version extends number> {\n  dappInfo: DappInfo;\n  name: RequestName;\n  version: Version;\n}\n\nexport interface WalletRequestWithArgs<RequestName extends string, Version extends number, TArgs>\n  extends WalletRequest<RequestName, Version> {\n  args: TArgs;\n}\n\nexport interface SerializedWalletRequest<RequestName extends string = string, Version extends number = number> {\n  data: Uint8Array;\n  name: RequestName;\n  version: Version;\n}\n\nexport function serializeWalletRequest<RequestName extends string, Version extends number>({\n  dappInfo,\n  name,\n  version,\n}: WalletRequest<RequestName, Version>): SerializedWalletRequest<RequestName, Version> {\n  const serializer = new Serializer();\n  serializeDappInfo(serializer, dappInfo);\n  const data = serializer.toUint8Array();\n  return { data, name, version };\n}\n\nexport function deserializeWalletRequest<RequestName extends string, Version extends number>({\n  data,\n  name,\n  version,\n}: SerializedWalletRequest<RequestName, Version>): WalletRequest<RequestName, Version> {\n  const deserializer = new Deserializer(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  return { dappInfo, name, version };\n}\n\nexport function serializeWalletRequestWithArgs<RequestName extends string, Version extends number, TArgs>(\n  { args, dappInfo, name, version }: WalletRequestWithArgs<RequestName, Version, TArgs>,\n  serializeArgsFn: SerializeFn<TArgs>,\n): SerializedWalletRequest<RequestName, Version> {\n  const serializer = new Serializer();\n  serializeDappInfo(serializer, dappInfo);\n  serializeArgsFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return { data, name, version };\n}\n\nexport function deserializeWalletRequestWithArgs<RequestName extends string, Version extends number, TArgs>(\n  { data, name, version }: SerializedWalletRequest<RequestName, Version>,\n  deserializeArgsFn: DeserializeFn<TArgs>,\n): WalletRequestWithArgs<RequestName, Version, TArgs> {\n  const deserializer = new Deserializer(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  const args = deserializeArgsFn(deserializer);\n  return { args, dappInfo, name, version };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, AccountAuthenticator, Deserializer, Serializer } from '@aptos-labs/ts-sdk';\n\nexport interface AccountAuthenticatorInput {\n  address: AccountAddress;\n  authenticator: AccountAuthenticator;\n}\n\nexport function serializeAccountAuthenticatorInput(serializer: Serializer, value: AccountAuthenticatorInput) {\n  serializer.serialize(value.address);\n  serializer.serialize(value.authenticator);\n}\n\nexport function deserializeAccountAuthenticatorInput(deserializer: Deserializer): AccountAuthenticatorInput {\n  const address = deserializer.deserialize(AccountAddress);\n  const authenticator = deserializer.deserialize(AccountAuthenticator);\n  return { address, authenticator };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, Deserializer, PublicKey, Serializer } from '@aptos-labs/ts-sdk';\nimport { deserializePublicKey, serializePublicKey } from './PublicKey';\n\nexport interface AccountInfo {\n  address: AccountAddress;\n  name?: string;\n  publicKey: PublicKey;\n}\n\nexport function serializeAccountInfo(serializer: Serializer, value: AccountInfo) {\n  serializer.serialize(value.address);\n  serializePublicKey(serializer, value.publicKey);\n  serializer.serializeStr(value.name ?? '');\n}\n\nexport function deserializeAccountInfo(deserializer: Deserializer): AccountInfo {\n  const address = deserializer.deserialize(AccountAddress);\n  const publicKey = deserializePublicKey(deserializer);\n  const name = deserializer.deserializeStr();\n  return {\n    address,\n    publicKey,\n    ...(name.length > 0 ? { name } : undefined),\n  };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyPublicKey,\n  Deserializer,\n  Ed25519PublicKey,\n  MultiEd25519PublicKey,\n  MultiKey,\n  PublicKey,\n  Serializer,\n  SigningScheme,\n} from '@aptos-labs/ts-sdk';\n\nexport function serializePublicKey(serializer: Serializer, value: PublicKey) {\n  if (value instanceof Ed25519PublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.Ed25519);\n  } else if (value instanceof MultiEd25519PublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519);\n  } else if (value instanceof AnyPublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.SingleKey);\n  } else if (value instanceof MultiKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiKey);\n  } else {\n    throw new Error('Unexpected public key type');\n  }\n  serializer.serialize(value);\n}\n\nexport function deserializePublicKey(deserializer: Deserializer): PublicKey {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case SigningScheme.Ed25519:\n      return deserializer.deserialize(Ed25519PublicKey);\n    case SigningScheme.MultiEd25519:\n      return deserializer.deserialize(MultiEd25519PublicKey);\n    case SigningScheme.SingleKey:\n      return deserializer.deserialize(AnyPublicKey);\n    case SigningScheme.MultiKey:\n      return deserializer.deserialize(MultiKey);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, Deserializer, PublicKey, Serializer } from '@aptos-labs/ts-sdk';\nimport { deserializePublicKey, serializePublicKey } from './PublicKey';\n\nexport interface AccountInput {\n  address: AccountAddress;\n  publicKey?: PublicKey;\n}\n\nexport function serializeAccountInput(serializer: Serializer, value: AccountInput) {\n  serializer.serialize(value.address);\n  serializer.serializeBool(value.publicKey !== undefined);\n  if (value.publicKey) {\n    serializePublicKey(serializer, value.publicKey);\n  }\n}\n\nexport function deserializeAccountInput(deserializer: Deserializer): AccountInput {\n  const address = deserializer.deserialize(AccountAddress);\n  const hasPublicKey = deserializer.deserializeBool();\n  const publicKey = hasPublicKey ? deserializePublicKey(deserializer) : undefined;\n  return { address, publicKey };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\n\nexport interface DappInfo {\n  domain: string;\n  imageURI?: string;\n  name: string;\n}\n\nexport function serializeDappInfo(serializer: Serializer, value: DappInfo) {\n  serializer.serializeStr(value.domain);\n  serializer.serializeStr(value.name);\n  serializer.serializeBool(value.imageURI !== undefined);\n  if (value.imageURI !== undefined) {\n    serializer.serializeStr(value.imageURI);\n  }\n}\n\nexport function deserializeDappInfo(deserializer: Deserializer): DappInfo {\n  const domain = deserializer.deserializeStr();\n  const name = deserializer.deserializeStr();\n  const hasImageUri = deserializer.deserializeBool();\n  const imageURI = hasImageUri ? deserializer.deserializeStr() : undefined;\n  return { domain, imageURI, name };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountAddress,\n  Deserializer,\n  EntryFunctionArgumentTypes,\n  FixedBytes,\n  Serializer,\n  SimpleEntryFunctionArgumentTypes,\n} from '@aptos-labs/ts-sdk';\n\nexport type EntryFunctionArgument = EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes;\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum EntryFunctionArgumentVariant {\n  Undefined,\n  Array,\n  String,\n  Uint8Array,\n  AccountAddress,\n  FixedBytes,\n}\n\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport function serializeEntryFunctionArgument(serializer: Serializer, argument: EntryFunctionArgument) {\n  // undefined | null -> undefined\n  if (argument === undefined || argument === null) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Undefined);\n    return;\n  }\n\n  // Array -> Array\n  if (Array.isArray(argument)) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Array);\n    serializer.serializeU32AsUleb128(argument.length);\n    for (const subArgument of argument) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n\n  // boolean | number | bigint | string -> string\n  if (\n    typeof argument === 'string' ||\n    typeof argument === 'number' ||\n    typeof argument === 'boolean' ||\n    typeof argument === 'bigint'\n  ) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.String);\n    serializer.serializeStr(argument.toString());\n    return;\n  }\n\n  // Uint8Array -> Uint8Array\n  if (argument instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Uint8Array);\n    serializer.serializeBytes(argument);\n    return;\n  }\n\n  // ArrayBuffer -> Uint8Array\n  if (argument instanceof ArrayBuffer) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Uint8Array);\n    serializer.serializeBytes(new Uint8Array(argument));\n    return;\n  }\n\n  // MoveVector -> Array\n  if ('values' in argument) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Array);\n    serializer.serializeU32AsUleb128(argument.values.length);\n    for (const subArgument of argument.values) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n\n  // AccountAddress -> AccountAddress\n  if ('data' in argument) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.AccountAddress);\n    serializer.serialize(argument);\n    return;\n  }\n\n  // Empty MoveOption -> undefined\n  if (argument.value === undefined) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Undefined);\n    serializer.serialize(argument);\n    return;\n  }\n\n  // FixedBytes -> FixedBytes\n  if (argument.value instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.FixedBytes);\n    serializer.serializeBytes(argument.value);\n    return;\n  }\n\n  // Bool | U8 | U16 | U32 | U64 | U128 | U256 | MoveString -> string\n  serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.String);\n  serializer.serializeStr(argument.value.toString());\n}\n\nexport function deserializeEntryFunctionArgument(deserializer: Deserializer): EntryFunctionArgument {\n  const variant = deserializer.deserializeUleb128AsU32() as EntryFunctionArgumentVariant;\n\n  switch (variant) {\n    // undefined | null | empty MoveOption\n    case EntryFunctionArgumentVariant.Undefined: {\n      return undefined;\n    }\n    // Array | MoveVector\n    case EntryFunctionArgumentVariant.Array: {\n      const length = deserializer.deserializeUleb128AsU32();\n      const args: (EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes)[] = [];\n      for (let i = 0; i < length; i += 1) {\n        const argument = deserializeEntryFunctionArgument(deserializer);\n        args.push(argument);\n      }\n      return args;\n    }\n    // Uint8Array | ArrayBuffer | FixedBytes\n    case EntryFunctionArgumentVariant.Uint8Array: {\n      return deserializer.deserializeBytes();\n    }\n    // AccountAddress\n    case EntryFunctionArgumentVariant.AccountAddress: {\n      return deserializer.deserialize(AccountAddress);\n    }\n    // Bool | U8 | U16 | U32 | U64 | U128 | U256 | MoveString\n    case EntryFunctionArgumentVariant.String: {\n      return deserializer.deserializeStr();\n    }\n    // FixedBytes (custom serialization)\n    case EntryFunctionArgumentVariant.FixedBytes: {\n      const bytes = deserializer.deserializeBytes();\n      return new FixedBytes(bytes);\n    }\n    default: {\n      throw new Error('Unexpected variant');\n    }\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnySignature,\n  Deserializer,\n  Ed25519Signature,\n  MultiEd25519Signature,\n  // This type got renamed in the zeta branch, commenting out until it's synced with main\n  // MultiSignature,\n  Serializer,\n  Signature,\n  SigningScheme,\n} from '@aptos-labs/ts-sdk';\n\nexport function serializeSignature(serializer: Serializer, value: Signature) {\n  if (value instanceof Ed25519Signature) {\n    serializer.serializeU32AsUleb128(SigningScheme.Ed25519);\n  } else if (value instanceof MultiEd25519Signature) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519);\n  } else if (value instanceof AnySignature) {\n    serializer.serializeU32AsUleb128(SigningScheme.SingleKey);\n    // } else if (value instanceof MultiSignature) {\n    //   serializer.serializeU32AsUleb128(SigningScheme.MultiKey);\n  } else {\n    throw new Error('Unexpected signature type');\n  }\n  serializer.serialize(value);\n}\n\nexport function deserializeSignature(deserializer: Deserializer) {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case SigningScheme.Ed25519:\n      return deserializer.deserialize(Ed25519Signature);\n    case SigningScheme.MultiEd25519:\n      return deserializer.deserialize(MultiEd25519Signature);\n    case SigningScheme.SingleKey:\n      return deserializer.deserialize(AnySignature);\n    // case SigningScheme.MultiKey:\n    //   return deserializer.deserialize(MultiSignature);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountAddress,\n  deserializeFromScriptArgument,\n  Deserializer,\n  Hex,\n  InputGenerateTransactionPayloadData,\n  MoveFunctionId,\n  parseTypeTag,\n  ScriptFunctionArgumentTypes,\n  Serializer,\n  TypeArgument,\n  TypeTag,\n} from '@aptos-labs/ts-sdk';\nimport {\n  deserializeEntryFunctionArgument,\n  EntryFunctionArgument,\n  serializeEntryFunctionArgument,\n} from './EntryFunctionArgument';\n\nexport enum TransactionPayloadInputVariant {\n  EntryFunction,\n  Script,\n  Multisig,\n}\n\n// region Utils\n\nfunction serializeTypeArguments(serializer: Serializer, typeArguments: TypeArgument[]) {\n  serializer.serializeU32AsUleb128(typeArguments.length);\n  for (const typeArgument of typeArguments) {\n    const typeTag =\n      typeof typeArgument === 'string' ? parseTypeTag(typeArgument, { allowGenerics: true }) : typeArgument;\n    serializer.serialize(typeTag);\n  }\n}\n\nfunction deserializeTypeArguments(deserializer: Deserializer) {\n  const typeArguments: TypeTag[] = [];\n  const typeArgumentsLength = deserializer.deserializeUleb128AsU32();\n  for (let i = 0; i < typeArgumentsLength; i += 1) {\n    const typeTag = deserializer.deserialize(TypeTag);\n    typeArguments.push(typeTag);\n  }\n  return typeArguments;\n}\n\nfunction serializeEntryFunctionArguments(serializer: Serializer, functionArguments: EntryFunctionArgument[]) {\n  serializer.serializeU32AsUleb128(functionArguments.length);\n  for (const functionArgument of functionArguments) {\n    serializeEntryFunctionArgument(serializer, functionArgument);\n  }\n}\n\nfunction deserializeEntryFunctionArguments(deserializer: Deserializer) {\n  const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n  const functionArguments: EntryFunctionArgument[] = [];\n  for (let i = 0; i < functionArgumentsLength; i += 1) {\n    const functionArgument = deserializeEntryFunctionArgument(deserializer);\n    functionArguments.push(functionArgument);\n  }\n  return functionArguments;\n}\n\n// endregion\n\nexport function serializeTransactionPayloadInput(serializer: Serializer, value: InputGenerateTransactionPayloadData) {\n  if ('multisigAddress' in value) {\n    serializer.serializeU32AsUleb128(TransactionPayloadInputVariant.Multisig);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n    const multisigAddress = AccountAddress.from(value.multisigAddress);\n    serializer.serialize(multisigAddress);\n  } else if ('function' in value) {\n    serializer.serializeU32AsUleb128(TransactionPayloadInputVariant.EntryFunction);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n    // TODO: possibly serialize ABI?\n  } else {\n    serializer.serializeU32AsUleb128(TransactionPayloadInputVariant.Script);\n    const bytecode = Hex.fromHexInput(value.bytecode);\n    serializer.serializeBytes(bytecode.toUint8Array());\n    serializer.serializeU32AsUleb128(value.functionArguments.length);\n    for (const argument of value.functionArguments) {\n      argument.serializeForScriptFunction(serializer);\n    }\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n  }\n}\n\nexport function deserializeTransactionPayloadInput(deserializer: Deserializer): InputGenerateTransactionPayloadData {\n  const variant = deserializer.deserializeUleb128AsU32();\n  switch (variant) {\n    case TransactionPayloadInputVariant.Multisig: {\n      const functionId = deserializer.deserializeStr() as MoveFunctionId;\n      const functionArguments = deserializeEntryFunctionArguments(deserializer);\n      const typeArguments = deserializeTypeArguments(deserializer);\n      const multisigAddress = deserializer.deserialize(AccountAddress);\n      return {\n        function: functionId,\n        functionArguments,\n        multisigAddress,\n        typeArguments,\n      };\n    }\n    case TransactionPayloadInputVariant.EntryFunction: {\n      const functionId = deserializer.deserializeStr() as MoveFunctionId;\n      const functionArguments = deserializeEntryFunctionArguments(deserializer);\n      const typeArguments = deserializeTypeArguments(deserializer);\n      return {\n        function: functionId,\n        functionArguments,\n        typeArguments,\n      };\n    }\n    case TransactionPayloadInputVariant.Script: {\n      const bytecode = deserializer.deserializeBytes();\n      const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n      const functionArguments: ScriptFunctionArgumentTypes[] = [];\n      for (let i = 0; i < functionArgumentsLength; i += 1) {\n        const argument = deserializeFromScriptArgument(deserializer);\n        functionArguments.push(argument as ScriptFunctionArgumentTypes);\n      }\n      const typeArguments = deserializeTypeArguments(deserializer);\n      return {\n        bytecode,\n        functionArguments,\n        typeArguments,\n      };\n    }\n    default: {\n      throw new Error('Unexpected variant');\n    }\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DeserializeFn, SerializeFn } from './helpers';\n\nexport interface UserApproval<TApprovalArgs> {\n  args: TApprovalArgs;\n  status: 'approved';\n}\n\nexport interface UserDismissal {\n  status: 'dismissed';\n}\n\nexport type UserResponse<TApprovalArgs> = UserApproval<TApprovalArgs> | UserDismissal;\n\nexport function makeUserApproval<TApprovalArgs>(args: TApprovalArgs): UserApproval<TApprovalArgs> {\n  return { args, status: 'approved' };\n}\n\nexport function makeUserResponseSerializeFn<TArgs>(\n  serializeArgs: SerializeFn<TArgs>,\n): SerializeFn<UserResponse<TArgs>> {\n  return (serializer: Serializer, value: UserResponse<TArgs>) => {\n    serializer.serializeBool(value.status === 'approved');\n    if (value.status === 'approved') {\n      serializeArgs(serializer, value.args);\n    }\n  };\n}\n\nexport function makeUserResponseDeserializeFn<TArgs>(\n  deserializeArgs: DeserializeFn<TArgs>,\n): DeserializeFn<UserResponse<TArgs>> {\n  return (deserializer: Deserializer) => {\n    const isApproved = deserializer.deserializeBool();\n    return isApproved ? { args: deserializeArgs(deserializer), status: 'approved' } : { status: 'dismissed' };\n  };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DeserializeFn, SerializeFn } from './helpers';\n\nexport interface WalletResponseWithArgs<TResponseArgs> {\n  args: TResponseArgs;\n}\n\nexport interface SerializedWalletResponse {\n  data: Uint8Array;\n}\n\nexport function serializeWalletResponse<TArgs>(args: TArgs, serializeFn: SerializeFn<TArgs>): SerializedWalletResponse {\n  const serializer = new Serializer();\n  serializeFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return { data };\n}\n\nexport function deserializeWalletResponse<TArgs>(\n  { data }: SerializedWalletResponse,\n  deserializeFn: DeserializeFn<TArgs>,\n): WalletResponseWithArgs<TArgs> {\n  const deserializer = new Deserializer(data);\n  const args = deserializeFn(deserializer);\n  return { args };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { FinalizedPairingData, SerializedDate } from '@identity-connect/api';\nimport { type AccountInfo, deserializeAccountInfo, serializeAccountInfo } from '../../shared';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface ConnectResponse extends WalletResponseWithArgs<ConnectResponse.Args> {}\n\nexport namespace ConnectResponse {\n  export const supportedVersions = [1, 2] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 2 as const;\n\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    account: AccountInfo;\n    pairing?: SerializedDate<FinalizedPairingData>;\n  }\n\n  function serializeApprovalArgsV1(serializer: Serializer, value: ApprovalArgs) {\n    serializeAccountInfo(serializer, value.account);\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializeAccountInfo(serializer, value.account);\n    serializer.serializeOptionStr(value.pairing !== undefined ? JSON.stringify(value.pairing) : undefined);\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const account = deserializeAccountInfo(deserializer);\n    const serializedPairing = deserializer.deserializeOption('string');\n    const pairing = serializedPairing !== undefined ? JSON.parse(serializedPairing) : undefined;\n    return { account, pairing };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgsV1 = makeUserResponseSerializeFn(serializeApprovalArgsV1);\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = ConnectResponse;\n\n  export function serialize(args: Args, version: SupportedVersions = currentVersion): SerializedWalletResponse {\n    return serializeWalletResponse(args, version === 1 ? serializeArgsV1 : serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequest,\n  SerializedWalletRequest,\n  serializeWalletRequest,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface DisconnectRequest\n  extends WalletRequest<DisconnectRequest.RequestName, DisconnectRequest.CurrentVersion> {}\n\nexport namespace DisconnectRequest {\n  export const name = 'disconnect' as const;\n  export type RequestName = typeof name;\n\n  export const currentVersion = 1 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  export function serialize(dappInfo: DappInfo): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequest({ dappInfo, name, version: currentVersion });\n  }\n\n  export function deserialize(request: SerializedWalletRequest<RequestName, CurrentVersion>): DisconnectRequest {\n    return deserializeWalletRequest(request);\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, CurrentVersion> {\n    return request.name === name && request.version === currentVersion;\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface DisconnectResponse extends WalletResponseWithArgs<DisconnectResponse.Args> {}\n\nexport namespace DisconnectResponse {\n  export type Args = {};\n  type _Response = DisconnectResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, () => {});\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, () => ({}));\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { AptosSignInInput } from '@aptos-labs/wallet-standard';\n\nexport function serializeAptosSignInInput(serializer: Serializer, value: AptosSignInInput) {\n  serializer.serializeStr(JSON.stringify(value));\n}\n\nexport function deserializeAptosSignInInput(deserializer: Deserializer): AptosSignInInput {\n  return JSON.parse(deserializer.deserializeStr());\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Network, Serializer } from '@aptos-labs/ts-sdk';\nimport { AptosSignInInput } from '@aptos-labs/wallet-standard';\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\nimport { deserializeAptosSignInInput, serializeAptosSignInInput } from '../../shared/AptosSignInInput';\nimport { isSupportedNetwork } from '../../helpers';\n\nexport interface SignInRequest extends WalletRequest<SignInRequest.RequestName, SignInRequest.SupportedVersions> {\n  args: SignInRequest.Args;\n}\n\nexport namespace SignInRequest {\n  export const name = 'signIn' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n\n  export const currentVersion = 2 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export type Args = AptosSignInInput & {\n    network: Network;\n  };\n\n  export function serializeArgs(serializer: Serializer, value: Args) {\n    if (value.network !== undefined && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}' in SignInRequest.serializeArgs`);\n    }\n\n    serializeAptosSignInInput(serializer, value);\n    serializer.serializeStr(value.network);\n  }\n\n  export function deserializeArgs(deserializer: Deserializer, _: SupportedVersions): Args {\n    return { ...deserializeAptosSignInInput(deserializer), network: deserializer.deserializeStr() as Network };\n  }\n\n  // endregion\n\n  export function serialize(\n    dappInfo: DappInfo,\n    args: SignInRequest.Args,\n  ): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequestWithArgs({ args, dappInfo, name, version: currentVersion }, serializeArgs);\n  }\n\n  export function deserialize(request: SerializedWalletRequest<RequestName, SupportedVersions>): SignInRequest {\n    return deserializeWalletRequestWithArgs(request, (d) => deserializeArgs(d, request.version));\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { AccountInfo, AptosSignInOutput } from '@aptos-labs/wallet-standard';\nimport { deserializeSignature, serializeSignature } from './Signature';\nimport { serializeAccountInfo, deserializeAccountInfo } from './AccountInfo';\n\nexport function serializeAptosSignInOutputV1(\n  serializer: Serializer,\n  value: AptosSignInOutput & { plainText: string; signingMessage: Uint8Array },\n) {\n  serializeAccountInfo(serializer, value.account);\n  serializer.serializeStr(JSON.stringify(value.input));\n  serializer.serializeStr(value.plainText);\n  serializeSignature(serializer, value.signature);\n  serializer.serializeBytes(value.signingMessage);\n  serializer.serializeStr(value.type);\n}\n\nexport function deserializeAptosSignInOutputV1(\n  deserializer: Deserializer,\n): AptosSignInOutput & { plainText: string; signingMessage: Uint8Array } {\n  return {\n    account: new AccountInfo(deserializeAccountInfo(deserializer)),\n    input: JSON.parse(deserializer.deserializeStr()),\n    plainText: deserializer.deserializeStr(),\n    signature: deserializeSignature(deserializer),\n    signingMessage: deserializer.deserializeBytes(),\n    type: deserializer.deserializeStr(),\n  };\n}\n\nexport function serializeAptosSignInOutput(serializer: Serializer, value: AptosSignInOutput) {\n  serializeAccountInfo(serializer, value.account);\n  serializer.serializeStr(JSON.stringify(value.input));\n  serializeSignature(serializer, value.signature);\n  serializer.serializeStr(value.type);\n}\n\nexport function deserializeAptosSignInOutput(deserializer: Deserializer): AptosSignInOutput {\n  return {\n    account: new AccountInfo(deserializeAccountInfo(deserializer)),\n    input: JSON.parse(deserializer.deserializeStr()),\n    signature: deserializeSignature(deserializer),\n    type: deserializer.deserializeStr(),\n  };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { AptosSignInOutput } from '@aptos-labs/wallet-standard';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\nimport {\n  deserializeAptosSignInOutput,\n  deserializeAptosSignInOutputV1,\n  serializeAptosSignInOutput,\n  serializeAptosSignInOutputV1,\n} from '../../shared/AptosSignInOutput';\n\nexport interface SignInResponse extends WalletResponseWithArgs<SignInResponse.Args> {}\n\nexport namespace SignInResponse {\n  export const supportedVersions = [1, 2] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n\n  export const currentVersion = 2 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region ApprovalArgs\n\n  export interface ApprovalArgsV1 extends AptosSignInOutput {\n    plainText: string;\n    signingMessage: Uint8Array;\n  }\n\n  export interface ApprovalArgs extends AptosSignInOutput {}\n\n  function serializeApprovalArgsV1(serializer: Serializer, value: ApprovalArgsV1) {\n    serializeAptosSignInOutputV1(serializer, value);\n  }\n\n  function deserializeApprovalArgsV1(deserializer: Deserializer): ApprovalArgsV1 {\n    return deserializeAptosSignInOutputV1(deserializer);\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializeAptosSignInOutput(serializer, value);\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    return deserializeAptosSignInOutput(deserializer);\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgsV1 = makeUserResponseSerializeFn(serializeApprovalArgsV1);\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n\n  const deserializeArgsV1 = makeUserResponseDeserializeFn(deserializeApprovalArgsV1);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = SignInResponse;\n\n  export function serialize(args: Args, version: SupportedVersions = currentVersion): SerializedWalletResponse {\n    return serializeWalletResponse(args as any, version === 1 ? serializeArgsV1 : serializeArgs);\n  }\n\n  export function deserialize(\n    serializedResponse: SerializedWalletResponse,\n    version: SupportedVersions = currentVersion,\n  ): _Response {\n    return deserializeWalletResponse(serializedResponse, version === 1 ? deserializeArgsV1 : deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequest,\n  SerializedWalletRequest,\n  serializeWalletRequest,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface GetConnectedAccountsRequest\n  extends WalletRequest<GetConnectedAccountsRequest.RequestName, GetConnectedAccountsRequest.CurrentVersion> {}\n\nexport namespace GetConnectedAccountsRequest {\n  export const name = 'getConnectedAccounts' as const;\n  export type RequestName = typeof name;\n\n  export const currentVersion = 1 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  export function serialize(dappInfo: DappInfo): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequest({ dappInfo, name, version: currentVersion });\n  }\n\n  export function deserialize(\n    request: SerializedWalletRequest<RequestName, CurrentVersion>,\n  ): GetConnectedAccountsRequest {\n    return deserializeWalletRequest(request);\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, CurrentVersion> {\n    return request.name === name && request.version === currentVersion;\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { type AccountInfo, deserializeAccountInfo, serializeAccountInfo } from '../../shared';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface GetConnectedAccountsResponse extends WalletResponseWithArgs<GetConnectedAccountsResponse.Args> {}\n\nexport namespace GetConnectedAccountsResponse {\n  // region Args\n\n  export type Args = AccountInfo[];\n\n  function serializeArgs(serializer: Serializer, args: Args) {\n    serializer.serializeU32AsUleb128(args.length);\n    for (const account of args) {\n      serializeAccountInfo(serializer, account);\n    }\n  }\n\n  function deserializeArgs(deserializer: Deserializer): Args {\n    const length = deserializer.deserializeUleb128AsU32();\n\n    const accounts: AccountInfo[] = [];\n    for (let i = 0; i < length; i += 1) {\n      accounts.push(deserializeAccountInfo(deserializer));\n    }\n\n    return accounts;\n  }\n\n  // endregion\n\n  type _Response = GetConnectedAccountsResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequest,\n  SerializedWalletRequest,\n  serializeWalletRequest,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface IsConnectedRequest\n  extends WalletRequest<IsConnectedRequest.RequestName, IsConnectedRequest.CurrentVersion> {}\n\nexport namespace IsConnectedRequest {\n  export const name = 'isConnected' as const;\n  export type RequestName = typeof name;\n\n  export const currentVersion = 1 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  export function serialize(dappInfo: DappInfo): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequest({ dappInfo, name, version: currentVersion });\n  }\n\n  export function deserialize(request: SerializedWalletRequest<RequestName, CurrentVersion>): IsConnectedRequest {\n    return deserializeWalletRequest(request);\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, CurrentVersion> {\n    return request.name === name && request.version === currentVersion;\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface IsConnectedResponse extends WalletResponseWithArgs<IsConnectedResponse.Args> {}\n\nexport namespace IsConnectedResponse {\n  // region Args\n\n  export type Args = boolean;\n\n  function serializeArgs(serializer: Serializer, value: Args) {\n    serializer.serializeBool(value);\n  }\n\n  function deserializeArgs(deserializer: Deserializer): Args {\n    return deserializer.deserializeBool();\n  }\n\n  // endregion\n\n  type _Response = IsConnectedResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountAddress,\n  Deserializer,\n  InputGenerateTransactionPayloadData,\n  Network,\n  Serializer,\n  TransactionPayload,\n} from '@aptos-labs/ts-sdk';\nimport { isSupportedNetwork } from '../../helpers';\nimport {\n  AccountAuthenticatorInput,\n  DappInfo,\n  deserializeAccountAuthenticatorInput,\n  deserializeTransactionPayloadInput,\n  serializeAccountAuthenticatorInput,\n  serializeTransactionPayloadInput,\n} from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface SignAndSubmitTransactionRequest\n  extends WalletRequest<\n    SignAndSubmitTransactionRequest.RequestName,\n    SignAndSubmitTransactionRequest.SupportedVersions\n  > {\n  args: SignAndSubmitTransactionRequest.Args;\n}\n\nexport namespace SignAndSubmitTransactionRequest {\n  export const name = 'signAndSubmitTransaction' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2, 3] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 3 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export interface Args {\n    expirationTimestamp?: number;\n    feePayer?: AccountAuthenticatorInput;\n    gasUnitPrice?: number;\n    maxGasAmount?: number;\n    network?: Network;\n    payload: TransactionPayload | InputGenerateTransactionPayloadData;\n    signerAddress?: AccountAddress;\n  }\n\n  export function serializeArgs(serializer: Serializer, value: Args) {\n    if (value.network !== undefined && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n\n    serializer.serializeBool(value.signerAddress !== undefined);\n    if (value.signerAddress !== undefined) {\n      serializer.serialize(value.signerAddress);\n    }\n\n    serializer.serializeOptionStr(value.network);\n\n    if ('bcsToBytes' in value.payload) {\n      serializer.serializeBool(true);\n      serializer.serialize(value.payload);\n    } else {\n      serializer.serializeBool(false);\n      serializeTransactionPayloadInput(serializer, value.payload);\n    }\n\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n    serializer.serializeU32AsUleb128(value.feePayer ? 1 : 0);\n    if (value.feePayer) {\n      serializeAccountAuthenticatorInput(serializer, value.feePayer);\n    }\n  }\n\n  export function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress) : undefined;\n\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOption('string');\n    if (network !== undefined && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n\n    const isPayloadBcsSerializable = version === 1 || deserializer.deserializeBool();\n    const payload = isPayloadBcsSerializable\n      ? deserializer.deserialize(TransactionPayload)\n      : deserializeTransactionPayloadInput(deserializer);\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n    const hasFeePayer = deserializer.deserializeUleb128AsU32();\n    const feePayer = hasFeePayer ? deserializeAccountAuthenticatorInput(deserializer) : undefined;\n\n    return {\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : undefined,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : undefined,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : undefined,\n      network,\n      payload,\n      signerAddress,\n    };\n  }\n\n  // endregion\n\n  // region Request\n\n  export function serialize(dappInfo: DappInfo, args: Args): SerializedWalletRequest<RequestName, CurrentVersion> {\n    const request = { args, dappInfo, name, version: currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n\n  export function deserialize(\n    serializedRequest: SerializedWalletRequest<RequestName, SupportedVersions>,\n  ): SignAndSubmitTransactionRequest {\n    return deserializeWalletRequestWithArgs(serializedRequest, (deserializer) =>\n      deserializeArgs(deserializer, serializedRequest.version),\n    );\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);\n  }\n\n  // endregion\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface SignAndSubmitTransactionResponse\n  extends WalletResponseWithArgs<SignAndSubmitTransactionResponse.Args> {}\n\nexport namespace SignAndSubmitTransactionResponse {\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    txnHash: string;\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializer.serializeStr(value.txnHash);\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const txnHash = deserializer.deserializeStr();\n    return { txnHash };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = SignAndSubmitTransactionResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { AccountAddress, Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface SignMessageRequest\n  extends WalletRequest<SignMessageRequest.RequestName, SignMessageRequest.SupportedVersions> {\n  args: SignMessageRequest.Args;\n}\n\nexport namespace SignMessageRequest {\n  export const name = 'signMessage' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 2 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export interface Args {\n    chainId: number;\n    message: Uint8Array;\n    nonce: Uint8Array;\n    signerAddress?: AccountAddress;\n  }\n\n  function serializeArgs(serializer: Serializer, value: Args) {\n    serializer.serializeBool(value.signerAddress !== undefined);\n    if (value.signerAddress !== undefined) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeU8(value.chainId);\n    serializer.serializeBytes(value.nonce);\n    serializer.serializeBytes(value.message);\n  }\n\n  function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    const hasSignerAddress = version >= 2 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress) : undefined;\n    const chainId = deserializer.deserializeU8();\n    const nonce = deserializer.deserializeBytes();\n    const message = deserializer.deserializeBytes();\n    return { chainId, message, nonce, signerAddress };\n  }\n\n  // endregion\n\n  // region Request\n\n  export function serialize(dappInfo: DappInfo, args: Args): SerializedWalletRequest<RequestName, CurrentVersion> {\n    const request = { args, dappInfo, name, version: currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n\n  export function deserialize(\n    serializedRequest: SerializedWalletRequest<RequestName, SupportedVersions>,\n  ): SignMessageRequest {\n    return deserializeWalletRequestWithArgs(serializedRequest, (d) => deserializeArgs(d, serializedRequest.version));\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && request.version === currentVersion;\n  }\n\n  // endregion\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer, Signature } from '@aptos-labs/ts-sdk';\nimport { deserializeSignature, serializeSignature } from '../../shared';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface SignMessageResponse extends WalletResponseWithArgs<SignMessageResponse.Args> {}\n\nexport namespace SignMessageResponse {\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    // Should return message parts\n    fullMessage: string;\n    signature: Signature;\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializer.serializeStr(value.fullMessage);\n    serializeSignature(serializer, value.signature);\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const fullMessage = deserializer.deserializeStr();\n    const signature = deserializeSignature(deserializer);\n    return { fullMessage, signature };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = SignMessageResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport {\n  AccountAddress,\n  Deserializer,\n  InputGenerateTransactionPayloadData,\n  Network,\n  PublicKey,\n  RawTransaction,\n  Serializer,\n  TransactionPayload,\n} from '@aptos-labs/ts-sdk';\nimport { chainIdToNetwork, isSupportedNetwork } from '../../helpers';\nimport {\n  AccountInput,\n  DappInfo,\n  deserializeAccountInput,\n  deserializeTransactionPayloadInput,\n  serializeAccountInput,\n  serializeTransactionPayloadInput,\n} from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface SignTransactionRequest\n  extends WalletRequest<SignTransactionRequest.RequestName, SignTransactionRequest.SupportedVersions> {\n  args: SignTransactionRequest.Args;\n}\n\nexport namespace SignTransactionRequest {\n  export const name = 'signTransaction' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2, 3, 4] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 4 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export interface Args {\n    expirationSecondsFromNow?: number;\n    expirationTimestamp?: number;\n    feePayer?: AccountInput;\n    gasUnitPrice?: number;\n    maxGasAmount?: number;\n    network?: Network;\n    payload: TransactionPayload | InputGenerateTransactionPayloadData;\n    secondarySigners?: AccountInput[];\n    sender?: AccountInput;\n    sequenceNumber?: number | bigint;\n    signerAddress?: AccountAddress;\n  }\n\n  export interface ArgsWithTransaction {\n    feePayer?: AccountInput;\n    secondarySigners?: AccountInput[];\n    senderPublicKey?: PublicKey;\n    signerAddress?: AccountAddress;\n    transaction: RawTransaction;\n  }\n\n  export function normalizeArgs(args: ArgsWithTransaction): Args {\n    const { feePayer, secondarySigners, senderPublicKey, signerAddress, transaction } = args;\n\n    const sender: AccountInput = {\n      address: transaction.sender,\n      publicKey: senderPublicKey,\n    };\n\n    const network = chainIdToNetwork(args.transaction.chain_id.chainId);\n\n    return {\n      expirationTimestamp: Number(transaction.expiration_timestamp_secs),\n      feePayer,\n      gasUnitPrice: Number(transaction.gas_unit_price),\n      maxGasAmount: Number(transaction.max_gas_amount),\n      network,\n      payload: transaction.payload,\n      secondarySigners,\n      sender,\n      signerAddress,\n    };\n  }\n\n  function serializeArgs(serializer: Serializer, value: Args) {\n    if (value.network !== undefined && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n\n    serializer.serializeBool(value.signerAddress !== undefined);\n    if (value.signerAddress !== undefined) {\n      serializer.serialize(value.signerAddress);\n    }\n\n    serializer.serializeOptionStr(value.network);\n    serializer.serializeBool(value.sender !== undefined);\n    if (value.sender !== undefined) {\n      serializeAccountInput(serializer, value.sender);\n    }\n\n    if ('bcsToBytes' in value.payload) {\n      serializer.serializeBool(true);\n      serializer.serialize(value.payload);\n    } else {\n      serializer.serializeBool(false);\n      serializeTransactionPayloadInput(serializer, value.payload);\n    }\n\n    serializer.serializeU32AsUleb128(value.expirationSecondsFromNow ?? 0);\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n\n    serializer.serializeBool(value.feePayer !== undefined);\n    if (value.feePayer !== undefined) {\n      serializeAccountInput(serializer, value.feePayer);\n    }\n\n    const secondarySigners = value.secondarySigners ?? [];\n    serializer.serializeU32AsUleb128(secondarySigners.length);\n    for (const signer of secondarySigners) {\n      serializeAccountInput(serializer, signer);\n    }\n  }\n\n  function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress) : undefined;\n\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOption('string');\n    if (network !== undefined && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n\n    const hasSender = deserializer.deserializeBool();\n    const sender = hasSender ? deserializeAccountInput(deserializer) : undefined;\n\n    const isPayloadBcsSerializable = version < 4 || deserializer.deserializeBool();\n    const payload = isPayloadBcsSerializable\n      ? deserializer.deserialize(TransactionPayload)\n      : deserializeTransactionPayloadInput(deserializer);\n\n    const expirationSecondsFromNow = deserializer.deserializeUleb128AsU32();\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n    const hasFeePayer = deserializer.deserializeBool();\n    const feePayer = hasFeePayer ? deserializeAccountInput(deserializer) : undefined;\n\n    const secondarySignersLength = deserializer.deserializeUleb128AsU32();\n    const secondarySigners: AccountInput[] = [];\n    for (let i = 0; i < secondarySignersLength; i += 1) {\n      secondarySigners.push(deserializeAccountInput(deserializer));\n    }\n\n    return {\n      expirationSecondsFromNow: expirationSecondsFromNow > 0 ? expirationSecondsFromNow : undefined,\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : undefined,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : undefined,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : undefined,\n      network,\n      payload,\n      secondarySigners,\n      sender,\n      signerAddress,\n    };\n  }\n\n  // endregion\n\n  // region Request\n\n  export function serialize(dappInfo: DappInfo, args: Args): SerializedWalletRequest<RequestName, CurrentVersion> {\n    const request = { args, dappInfo, name, version: currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n\n  export function deserialize(\n    serializedRequest: SerializedWalletRequest<RequestName, SupportedVersions>,\n  ): SignTransactionRequest {\n    return deserializeWalletRequestWithArgs(serializedRequest, (deserializer) =>\n      deserializeArgs(deserializer, serializedRequest.version),\n    );\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);\n  }\n\n  // endregion\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { AccountAuthenticator, Deserializer, RawTransaction, Serializer } from '@aptos-labs/ts-sdk';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface SignTransactionResponse extends WalletResponseWithArgs<SignTransactionResponse.Args> {}\n\nexport namespace SignTransactionResponse {\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    authenticator: AccountAuthenticator;\n    rawTransaction?: RawTransaction;\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializer.serialize(value.authenticator);\n    serializer.serializeBool(value.rawTransaction !== undefined);\n    if (value.rawTransaction !== undefined) {\n      serializer.serialize(value.rawTransaction);\n    }\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const authenticator = deserializer.deserialize(AccountAuthenticator);\n    const hasRawTransaction = deserializer.deserializeBool();\n    const rawTransaction = hasRawTransaction ? deserializer.deserialize(RawTransaction) : undefined;\n\n    return {\n      authenticator,\n      rawTransaction,\n    };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = SignTransactionResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport type TypedMessage<MessageType extends string = string> = { __messageType: MessageType };\nexport type TypedMessageConstructor<TMessage extends TypedMessage<MessageType>, MessageType extends string> = {\n  TYPE: MessageType;\n  new (...args: any[]): TMessage;\n};\n\nexport function isTypedMessage<TMessage extends TypedMessage<MessageType>, MessageType extends string>(\n  messageCls: TypedMessageConstructor<TMessage, MessageType>,\n  message: any,\n): message is TMessage {\n  return message?.__messageType === messageCls.TYPE;\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { base64ToBytes, bytesToBase64 } from '../base64';\nimport { SerializedWalletRequest } from '../WalletRequest';\nimport { SerializedWalletResponse } from '../WalletResponse';\nimport { TypedMessage } from './common';\n\nexport class PromptConnectionRequestMessage implements TypedMessage {\n  static readonly TYPE = 'PromptConnectionRequest';\n  readonly __messageType = PromptConnectionRequestMessage.TYPE;\n}\n\nexport class PromptConnectionResponseMessage implements TypedMessage {\n  static readonly TYPE = 'PromptConnectionResponse';\n  readonly __messageType = PromptConnectionResponseMessage.TYPE;\n\n  constructor(public serializedRequest: SerializedWalletRequest) {}\n}\n\nexport class PromptApprovalResponseMessage implements TypedMessage {\n  static readonly TYPE = 'PromptApprovalResponse';\n  readonly __messageType = PromptApprovalResponseMessage.TYPE;\n\n  constructor(public serializedValue: SerializedWalletResponse) {}\n}\n\nexport class PromptUnauthorizedErrorMessage implements TypedMessage {\n  static readonly TYPE = 'PromptUnauthorizedError';\n  readonly __messageType = PromptUnauthorizedErrorMessage.TYPE;\n}\n\nexport function urlEncodeWalletRequest(request: SerializedWalletRequest) {\n  const serializer = new Serializer();\n  serializer.serializeStr(request.name);\n  serializer.serializeBytes(request.data);\n  serializer.serializeStr(request.version.toString());\n  return bytesToBase64(serializer.toUint8Array());\n}\n\nexport function urlDecodeWalletRequest(encodedRequest: string): SerializedWalletRequest {\n  const deserializer = new Deserializer(base64ToBytes(encodedRequest));\n  const name = deserializer.deserializeStr();\n  const data = deserializer.deserializeBytes();\n\n  let version: number;\n  try {\n    version = Number(deserializer.deserializeStr());\n  } catch {\n    version = 1;\n  }\n  return { data, name, version };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountAddress,\n  AccountAddressInput,\n  Ed25519PublicKey,\n  Ed25519Signature,\n  Serializer,\n} from '@aptos-labs/ts-sdk';\nimport { base64ToBytes, base64urlToBytes, bytesToBase64, bytesToBase64url } from './base64';\nimport { decodeWalletRequestBody, encodeWalletRequestBody, type WalletRequestBody } from './WalletRequestBody';\n\nexport interface UnsignedPopupWalletRequest {\n  accountAddress?: AccountAddressInput;\n  body: WalletRequestBody;\n  clientIdentityKey?: undefined;\n}\n\nexport interface BaseSignedPopupWalletRequest {\n  accountAddress?: AccountAddressInput;\n  clientIdentityKey: Ed25519PublicKey;\n  id: string;\n  // against ('AptosConnectWalletRequest', id, body, address, timestamp)\n  signature: Ed25519Signature;\n  timestamp: number;\n}\n\nexport interface DeferredSignedPopupWalletRequest extends BaseSignedPopupWalletRequest {\n  body?: undefined;\n}\n\nexport interface SignedPopupWalletRequest extends BaseSignedPopupWalletRequest {\n  body: WalletRequestBody;\n}\n\nexport type PopupWalletRequest =\n  | UnsignedPopupWalletRequest\n  | DeferredSignedPopupWalletRequest\n  | SignedPopupWalletRequest;\n\nexport function encodePopupWalletRequest(request: PopupWalletRequest): string {\n  const serialized = JSON.stringify(request, (key, value) => {\n    switch (key) {\n      case 'body':\n        return encodeWalletRequestBody(value);\n      case 'clientIdentityKey':\n        return bytesToBase64((value as Ed25519PublicKey).toUint8Array());\n      case 'signature':\n        return bytesToBase64((value as Ed25519Signature).toUint8Array());\n      default:\n        return value;\n    }\n  });\n  const utf8Encoded = new TextEncoder().encode(serialized);\n  return bytesToBase64url(utf8Encoded);\n}\n\nexport function decodePopupWalletRequest(encoded: string): PopupWalletRequest {\n  const utfEncoded = base64urlToBytes(encoded);\n  const serialized = new TextDecoder().decode(utfEncoded);\n  return JSON.parse(serialized, (key, value) => {\n    switch (key) {\n      case 'body':\n        return decodeWalletRequestBody(value);\n      case 'clientIdentityKey':\n        return new Ed25519PublicKey(base64ToBytes(value));\n      case 'signature':\n        return new Ed25519Signature(base64ToBytes(value));\n      default:\n        return value;\n    }\n  });\n}\n\nexport function makePopupWalletRequestChallenge({\n  accountAddress,\n  body,\n  id,\n  timestamp,\n}: Omit<SignedPopupWalletRequest, 'clientIdentityKey' | 'signature'>) {\n  const serializer = new Serializer();\n  serializer.serializeStr('SignedPopupWalletRequest');\n  serializer.serializeStr(id);\n  serializer.serializeU64(timestamp);\n  serializer.serializeBool(accountAddress !== undefined);\n  if (accountAddress !== undefined) {\n    serializer.serialize(AccountAddress.from(accountAddress));\n  }\n  serializer.serializeStr(body.name);\n  serializer.serializeU8(body.version);\n  serializer.serializeBytes(body.data);\n  return serializer.toUint8Array();\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { base64ToBytes, bytesToBase64 } from './base64';\n\nexport interface WalletRequestBody<RequestName extends string = string, Version extends number = number> {\n  data: Uint8Array;\n  name: RequestName;\n  version: Version;\n}\n\nexport function encodeWalletRequestBody({ data, ...rest }: WalletRequestBody): string {\n  const serialized = JSON.stringify({ data, ...rest }, (key, value) => (key === 'data' ? bytesToBase64(value) : value));\n  const utf8Encoded = new TextEncoder().encode(serialized);\n  return bytesToBase64(utf8Encoded);\n}\n\nexport function decodeWalletRequestBody(encoded: string): WalletRequestBody {\n  const utfEncoded = base64ToBytes(encoded);\n  const serialized = new TextDecoder().decode(utfEncoded);\n  return JSON.parse(serialized, (key, value) => (key === 'data' ? base64ToBytes(value) : value));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/index.ts\nimport { ConnectRequest, ConnectResponse as ConnectResponse2, DisconnectRequest, DisconnectResponse, GetConnectedAccountsRequest, GetConnectedAccountsResponse, IsConnectedRequest, IsConnectedResponse, SignAndSubmitTransactionRequest, SignInRequest, SignInResponse, SignMessageRequest, SignTransactionRequest } from \"@aptos-connect/wallet-api\";\n\n// src/prompt.ts\nimport { ConnectResponse, isTypedMessage, PromptApprovalResponseMessage, PromptConnectionRequestMessage, PromptConnectionResponseMessage, PromptUnauthorizedErrorMessage } from \"@aptos-connect/wallet-api\";\nvar DEFAULT_PROMPT_SIZE = {\n  height: 695,\n  width: 465\n};\nvar PROMPT_POLLER_INTERVAL = 500;\nvar dismissalSerializedResponse = ConnectResponse.serialize({\n  status: \"dismissed\"\n});\nvar PromptUnauthorizedError = class extends Error {\n  constructor() {\n    super(\"Unauthorized\");\n  }\n};\nfunction openPrompt(url, size = DEFAULT_PROMPT_SIZE) {\n  const {\n    height,\n    width\n  } = size;\n  const options = {\n    height,\n    left: window.screenLeft + Math.round((window.outerWidth - width) / 2),\n    popup: true,\n    top: window.screenTop + Math.round((window.outerHeight - height) / 2),\n    width\n  };\n  const strOptions = Object.entries(options).map(([key, value]) => `${key}=${JSON.stringify(value)}`).reduce((acc, entry) => `${acc}, ${entry}`);\n  const href = url instanceof URL ? url.href : url;\n  const promptWindow = window.open(href, void 0, strOptions);\n  if (promptWindow === null) {\n    throw new Error(\"Couldn't open prompt\");\n  }\n  return promptWindow;\n}\nasync function waitForPromptResponse(baseUrl, promptWindow, request) {\n  return new Promise((resolve, reject) => {\n    const listeners = {\n      onMessage: message => {\n        if (message.source !== promptWindow || message.origin !== baseUrl) {\n          return;\n        }\n        if (isTypedMessage(PromptUnauthorizedErrorMessage, message.data)) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          reject(new PromptUnauthorizedError());\n          return;\n        }\n        if (isTypedMessage(PromptConnectionRequestMessage, message.data)) {\n          promptWindow.postMessage(new PromptConnectionResponseMessage(request), baseUrl);\n          return;\n        }\n        if (isTypedMessage(PromptApprovalResponseMessage, message.data)) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(message.data.serializedValue);\n        }\n      },\n      promptPollerId: setInterval(() => {\n        if (promptWindow.closed) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(dismissalSerializedResponse);\n        }\n      }, PROMPT_POLLER_INTERVAL)\n    };\n    window.addEventListener(\"message\", listeners.onMessage);\n  });\n}\n\n// src/state.ts\nimport { base64ToBytes, bytesToBase64, deserializeAccountInfo, serializeAccountInfo } from \"@aptos-connect/wallet-api\";\nimport { Deserializer, Serializer } from \"@aptos-labs/ts-sdk\";\nvar localDappStateKey = \"@aptos-connect/dapp-local-state\";\nfunction serializeLocalDappState(state) {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(state.connectedAccounts.length);\n  for (const account of state.connectedAccounts) {\n    serializeAccountInfo(serializer, account);\n  }\n  return serializer.toUint8Array();\n}\nfunction deserializeLocalDappState(serializedValue) {\n  const deserializer = new Deserializer(serializedValue);\n  const connectedAccountsLength = deserializer.deserializeUleb128AsU32();\n  const connectedAccounts = [];\n  for (let i = 0; i < connectedAccountsLength; i += 1) {\n    connectedAccounts.push(deserializeAccountInfo(deserializer));\n  }\n  return {\n    connectedAccounts\n  };\n}\nfunction getState() {\n  const encodedValue = window.localStorage.getItem(localDappStateKey);\n  return encodedValue ? deserializeLocalDappState(base64ToBytes(encodedValue)) : {\n    connectedAccounts: []\n  };\n}\nfunction setState(state) {\n  const serializedValue = serializeLocalDappState(state);\n  const encodedValue = bytesToBase64(serializedValue);\n  window.localStorage.setItem(localDappStateKey, encodedValue);\n}\nfunction getConnectedAccounts() {\n  const state = getState();\n  return state.connectedAccounts;\n}\nfunction addConnectedAccount(account) {\n  const {\n    connectedAccounts,\n    ...state\n  } = getState();\n  connectedAccounts.push(account);\n  setState({\n    ...state,\n    connectedAccounts\n  });\n}\nfunction removeConnectedAccount(address) {\n  const {\n    connectedAccounts,\n    ...state\n  } = getState();\n  const index = connectedAccounts.findIndex(a => a.address.equals(address));\n  if (index >= 0) {\n    connectedAccounts.splice(index, 1);\n  }\n  setState({\n    ...state,\n    connectedAccounts\n  });\n}\n\n// src/telegram/openTelegramPrompt.ts\nimport { encodePopupWalletRequest, makePopupWalletRequestChallenge } from \"@aptos-connect/wallet-api\";\nimport { postEvent as postTelegramEvent } from \"@telegram-apps/bridge\";\nimport { v4 as randomUUID } from \"uuid\";\n\n// src/telegram/createWalletRequest.ts\nimport { bytesToBase64 as bytesToBase642, bytesToBase64url, encodeWalletRequestBody } from \"@aptos-connect/wallet-api\";\nasync function createWalletRequest(baseUrl, request) {\n  const encodedClientIdentityKey = bytesToBase64url(request.clientIdentityKey.toUint8Array());\n  const response = await fetch(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/`, {\n    body: JSON.stringify({\n      body: encodeWalletRequestBody(request.body),\n      id: request.id,\n      signature: bytesToBase642(request.signature.toUint8Array()),\n      timestamp: request.timestamp\n    }),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"post\"\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed creating the wallet request\");\n  }\n}\n\n// src/telegram/getClientIdentityKey.ts\nimport { Ed25519PrivateKey } from \"@aptos-labs/ts-sdk\";\nvar identityKeyStorageKey = \"@aptos-connect/client-identity-key\";\nfunction getClientIdentityKey() {\n  const serialized = window.localStorage.getItem(identityKeyStorageKey);\n  if (serialized) {\n    return new Ed25519PrivateKey(serialized);\n  }\n  const identityKey = Ed25519PrivateKey.generate();\n  window.localStorage.setItem(identityKeyStorageKey, identityKey.toString());\n  return identityKey;\n}\n\n// src/telegram/getWalletResponse.ts\nimport { base64ToBytes as base64ToBytes2, bytesToBase64url as bytesToBase64url2 } from \"@aptos-connect/wallet-api\";\n\n// src/telegram/smartPolling.ts\nvar ON_RESUME_DELAY = 300;\nvar FG_RESPONSE_POLLING_INTERVAL = 2e3;\nvar BG_RESPONSE_POLLING_INTERVAL = 3e3;\nvar POLLING_TIMEOUT = 5 * 6e4;\nfunction waitFor(milliseconds) {\n  let timeoutId;\n  let cancel = () => {};\n  const timer = new Promise(resolve => {\n    timeoutId = setTimeout(resolve, milliseconds);\n    cancel = () => {\n      clearTimeout(timeoutId);\n      resolve();\n    };\n  });\n  timer.cancel = cancel;\n  return timer;\n}\nasync function smartPolling(callback) {\n  let timer;\n  let justResumed = false;\n  let pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  const onWindowFocus = () => {\n    justResumed = true;\n    pollingInterval = FG_RESPONSE_POLLING_INTERVAL;\n    timer?.cancel();\n  };\n  const onWindowBlur = () => {\n    pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  };\n  window.addEventListener(\"focus\", onWindowFocus);\n  window.addEventListener(\"blur\", onWindowBlur);\n  try {\n    const startTime = Date.now();\n    while (Date.now() - startTime < POLLING_TIMEOUT) {\n      timer = waitFor(pollingInterval);\n      await timer;\n      if (justResumed) {\n        timer = waitFor(ON_RESUME_DELAY);\n        await timer;\n      }\n      const response = await callback();\n      if (response.status === 200) {\n        return response;\n      }\n      justResumed = false;\n    }\n    throw new Error(\"Timeout\");\n  } finally {\n    window.removeEventListener(\"focus\", onWindowFocus);\n    window.removeEventListener(\"blur\", onWindowFocus);\n  }\n}\n\n// src/telegram/getWalletResponse.ts\nasync function getWalletResponse(baseUrl, clientIdentityKey, requestId) {\n  const encodedClientIdentityKey = bytesToBase64url2(clientIdentityKey.toUint8Array());\n  const url = new URL(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/${requestId}/response/`);\n  const response = await smartPolling(() => fetch(url, {\n    headers: {\n      Accept: \"application/json\"\n    },\n    method: \"get\"\n  }));\n  const responseBody = await response.json();\n  const data = base64ToBytes2(responseBody.data.body);\n  return {\n    data\n  };\n}\n\n// src/telegram/openTelegramPrompt.ts\nasync function openTelegramPrompt(args) {\n  const {\n    baseUrl,\n    provider,\n    request: body,\n    tgWebAppUrl = \"/AptosConnectBot/AptosConnect\"\n  } = args;\n  const identityKey = getClientIdentityKey();\n  const clientIdentityKey = identityKey.publicKey();\n  const requestId = randomUUID();\n  const timestamp = Date.now();\n  const challenge = makePopupWalletRequestChallenge({\n    body,\n    id: requestId,\n    timestamp\n  });\n  const signature = identityKey.sign(challenge);\n  const signedWalletRequest = {\n    body,\n    clientIdentityKey,\n    id: requestId,\n    signature,\n    timestamp\n  };\n  let encodedRequest = encodePopupWalletRequest(signedWalletRequest);\n  if (encodedRequest.length > 1024) {\n    void createWalletRequest(baseUrl, signedWalletRequest);\n    encodedRequest = encodePopupWalletRequest({\n      clientIdentityKey,\n      id: requestId,\n      signature,\n      timestamp\n    });\n  }\n  const startParam = `prompt_${provider ?? \"\"}${encodedRequest}`;\n  postTelegramEvent(\"web_app_open_tg_link\", {\n    path_full: `${tgWebAppUrl}?startapp=${startParam}`\n  });\n  return getWalletResponse(baseUrl, clientIdentityKey, requestId);\n}\n\n// src/telegram/index.ts\nfunction isTelegramMiniApp() {\n  return window.TelegramWebviewProxy !== void 0;\n}\n\n// src/index.ts\nvar WebWalletTransport = class {\n  constructor(baseUrl, provider = \"google\", tgWebAppUrl) {\n    this.baseUrl = baseUrl;\n    this.provider = provider;\n    this.tgWebAppUrl = tgWebAppUrl;\n    this.baseUrl = baseUrl;\n  }\n  async sendPromptRequest(request) {\n    if (isTelegramMiniApp()) {\n      return openTelegramPrompt({\n        baseUrl: this.baseUrl,\n        provider: this.provider,\n        request,\n        tgWebAppUrl: this.tgWebAppUrl\n      });\n    }\n    const url = new URL(`${this.baseUrl}/prompt/`);\n    url.searchParams.set(\"provider\", this.provider);\n    const prompt = openPrompt(url);\n    return waitForPromptResponse(this.baseUrl, prompt, request);\n  }\n  async sendRequest(request) {\n    switch (request.name) {\n      case IsConnectedRequest.name:\n        {\n          const connectedAccounts = getConnectedAccounts();\n          return IsConnectedResponse.serialize(connectedAccounts.length > 0);\n        }\n      case GetConnectedAccountsRequest.name:\n        {\n          const connectedAccounts = getConnectedAccounts();\n          return GetConnectedAccountsResponse.serialize(connectedAccounts);\n        }\n      case ConnectRequest.name:\n        {\n          const serializedResponse = await this.sendPromptRequest(request);\n          const response = ConnectResponse2.deserialize(serializedResponse);\n          if (response.args.status === \"approved\") {\n            const {\n              account,\n              pairing\n            } = response.args.args;\n            if (pairing === void 0) {\n              addConnectedAccount(account);\n            }\n          }\n          return serializedResponse;\n        }\n      case SignInRequest.name:\n        {\n          const serializedResponse = await this.sendPromptRequest(request);\n          const response = SignInResponse.deserialize(serializedResponse, request.version);\n          if (response.args.status === \"approved\") {\n            const {\n              account\n            } = response.args.args;\n            addConnectedAccount(account);\n          }\n          return serializedResponse;\n        }\n      case DisconnectRequest.name:\n        {\n          const [activeAccount] = getConnectedAccounts();\n          if (activeAccount) {\n            removeConnectedAccount(activeAccount.address);\n          }\n          return DisconnectResponse.serialize({});\n        }\n      case SignMessageRequest.name:\n      case SignTransactionRequest.name:\n      case SignAndSubmitTransactionRequest.name:\n        {\n          return this.sendPromptRequest(request);\n        }\n      default:\n        {\n          throw new Error(\"Unexpected request\");\n        }\n    }\n  }\n};\nexport { WebWalletTransport };","map":{"version":3,"names":["ConnectRequest","ConnectResponse","ConnectResponse2","DisconnectRequest","DisconnectResponse","GetConnectedAccountsRequest","GetConnectedAccountsResponse","IsConnectedRequest","IsConnectedResponse","SignAndSubmitTransactionRequest","SignInRequest","SignInResponse","SignMessageRequest","SignTransactionRequest","isTypedMessage","PromptApprovalResponseMessage","PromptConnectionRequestMessage","PromptConnectionResponseMessage","PromptUnauthorizedErrorMessage","DEFAULT_PROMPT_SIZE","height","width","PROMPT_POLLER_INTERVAL","dismissalSerializedResponse","serialize","status","PromptUnauthorizedError","Error","constructor","openPrompt","url","size","options","left","window","screenLeft","Math","round","outerWidth","popup","top","screenTop","outerHeight","strOptions","Object","entries","map","key","value","JSON","stringify","reduce","acc","entry","href","URL","promptWindow","open","waitForPromptResponse","baseUrl","request","Promise","resolve","reject","listeners","onMessage","message","source","origin","data","removeEventListener","clearTimeout","promptPollerId","postMessage","serializedValue","setInterval","closed","addEventListener","base64ToBytes","bytesToBase64","deserializeAccountInfo","serializeAccountInfo","Deserializer","Serializer","localDappStateKey","serializeLocalDappState","state","serializer","serializeU32AsUleb128","connectedAccounts","length","account","toUint8Array","deserializeLocalDappState","deserializer","connectedAccountsLength","deserializeUleb128AsU32","i","push","getState","encodedValue","localStorage","getItem","setState","setItem","getConnectedAccounts","addConnectedAccount","removeConnectedAccount","address","index","findIndex","a","equals","splice","encodePopupWalletRequest","makePopupWalletRequestChallenge","postEvent","postTelegramEvent","v4","randomUUID","bytesToBase642","bytesToBase64url","encodeWalletRequestBody","createWalletRequest","encodedClientIdentityKey","clientIdentityKey","response","fetch","body","id","signature","timestamp","headers","Accept","method","ok","Ed25519PrivateKey","identityKeyStorageKey","getClientIdentityKey","serialized","identityKey","generate","toString","base64ToBytes2","bytesToBase64url2","ON_RESUME_DELAY","FG_RESPONSE_POLLING_INTERVAL","BG_RESPONSE_POLLING_INTERVAL","POLLING_TIMEOUT","waitFor","milliseconds","timeoutId","cancel","timer","setTimeout","smartPolling","callback","justResumed","pollingInterval","onWindowFocus","onWindowBlur","startTime","Date","now","getWalletResponse","requestId","responseBody","json","openTelegramPrompt","args","provider","tgWebAppUrl","publicKey","challenge","sign","signedWalletRequest","encodedRequest","startParam","path_full","isTelegramMiniApp","TelegramWebviewProxy","WebWalletTransport","sendPromptRequest","searchParams","set","prompt","sendRequest","name","serializedResponse","deserialize","pairing","version","activeAccount"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\index.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\prompt.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\state.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\telegram\\openTelegramPrompt.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\telegram\\createWalletRequest.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\telegram\\getClientIdentityKey.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\telegram\\getWalletResponse.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\telegram\\smartPolling.ts","C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\wallet-adapter-react\\node_modules\\@aptos-connect\\web-transport\\src\\telegram\\index.ts"],"sourcesContent":["// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  ConnectRequest,\n  ConnectResponse,\n  DisconnectRequest,\n  DisconnectResponse,\n  GetConnectedAccountsRequest,\n  GetConnectedAccountsResponse,\n  IsConnectedRequest,\n  IsConnectedResponse,\n  SerializedWalletRequest,\n  SignAndSubmitTransactionRequest,\n  SignInRequest,\n  SignInResponse,\n  SignMessageRequest,\n  SignTransactionRequest,\n} from '@aptos-connect/wallet-api';\nimport { openPrompt, waitForPromptResponse } from './prompt';\nimport { addConnectedAccount, getConnectedAccounts, removeConnectedAccount } from './state';\n\nimport { isTelegramMiniApp, openTelegramPrompt } from './telegram';\n\nexport class WebWalletTransport {\n  constructor(\n    private readonly baseUrl: string,\n    private readonly provider: 'google' | 'apple' = 'google',\n    private readonly tgWebAppUrl?: string,\n  ) {\n    this.baseUrl = baseUrl;\n  }\n\n  async sendPromptRequest(request: SerializedWalletRequest) {\n    if (isTelegramMiniApp()) {\n      return openTelegramPrompt({\n        baseUrl: this.baseUrl,\n        provider: this.provider,\n        request,\n        tgWebAppUrl: this.tgWebAppUrl,\n      });\n    }\n\n    const url = new URL(`${this.baseUrl}/prompt/`);\n    url.searchParams.set('provider', this.provider);\n    const prompt = openPrompt(url);\n\n    return waitForPromptResponse(this.baseUrl, prompt, request);\n  }\n\n  async sendRequest(request: SerializedWalletRequest) {\n    switch (request.name) {\n      case IsConnectedRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return IsConnectedResponse.serialize(connectedAccounts.length > 0);\n      }\n      case GetConnectedAccountsRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return GetConnectedAccountsResponse.serialize(connectedAccounts);\n      }\n      case ConnectRequest.name: {\n        const serializedResponse = await this.sendPromptRequest(request);\n        const response = ConnectResponse.deserialize(serializedResponse);\n        if (response.args.status === 'approved') {\n          const { account, pairing } = response.args.args;\n          if (pairing === undefined) {\n            addConnectedAccount(account);\n          }\n        }\n        return serializedResponse;\n      }\n      case SignInRequest.name: {\n        const serializedResponse = await this.sendPromptRequest(request);\n        const response = SignInResponse.deserialize(serializedResponse, (request as unknown as SignInRequest).version);\n        if (response.args.status === 'approved') {\n          const { account } = response.args.args;\n          addConnectedAccount(account);\n        }\n        return serializedResponse;\n      }\n      case DisconnectRequest.name: {\n        const [activeAccount] = getConnectedAccounts();\n        if (activeAccount) {\n          removeConnectedAccount(activeAccount.address);\n        }\n        return DisconnectResponse.serialize({});\n      }\n      case SignMessageRequest.name:\n      case SignTransactionRequest.name:\n      case SignAndSubmitTransactionRequest.name: {\n        return this.sendPromptRequest(request);\n      }\n      default: {\n        throw new Error('Unexpected request');\n      }\n    }\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  ConnectResponse,\n  isTypedMessage,\n  PromptApprovalResponseMessage,\n  PromptConnectionRequestMessage,\n  PromptConnectionResponseMessage,\n  PromptUnauthorizedErrorMessage,\n  SerializedWalletRequest,\n  SerializedWalletResponse,\n} from '@aptos-connect/wallet-api';\n\nconst DEFAULT_PROMPT_SIZE = { height: 695, width: 465 };\nconst PROMPT_POLLER_INTERVAL = 500;\n\nconst dismissalSerializedResponse = ConnectResponse.serialize({ status: 'dismissed' });\n\nexport class PromptUnauthorizedError extends Error {\n  constructor() {\n    super('Unauthorized');\n  }\n}\n\nexport function openPrompt(url: string | URL, size = DEFAULT_PROMPT_SIZE) {\n  const { height, width } = size;\n  const options = {\n    height,\n    left: window.screenLeft + Math.round((window.outerWidth - width) / 2),\n    popup: true,\n    top: window.screenTop + Math.round((window.outerHeight - height) / 2),\n    width,\n  };\n\n  const strOptions = Object.entries(options)\n    .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n    .reduce((acc, entry) => `${acc}, ${entry}`);\n\n  const href = url instanceof URL ? url.href : url;\n  const promptWindow = window.open(href, undefined, strOptions);\n  if (promptWindow === null) {\n    throw new Error(\"Couldn't open prompt\");\n  }\n\n  return promptWindow;\n}\n\nexport async function waitForPromptResponse(baseUrl: string, promptWindow: Window, request: SerializedWalletRequest) {\n  return new Promise<SerializedWalletResponse>((resolve, reject) => {\n    const listeners = {\n      onMessage: (message: MessageEvent) => {\n        // Ignore messages from untrusted sources\n        if (message.source !== promptWindow || message.origin !== baseUrl) {\n          return;\n        }\n        if (isTypedMessage(PromptUnauthorizedErrorMessage, message.data)) {\n          window.removeEventListener('message', listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          reject(new PromptUnauthorizedError());\n          return;\n        }\n        if (isTypedMessage(PromptConnectionRequestMessage, message.data)) {\n          promptWindow.postMessage(new PromptConnectionResponseMessage(request), baseUrl);\n          return;\n        }\n        if (isTypedMessage(PromptApprovalResponseMessage, message.data)) {\n          window.removeEventListener('message', listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(message.data.serializedValue);\n        }\n      },\n      promptPollerId: setInterval(() => {\n        if (promptWindow.closed) {\n          window.removeEventListener('message', listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(dismissalSerializedResponse);\n        }\n      }, PROMPT_POLLER_INTERVAL),\n    };\n\n    window.addEventListener('message', listeners.onMessage);\n  });\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountInfo,\n  base64ToBytes,\n  bytesToBase64,\n  deserializeAccountInfo,\n  serializeAccountInfo,\n} from '@aptos-connect/wallet-api';\nimport { AccountAddress, Deserializer, Serializer } from '@aptos-labs/ts-sdk';\n\nconst localDappStateKey = '@aptos-connect/dapp-local-state';\n\n/**\n * Local dapp state loosely synced with the web wallet's state.\n * Due to browser restrictions (storage partitioning), it's no longer possible\n * to access the web wallet's state.\n */\ninterface DappLocalState {\n  connectedAccounts: AccountInfo[];\n}\n\nfunction serializeLocalDappState(state: DappLocalState): Uint8Array {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(state.connectedAccounts.length);\n  for (const account of state.connectedAccounts) {\n    serializeAccountInfo(serializer, account);\n  }\n  return serializer.toUint8Array();\n}\n\nfunction deserializeLocalDappState(serializedValue: Uint8Array): DappLocalState {\n  const deserializer = new Deserializer(serializedValue);\n  const connectedAccountsLength = deserializer.deserializeUleb128AsU32();\n  const connectedAccounts: AccountInfo[] = [];\n  for (let i = 0; i < connectedAccountsLength; i += 1) {\n    connectedAccounts.push(deserializeAccountInfo(deserializer));\n  }\n  return { connectedAccounts };\n}\n\nfunction getState(): DappLocalState {\n  const encodedValue = window.localStorage.getItem(localDappStateKey);\n  return encodedValue ? deserializeLocalDappState(base64ToBytes(encodedValue)) : { connectedAccounts: [] };\n}\n\nfunction setState(state: DappLocalState) {\n  const serializedValue = serializeLocalDappState(state);\n  const encodedValue = bytesToBase64(serializedValue);\n  window.localStorage.setItem(localDappStateKey, encodedValue);\n}\n\nexport function getConnectedAccounts() {\n  const state = getState();\n  return state.connectedAccounts;\n}\n\nexport function addConnectedAccount(account: AccountInfo) {\n  const { connectedAccounts, ...state } = getState();\n  connectedAccounts.push(account);\n  setState({ ...state, connectedAccounts });\n}\n\nexport function removeConnectedAccount(address: AccountAddress) {\n  const { connectedAccounts, ...state } = getState();\n  const index = connectedAccounts.findIndex((a) => a.address.equals(address));\n  if (index >= 0) {\n    connectedAccounts.splice(index, 1);\n  }\n  setState({ ...state, connectedAccounts });\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  encodePopupWalletRequest,\n  makePopupWalletRequestChallenge,\n  SerializedWalletRequest,\n  SignedPopupWalletRequest,\n} from '@aptos-connect/wallet-api';\nimport { postEvent as postTelegramEvent } from '@telegram-apps/bridge';\nimport { v4 as randomUUID } from 'uuid';\nimport { createWalletRequest } from './createWalletRequest';\nimport { getClientIdentityKey } from './getClientIdentityKey';\nimport { getWalletResponse } from './getWalletResponse';\n\nexport async function openTelegramPrompt(args: {\n  baseUrl: string;\n  provider?: 'google' | 'apple';\n  request: SerializedWalletRequest;\n  tgWebAppUrl?: string;\n}) {\n  const { baseUrl, provider, request: body, tgWebAppUrl = '/AptosConnectBot/AptosConnect' } = args;\n  const identityKey = getClientIdentityKey();\n  const clientIdentityKey = identityKey.publicKey();\n  const requestId = randomUUID();\n  const timestamp = Date.now();\n\n  const challenge = makePopupWalletRequestChallenge({ body, id: requestId, timestamp });\n  const signature = identityKey.sign(challenge);\n\n  const signedWalletRequest: SignedPopupWalletRequest = {\n    body,\n    clientIdentityKey,\n    id: requestId,\n    signature,\n    timestamp,\n  };\n\n  // Telegram only supports start parameters up to 1024 characters\n  // If the encoded request is longer, we send it to the backend and mark\n  // the request as \"deferred\" by omitting the body\n  let encodedRequest = encodePopupWalletRequest(signedWalletRequest);\n  if (encodedRequest.length > 1024) {\n    void createWalletRequest(baseUrl, signedWalletRequest);\n    encodedRequest = encodePopupWalletRequest({\n      clientIdentityKey,\n      id: requestId,\n      signature,\n      timestamp,\n    });\n  }\n\n  const startParam = `prompt_${provider ?? ''}${encodedRequest}`;\n  postTelegramEvent('web_app_open_tg_link', {\n    path_full: `${tgWebAppUrl}?startapp=${startParam}`,\n  });\n\n  return getWalletResponse(baseUrl, clientIdentityKey, requestId);\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  bytesToBase64,\n  bytesToBase64url,\n  encodeWalletRequestBody,\n  SignedPopupWalletRequest,\n} from '@aptos-connect/wallet-api';\n\nexport async function createWalletRequest(baseUrl: string, request: SignedPopupWalletRequest) {\n  const encodedClientIdentityKey = bytesToBase64url(request.clientIdentityKey.toUint8Array());\n\n  const response = await fetch(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/`, {\n    body: JSON.stringify({\n      body: encodeWalletRequestBody(request.body),\n      id: request.id,\n      signature: bytesToBase64(request.signature.toUint8Array()),\n      timestamp: request.timestamp,\n    }),\n    headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n    method: 'post',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed creating the wallet request');\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Ed25519PrivateKey } from '@aptos-labs/ts-sdk';\n\nconst identityKeyStorageKey = '@aptos-connect/client-identity-key';\n\nexport function getClientIdentityKey() {\n  const serialized = window.localStorage.getItem(identityKeyStorageKey);\n  if (serialized) {\n    return new Ed25519PrivateKey(serialized);\n  }\n  const identityKey = Ed25519PrivateKey.generate();\n  window.localStorage.setItem(identityKeyStorageKey, identityKey.toString());\n  return identityKey;\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { base64ToBytes, bytesToBase64url, SerializedWalletResponse } from '@aptos-connect/wallet-api';\nimport { Ed25519PublicKey } from '@aptos-labs/ts-sdk';\nimport { smartPolling } from './smartPolling';\n\nexport async function getWalletResponse(\n  baseUrl: string,\n  clientIdentityKey: Ed25519PublicKey,\n  requestId: string,\n): Promise<SerializedWalletResponse> {\n  const encodedClientIdentityKey = bytesToBase64url(clientIdentityKey.toUint8Array());\n  const url = new URL(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/${requestId}/response/`);\n  const response = await smartPolling(() =>\n    fetch(url, {\n      headers: { Accept: 'application/json' },\n      method: 'get',\n    }),\n  );\n\n  const responseBody = await response.json();\n  const data = base64ToBytes(responseBody.data.body);\n  return { data };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-await-in-loop */\n\n/**\n * How long to wait after resuming before trying to fetch the resource again.\n * This gives time for the underlying resource to be persisted.\n */\nconst ON_RESUME_DELAY = 300;\n\n/**\n * How often to poll for the resource when the window is in the foreground.\n * This should typically not be needed, but it's a good fallback in case we\n * can't detect whether the window is in the background\n */\nconst FG_RESPONSE_POLLING_INTERVAL = 2000;\n\n/**\n * Polling interval when the window is in the background.\n * This can be arbitrarily long, but it's still good to keep polling as fallback.\n */\nconst BG_RESPONSE_POLLING_INTERVAL = 3000;\n\n/**\n * Given there's no \"cancel\" mechanism for polling, we should time out the polling after\n * an arbitrarily long time to prevent memory leaks.\n */\nconst POLLING_TIMEOUT = 5 * 60000;\n\nexport interface Timer extends Promise<void> {\n  cancel: () => void;\n}\n\nfunction waitFor(milliseconds: number): Timer {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  let cancel = () => {};\n  const timer = new Promise((resolve) => {\n    timeoutId = setTimeout(resolve, milliseconds);\n    cancel = () => {\n      clearTimeout(timeoutId);\n      resolve();\n    };\n  }) as Timer;\n  timer.cancel = cancel;\n  return timer;\n}\n\n/**\n * Smart polling function that tries to reduce as much as possible the number of requests,\n * while still returning quickly after the resource becomes available.\n */\nexport async function smartPolling(callback: () => Promise<Response>): Promise<Response> {\n  let timer: Timer | undefined;\n  let justResumed = false;\n  let pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n\n  const onWindowFocus = () => {\n    justResumed = true;\n    pollingInterval = FG_RESPONSE_POLLING_INTERVAL;\n    timer?.cancel();\n  };\n\n  const onWindowBlur = () => {\n    pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  };\n\n  window.addEventListener('focus', onWindowFocus);\n  window.addEventListener('blur', onWindowBlur);\n\n  try {\n    const startTime = Date.now();\n    while (Date.now() - startTime < POLLING_TIMEOUT) {\n      timer = waitFor(pollingInterval);\n      await timer;\n\n      if (justResumed) {\n        timer = waitFor(ON_RESUME_DELAY);\n        await timer;\n      }\n\n      const response = await callback();\n      if (response.status === 200) {\n        return response;\n      }\n      justResumed = false;\n    }\n    throw new Error('Timeout');\n  } finally {\n    window.removeEventListener('focus', onWindowFocus);\n    window.removeEventListener('blur', onWindowFocus);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport function isTelegramMiniApp() {\n  return (window as any).TelegramWebviewProxy !== undefined;\n}\n\nexport * from './openTelegramPrompt';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
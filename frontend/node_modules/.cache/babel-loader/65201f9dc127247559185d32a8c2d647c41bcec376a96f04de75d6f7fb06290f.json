{"ast":null,"code":"import { a as i } from \"./chunk-EBMEXURY.mjs\";\nvar r = class a extends i {\n  constructor(e) {\n    super(), this.chainId = e;\n  }\n  serialize(e) {\n    e.serializeU8(this.chainId);\n  }\n  static deserialize(e) {\n    let s = e.deserializeU8();\n    return new a(s);\n  }\n};\nexport { r as a };","map":{"version":3,"names":["r","a","i","constructor","e","chainId","serialize","serializeU8","deserialize","s","deserializeU8"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\chainId.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\n\n/**\n * Represents a ChainId that can be serialized and deserialized.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport class ChainId extends Serializable {\n  public readonly chainId: number;\n\n  /**\n   * Initializes a new instance of the class with the specified chain ID.\n   *\n   * @param chainId - The ID of the blockchain network to be used.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(chainId: number) {\n    super();\n    this.chainId = chainId;\n  }\n\n  /**\n   * Serializes the current object using the provided serializer.\n   * This function helps in converting the object into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.chainId);\n  }\n\n  /**\n   * Deserializes a ChainId from the provided deserializer.\n   * This function allows you to reconstruct a ChainId object from serialized data.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): ChainId {\n    const chainId = deserializer.deserializeU8();\n    return new ChainId(chainId);\n  }\n}\n"],"mappings":";AAaO,IAAMA,CAAA,GAAN,MAAMC,CAAA,SAAgBC,CAAa;EAUxCC,YAAYC,CAAA,EAAiB;IAC3B,MAAM,GACN,KAAKC,OAAA,GAAUD,CACjB;EAAA;EAUAE,UAAUF,CAAA,EAA8B;IACtCA,CAAA,CAAWG,WAAA,CAAY,KAAKF,OAAO,CACrC;EAAA;EAUA,OAAOG,YAAYJ,CAAA,EAAqC;IACtD,IAAMK,CAAA,GAAUL,CAAA,CAAaM,aAAA,CAAc;IAC3C,OAAO,IAAIT,CAAA,CAAQQ,CAAO,CAC5B;EAAA;AACF;AAAA,SAAAT,CAAA,IAAAC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
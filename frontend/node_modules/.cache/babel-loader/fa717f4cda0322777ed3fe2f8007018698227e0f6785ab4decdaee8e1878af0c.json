{"ast":null,"code":"import { getErrorMessage } from './message-formatter.js';\nexport function isWalletStandardError(e, code) {\n  const isWalletStandardError = e instanceof Error && e.name === 'WalletStandardError';\n  if (isWalletStandardError) {\n    if (code !== undefined) {\n      return e.context.__code === code;\n    }\n    return true;\n  }\n  return false;\n}\nexport class WalletStandardError extends Error {\n  constructor(...[code, contextAndErrorOptions]) {\n    let context;\n    let errorOptions;\n    if (contextAndErrorOptions) {\n      // If the `ErrorOptions` type ever changes, update this code.\n      const {\n        cause,\n        ...contextRest\n      } = contextAndErrorOptions;\n      if (cause) {\n        errorOptions = {\n          cause\n        };\n      }\n      if (Object.keys(contextRest).length > 0) {\n        context = contextRest;\n      }\n    }\n    const message = getErrorMessage(code, context);\n    super(message, errorOptions);\n    this.context = {\n      __code: code,\n      ...context\n    };\n    // This is necessary so that `isWalletStandardError()` can identify a `WalletStandardError`\n    // without having to import the class for use in an `instanceof` check.\n    this.name = 'WalletStandardError';\n  }\n}","map":{"version":3,"names":["getErrorMessage","isWalletStandardError","e","code","Error","name","undefined","context","__code","WalletStandardError","constructor","contextAndErrorOptions","errorOptions","cause","contextRest","Object","keys","length","message"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@wallet-standard\\errors\\src\\error.ts"],"sourcesContent":["import type { WalletStandardErrorCode } from './codes.js';\nimport type { WalletStandardErrorContext } from './context.js';\nimport { getErrorMessage } from './message-formatter.js';\n\nexport function isWalletStandardError<TErrorCode extends WalletStandardErrorCode>(\n    e: unknown,\n    code?: TErrorCode\n): e is WalletStandardError<TErrorCode> {\n    const isWalletStandardError = e instanceof Error && e.name === 'WalletStandardError';\n    if (isWalletStandardError) {\n        if (code !== undefined) {\n            return (e as WalletStandardError<TErrorCode>).context.__code === code;\n        }\n        return true;\n    }\n    return false;\n}\n\ntype WalletStandardErrorCodedContext = Readonly<{\n    [P in WalletStandardErrorCode]: (WalletStandardErrorContext[P] extends undefined\n        ? object\n        : WalletStandardErrorContext[P]) & {\n        __code: P;\n    };\n}>;\n\nexport class WalletStandardError<TErrorCode extends WalletStandardErrorCode = WalletStandardErrorCode> extends Error {\n    readonly context: WalletStandardErrorCodedContext[TErrorCode];\n    constructor(\n        ...[code, contextAndErrorOptions]: WalletStandardErrorContext[TErrorCode] extends undefined\n            ? [code: TErrorCode, errorOptions?: ErrorOptions | undefined]\n            : [\n                  code: TErrorCode,\n                  contextAndErrorOptions: WalletStandardErrorContext[TErrorCode] & (ErrorOptions | undefined),\n              ]\n    ) {\n        let context: WalletStandardErrorContext[TErrorCode] | undefined;\n        let errorOptions: ErrorOptions | undefined;\n        if (contextAndErrorOptions) {\n            // If the `ErrorOptions` type ever changes, update this code.\n            const { cause, ...contextRest } = contextAndErrorOptions;\n            if (cause) {\n                errorOptions = { cause };\n            }\n            if (Object.keys(contextRest).length > 0) {\n                context = contextRest as WalletStandardErrorContext[TErrorCode];\n            }\n        }\n        const message = getErrorMessage(code, context);\n        super(message, errorOptions);\n        this.context = {\n            __code: code,\n            ...context,\n        } as WalletStandardErrorCodedContext[TErrorCode];\n        // This is necessary so that `isWalletStandardError()` can identify a `WalletStandardError`\n        // without having to import the class for use in an `instanceof` check.\n        this.name = 'WalletStandardError';\n    }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,wBAAwB;AAExD,OAAM,SAAUC,qBAAqBA,CACjCC,CAAU,EACVC,IAAiB;EAEjB,MAAMF,qBAAqB,GAAGC,CAAC,YAAYE,KAAK,IAAIF,CAAC,CAACG,IAAI,KAAK,qBAAqB;EACpF,IAAIJ,qBAAqB,EAAE;IACvB,IAAIE,IAAI,KAAKG,SAAS,EAAE;MACpB,OAAQJ,CAAqC,CAACK,OAAO,CAACC,MAAM,KAAKL,IAAI;IACzE;IACA,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AAUA,OAAM,MAAOM,mBAA0F,SAAQL,KAAK;EAEhHM,YACI,GAAG,CAACP,IAAI,EAAEQ,sBAAsB,CAKzB;IAEP,IAAIJ,OAA2D;IAC/D,IAAIK,YAAsC;IAC1C,IAAID,sBAAsB,EAAE;MACxB;MACA,MAAM;QAAEE,KAAK;QAAE,GAAGC;MAAW,CAAE,GAAGH,sBAAsB;MACxD,IAAIE,KAAK,EAAE;QACPD,YAAY,GAAG;UAAEC;QAAK,CAAE;MAC5B;MACA,IAAIE,MAAM,CAACC,IAAI,CAACF,WAAW,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;QACrCV,OAAO,GAAGO,WAAqD;MACnE;IACJ;IACA,MAAMI,OAAO,GAAGlB,eAAe,CAACG,IAAI,EAAEI,OAAO,CAAC;IAC9C,KAAK,CAACW,OAAO,EAAEN,YAAY,CAAC;IAC5B,IAAI,CAACL,OAAO,GAAG;MACXC,MAAM,EAAEL,IAAI;MACZ,GAAGI;KACyC;IAChD;IACA;IACA,IAAI,CAACF,IAAI,GAAG,qBAAqB;EACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { b as t, d as n } from \"./chunk-K43K3YG7.mjs\";\nimport { a as l } from \"./chunk-WCMW2L3P.mjs\";\nimport { a as u } from \"./chunk-WSR5EBJM.mjs\";\nimport { a as o } from \"./chunk-FLZPUYXQ.mjs\";\nimport { b as s } from \"./chunk-STY74NUA.mjs\";\nvar c = class i extends u {\n    constructor(e) {\n      super();\n      let r = e.constructor.name;\n      switch (r) {\n        case t.name:\n          this.publicKey = e, this.variant = 0;\n          break;\n        default:\n          throw new Error(`Unsupported key for EphemeralPublicKey - ${r}`);\n      }\n    }\n    verifySignature(e) {\n      let {\n        message: r,\n        signature: a\n      } = e;\n      return this.publicKey.verifySignature({\n        message: r,\n        signature: a.signature\n      });\n    }\n    async verifySignatureAsync(e) {\n      return this.verifySignature(e);\n    }\n    serialize(e) {\n      if (this.publicKey instanceof t) e.serializeU32AsUleb128(0), this.publicKey.serialize(e);else throw new Error(\"Unknown public key type\");\n    }\n    static deserialize(e) {\n      let r = e.deserializeUleb128AsU32();\n      switch (r) {\n        case 0:\n          return new i(t.deserialize(e));\n        default:\n          throw new Error(`Unknown variant index for EphemeralPublicKey: ${r}`);\n      }\n    }\n    static isPublicKey(e) {\n      return e instanceof i;\n    }\n  },\n  p = class i extends l {\n    constructor(e) {\n      super();\n      let r = e.constructor.name;\n      switch (r) {\n        case n.name:\n          this.signature = e;\n          break;\n        default:\n          throw new Error(`Unsupported signature for EphemeralSignature - ${r}`);\n      }\n    }\n    static fromHex(e) {\n      let r = s.fromHexInput(e),\n        a = new o(r.toUint8Array());\n      return i.deserialize(a);\n    }\n    serialize(e) {\n      if (this.signature instanceof n) e.serializeU32AsUleb128(0), this.signature.serialize(e);else throw new Error(\"Unknown signature type\");\n    }\n    static deserialize(e) {\n      let r = e.deserializeUleb128AsU32();\n      switch (r) {\n        case 0:\n          return new i(n.deserialize(e));\n        default:\n          throw new Error(`Unknown variant index for EphemeralSignature: ${r}`);\n      }\n    }\n  };\nexport { c as a, p as b };","map":{"version":3,"names":["c","i","u","constructor","e","r","name","t","publicKey","variant","Error","verifySignature","message","signature","a","verifySignatureAsync","serialize","serializeU32AsUleb128","deserialize","deserializeUleb128AsU32","isPublicKey","p","l","n","fromHex","s","fromHexInput","o","toUint8Array","b"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\core\\crypto\\ephemeral.ts"],"sourcesContent":["import { Serializer, Deserializer } from \"../../bcs\";\nimport { EphemeralPublicKeyVariant, EphemeralSignatureVariant, HexInput } from \"../../types\";\nimport { PublicKey } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { Hex } from \"../hex\";\nimport { AptosConfig } from \"../../api\";\n\n/**\n * Represents ephemeral public keys for Aptos Keyless accounts.\n *\n * These keys are used only temporarily within Keyless accounts and are not utilized as public keys for account identification.\n * @group Implementation\n * @category Serialization\n */\nexport class EphemeralPublicKey extends PublicKey {\n  /**\n   * The public key itself\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKey: PublicKey;\n\n  /**\n   * An enum indicating the scheme of the ephemeral public key\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly variant: EphemeralPublicKeyVariant;\n\n  /**\n   * Creates an instance of EphemeralPublicKey using the provided public key.\n   * This constructor ensures that only supported signature types are accepted.\n   *\n   * @param publicKey - The public key to be used for the ephemeral public key.\n   * @throws Error if the signature type is unsupported.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(publicKey: PublicKey) {\n    super();\n    const publicKeyType = publicKey.constructor.name;\n    switch (publicKeyType) {\n      case Ed25519PublicKey.name:\n        this.publicKey = publicKey;\n        this.variant = EphemeralPublicKeyVariant.Ed25519;\n        break;\n      default:\n        throw new Error(`Unsupported key for EphemeralPublicKey - ${publicKeyType}`);\n    }\n  }\n\n  /**\n   * Verifies a signed message using the ephemeral public key.\n   *\n   * @param args - The arguments for the verification.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature that was signed by the private key of the ephemeral public key.\n   * @returns true if the signature is valid, otherwise false.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: EphemeralSignature }): boolean {\n    const { message, signature } = args;\n    return this.publicKey.verifySignature({ message, signature: signature.signature });\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: EphemeralSignature;\n  }): Promise<boolean> {\n    return this.verifySignature(args);\n  }\n\n  /**\n   * Serializes the current instance, specifically handling the Ed25519 signature type.\n   * This function ensures that the signature is properly serialized using the provided serializer.\n   *\n   * @param serializer - The serializer instance used to serialize the signature.\n   * @throws Error if the signature type is unknown.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    if (this.publicKey instanceof Ed25519PublicKey) {\n      serializer.serializeU32AsUleb128(EphemeralPublicKeyVariant.Ed25519);\n      this.publicKey.serialize(serializer);\n    } else {\n      throw new Error(\"Unknown public key type\");\n    }\n  }\n\n  /**\n   * Deserializes an EphemeralSignature from the provided deserializer.\n   * This function allows you to retrieve an EphemeralSignature based on the deserialized data.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): EphemeralPublicKey {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case EphemeralPublicKeyVariant.Ed25519:\n        return new EphemeralPublicKey(Ed25519PublicKey.deserialize(deserializer));\n      default:\n        throw new Error(`Unknown variant index for EphemeralPublicKey: ${index}`);\n    }\n  }\n\n  /**\n   * Determines if the provided public key is an instance of `EphemeralPublicKey`.\n   *\n   * @param publicKey - The public key to check.\n   * @returns A boolean indicating whether the public key is an ephemeral type.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: PublicKey): publicKey is EphemeralPublicKey {\n    return publicKey instanceof EphemeralPublicKey;\n  }\n}\n\n/**\n * Represents ephemeral signatures used in Aptos Keyless accounts.\n *\n * These signatures are utilized within the KeylessSignature framework.\n * @group Implementation\n * @category Serialization\n */\nexport class EphemeralSignature extends Signature {\n  /**\n   * The signature signed by the private key of an EphemeralKeyPair\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signature: Signature;\n\n  constructor(signature: Signature) {\n    super();\n    const signatureType = signature.constructor.name;\n    switch (signatureType) {\n      case Ed25519Signature.name:\n        this.signature = signature;\n        break;\n      default:\n        throw new Error(`Unsupported signature for EphemeralSignature - ${signatureType}`);\n    }\n  }\n\n  /**\n   * Deserializes an ephemeral signature from a hexadecimal input.\n   * This function allows you to convert a hexadecimal representation of an ephemeral signature into its deserialized form for\n   * further processing.\n   *\n   * @param hexInput - The hexadecimal input representing the ephemeral signature.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromHex(hexInput: HexInput): EphemeralSignature {\n    const data = Hex.fromHexInput(hexInput);\n    const deserializer = new Deserializer(data.toUint8Array());\n    return EphemeralSignature.deserialize(deserializer);\n  }\n\n  serialize(serializer: Serializer): void {\n    if (this.signature instanceof Ed25519Signature) {\n      serializer.serializeU32AsUleb128(EphemeralSignatureVariant.Ed25519);\n      this.signature.serialize(serializer);\n    } else {\n      throw new Error(\"Unknown signature type\");\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): EphemeralSignature {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case EphemeralSignatureVariant.Ed25519:\n        return new EphemeralSignature(Ed25519Signature.deserialize(deserializer));\n      default:\n        throw new Error(`Unknown variant index for EphemeralSignature: ${index}`);\n    }\n  }\n}\n"],"mappings":";;;;;AAeO,IAAMA,CAAA,GAAN,MAAMC,CAAA,SAA2BC,CAAU;IAwBhDC,YAAYC,CAAA,EAAsB;MAChC,MAAM;MACN,IAAMC,CAAA,GAAgBD,CAAA,CAAUD,WAAA,CAAYG,IAAA;MAC5C,QAAQD,CAAA;QACN,KAAKE,CAAA,CAAiBD,IAAA;UACpB,KAAKE,SAAA,GAAYJ,CAAA,EACjB,KAAKK,OAAA,GAAU;UACf;QACF;UACE,MAAM,IAAIC,KAAA,CAAM,4CAA4CL,CAAa,EAAE,CAC/E;MAAA;IACF;IAYAM,gBAAgBP,CAAA,EAAqE;MACnF,IAAM;QAAEQ,OAAA,EAAAP,CAAA;QAASQ,SAAA,EAAAC;MAAU,IAAIV,CAAA;MAC/B,OAAO,KAAKI,SAAA,CAAUG,eAAA,CAAgB;QAAEC,OAAA,EAAAP,CAAA;QAASQ,SAAA,EAAWC,CAAA,CAAUD;MAAU,CAAC,CACnF;IAAA;IAEA,MAAME,qBAAqBX,CAAA,EAIN;MACnB,OAAO,KAAKO,eAAA,CAAgBP,CAAI,CAClC;IAAA;IAWAY,UAAUZ,CAAA,EAA8B;MACtC,IAAI,KAAKI,SAAA,YAAqBD,CAAA,EAC5BH,CAAA,CAAWa,qBAAA,EAAuD,GAClE,KAAKT,SAAA,CAAUQ,SAAA,CAAUZ,CAAU,OAEnC,MAAM,IAAIM,KAAA,CAAM,yBAAyB,CAE7C;IAAA;IAUA,OAAOQ,YAAYd,CAAA,EAAgD;MACjE,IAAMC,CAAA,GAAQD,CAAA,CAAae,uBAAA,CAAwB;MACnD,QAAQd,CAAA;QACN;UACE,OAAO,IAAIJ,CAAA,CAAmBM,CAAA,CAAiBW,WAAA,CAAYd,CAAY,CAAC;QAC1E;UACE,MAAM,IAAIM,KAAA,CAAM,iDAAiDL,CAAK,EAAE,CAC5E;MAAA;IACF;IAUA,OAAOe,YAAYhB,CAAA,EAAuD;MACxE,OAAOA,CAAA,YAAqBH,CAC9B;IAAA;EACF;EASaoB,CAAA,GAAN,MAAMpB,CAAA,SAA2BqB,CAAU;IAQhDnB,YAAYC,CAAA,EAAsB;MAChC,MAAM;MACN,IAAMC,CAAA,GAAgBD,CAAA,CAAUD,WAAA,CAAYG,IAAA;MAC5C,QAAQD,CAAA;QACN,KAAKkB,CAAA,CAAiBjB,IAAA;UACpB,KAAKO,SAAA,GAAYT,CAAA;UACjB;QACF;UACE,MAAM,IAAIM,KAAA,CAAM,kDAAkDL,CAAa,EAAE,CACrF;MAAA;IACF;IAWA,OAAOmB,QAAQpB,CAAA,EAAwC;MACrD,IAAMC,CAAA,GAAOoB,CAAA,CAAIC,YAAA,CAAatB,CAAQ;QAChCU,CAAA,GAAe,IAAIa,CAAA,CAAatB,CAAA,CAAKuB,YAAA,CAAa,CAAC;MACzD,OAAO3B,CAAA,CAAmBiB,WAAA,CAAYJ,CAAY,CACpD;IAAA;IAEAE,UAAUZ,CAAA,EAA8B;MACtC,IAAI,KAAKS,SAAA,YAAqBU,CAAA,EAC5BnB,CAAA,CAAWa,qBAAA,EAAuD,GAClE,KAAKJ,SAAA,CAAUG,SAAA,CAAUZ,CAAU,OAEnC,MAAM,IAAIM,KAAA,CAAM,wBAAwB,CAE5C;IAAA;IAEA,OAAOQ,YAAYd,CAAA,EAAgD;MACjE,IAAMC,CAAA,GAAQD,CAAA,CAAae,uBAAA,CAAwB;MACnD,QAAQd,CAAA;QACN;UACE,OAAO,IAAIJ,CAAA,CAAmBsB,CAAA,CAAiBL,WAAA,CAAYd,CAAY,CAAC;QAC1E;UACE,MAAM,IAAIM,KAAA,CAAM,iDAAiDL,CAAK,EAAE,CAC5E;MAAA;IACF;EACF;AAAA,SAAAL,CAAA,IAAAc,CAAA,EAAAO,CAAA,IAAAQ,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
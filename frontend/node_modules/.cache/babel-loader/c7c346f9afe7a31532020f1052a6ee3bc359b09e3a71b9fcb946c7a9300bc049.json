{"ast":null,"code":"import { b as o } from \"./chunk-RGKRCZ36.mjs\";\nimport { a as u, c as r } from \"./chunk-Q4W3WJ2U.mjs\";\nimport { e as t } from \"./chunk-ORMOQWWH.mjs\";\nimport { a as i } from \"./chunk-EBMEXURY.mjs\";\nvar c = class extends i {\n  constructor(e) {\n    super();\n    this.accountAddress = o.ONE;\n    this.moduleName = new r(\"account\");\n    this.structName = new r(\"RotationProofChallenge\");\n    this.sequenceNumber = new t(e.sequenceNumber), this.originator = e.originator, this.currentAuthKey = e.currentAuthKey, this.newPublicKey = u.U8(e.newPublicKey.toUint8Array());\n  }\n  serialize(e) {\n    e.serialize(this.accountAddress), e.serialize(this.moduleName), e.serialize(this.structName), e.serialize(this.sequenceNumber), e.serialize(this.originator), e.serialize(this.currentAuthKey), e.serialize(this.newPublicKey);\n  }\n};\nexport { c as a };","map":{"version":3,"names":["c","i","constructor","e","accountAddress","o","ONE","moduleName","r","structName","sequenceNumber","t","originator","currentAuthKey","newPublicKey","u","U8","toUint8Array","serialize","a"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\transactions\\instances\\rotationProofChallenge.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core/accountAddress\";\nimport { AnyNumber } from \"../../types\";\nimport { PublicKey } from \"../../core/crypto\";\nimport { MoveString, MoveVector, U64, U8 } from \"../../bcs\";\n\n/**\n * Represents a challenge required for the account owner to sign in order to rotate the authentication key.\n * @group Implementation\n * @category Transactions\n */\nexport class RotationProofChallenge extends Serializable {\n  // Resource account address\n  public readonly accountAddress: AccountAddress = AccountAddress.ONE;\n\n  // Module name, i.e: 0x1::account\n  public readonly moduleName: MoveString = new MoveString(\"account\");\n\n  // The rotation proof challenge struct name that live under the module\n  public readonly structName: MoveString = new MoveString(\"RotationProofChallenge\");\n\n  // Signer's address\n  public readonly originator: AccountAddress;\n\n  // Signer's current authentication key\n  public readonly currentAuthKey: AccountAddress;\n\n  // New public key to rotate to\n  public readonly newPublicKey: MoveVector<U8>;\n\n  // Sequence number of the account\n  public readonly sequenceNumber: U64;\n\n  /**\n   * Initializes a new instance of the class with the specified parameters.\n   * This constructor sets up the necessary attributes for managing account keys.\n   *\n   * @param args - The parameters required to create the instance.\n   * @param args.sequenceNumber - The sequence number associated with the transaction.\n   * @param args.originator - The account address of the originator.\n   * @param args.currentAuthKey - The current authentication key of the account.\n   * @param args.newPublicKey - The new public key to be set for the account.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(args: {\n    sequenceNumber: AnyNumber;\n    originator: AccountAddress;\n    currentAuthKey: AccountAddress;\n    newPublicKey: PublicKey;\n  }) {\n    super();\n    this.sequenceNumber = new U64(args.sequenceNumber);\n    this.originator = args.originator;\n    this.currentAuthKey = args.currentAuthKey;\n    this.newPublicKey = MoveVector.U8(args.newPublicKey.toUint8Array());\n  }\n\n  /**\n   * Serializes the properties of the current instance for transmission or storage.\n   * This function helps in converting the instance data into a format suitable for serialization.\n   *\n   * @param serializer - The serializer used to serialize the instance properties.\n   * @param serializer.accountAddress - The account address to serialize.\n   * @param serializer.moduleName - The module name to serialize.\n   * @param serializer.structName - The struct name to serialize.\n   * @param serializer.sequenceNumber - The sequence number to serialize.\n   * @param serializer.originator - The originator to serialize.\n   * @param serializer.currentAuthKey - The current authentication key to serialize.\n   * @param serializer.newPublicKey - The new public key to serialize.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.accountAddress);\n    serializer.serialize(this.moduleName);\n    serializer.serialize(this.structName);\n    serializer.serialize(this.sequenceNumber);\n    serializer.serialize(this.originator);\n    serializer.serialize(this.currentAuthKey);\n    serializer.serialize(this.newPublicKey);\n  }\n}\n"],"mappings":";;;;AAcO,IAAMA,CAAA,GAAN,cAAqCC,CAAa;EAkCvDC,YAAYC,CAAA,EAKT;IACD,MAAM;IAtCR,KAAgBC,cAAA,GAAiCC,CAAA,CAAeC,GAAA;IAGhE,KAAgBC,UAAA,GAAyB,IAAIC,CAAA,CAAW,SAAS;IAGjE,KAAgBC,UAAA,GAAyB,IAAID,CAAA,CAAW,wBAAwB;IAiC9E,KAAKE,cAAA,GAAiB,IAAIC,CAAA,CAAIR,CAAA,CAAKO,cAAc,GACjD,KAAKE,UAAA,GAAaT,CAAA,CAAKS,UAAA,EACvB,KAAKC,cAAA,GAAiBV,CAAA,CAAKU,cAAA,EAC3B,KAAKC,YAAA,GAAeC,CAAA,CAAWC,EAAA,CAAGb,CAAA,CAAKW,YAAA,CAAaG,YAAA,CAAa,CAAC,CACpE;EAAA;EAiBAC,UAAUf,CAAA,EAA8B;IACtCA,CAAA,CAAWe,SAAA,CAAU,KAAKd,cAAc,GACxCD,CAAA,CAAWe,SAAA,CAAU,KAAKX,UAAU,GACpCJ,CAAA,CAAWe,SAAA,CAAU,KAAKT,UAAU,GACpCN,CAAA,CAAWe,SAAA,CAAU,KAAKR,cAAc,GACxCP,CAAA,CAAWe,SAAA,CAAU,KAAKN,UAAU,GACpCT,CAAA,CAAWe,SAAA,CAAU,KAAKL,cAAc,GACxCV,CAAA,CAAWe,SAAA,CAAU,KAAKJ,YAAY,CACxC;EAAA;AACF;AAAA,SAAAd,CAAA,IAAAmB,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
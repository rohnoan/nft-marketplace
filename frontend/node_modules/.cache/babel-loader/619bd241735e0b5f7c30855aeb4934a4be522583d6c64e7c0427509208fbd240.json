{"ast":null,"code":"import { a as o, b as i, c as t, d as r, e as n } from \"./chunk-4RXKALLC.mjs\";\nimport { b as u, c as f } from \"./chunk-JCFTAG5Z.mjs\";\nimport l from \"@aptos-labs/aptos-client\";\nvar a = class {\n  constructor(e) {\n    if (e?.fullnode || e?.indexer || e?.faucet || e?.pepper || e?.prover) {\n      if (e?.network === \"custom\") console.info(\"Note: using CUSTOM network will require queries to lookup ChainId\");else if (!e?.network) throw new Error(\"Custom endpoints require a network to be specified\");\n    }\n    this.network = e?.network ?? \"devnet\", this.fullnode = e?.fullnode, this.faucet = e?.faucet, this.pepper = e?.pepper, this.prover = e?.prover, this.indexer = e?.indexer, this.client = e?.client ?? {\n      provider: l\n    }, this.clientConfig = e?.clientConfig ?? {}, this.fullnodeConfig = e?.fullnodeConfig ?? {}, this.indexerConfig = e?.indexerConfig ?? {}, this.faucetConfig = e?.faucetConfig ?? {}, this.transactionGenerationConfig = e?.transactionGenerationConfig ?? {}, this.pluginConfig = e?.pluginSettings ? {\n      ...e.pluginSettings,\n      IGNORE_TRANSACTION_SUBMITTER: !1\n    } : void 0;\n  }\n  getRequestUrl(e) {\n    switch (e) {\n      case \"Fullnode\":\n        if (this.fullnode !== void 0) return this.fullnode;\n        if (this.network === \"custom\") throw new Error(\"Please provide a custom full node url\");\n        return i[this.network];\n      case \"Faucet\":\n        if (this.faucet !== void 0) return this.faucet;\n        if (this.network === \"testnet\") throw new Error(\"There is no way to programmatically mint testnet APT, you must use the minting site at https://aptos.dev/network/faucet\");\n        if (this.network === \"mainnet\") throw new Error(\"There is no mainnet faucet\");\n        if (this.network === \"custom\") throw new Error(\"Please provide a custom faucet url\");\n        return t[this.network];\n      case \"Indexer\":\n        if (this.indexer !== void 0) return this.indexer;\n        if (this.network === \"custom\") throw new Error(\"Please provide a custom indexer url\");\n        return o[this.network];\n      case \"Pepper\":\n        if (this.pepper !== void 0) return this.pepper;\n        if (this.network === \"custom\") throw new Error(\"Please provide a custom pepper service url\");\n        return r[this.network];\n      case \"Prover\":\n        if (this.prover !== void 0) return this.prover;\n        if (this.network === \"custom\") throw new Error(\"Please provide a custom prover service url\");\n        return n[this.network];\n      default:\n        throw Error(`apiType ${e} is not supported`);\n    }\n  }\n  isPepperServiceRequest(e) {\n    return r[this.network] === e;\n  }\n  isProverServiceRequest(e) {\n    return n[this.network] === e;\n  }\n  getDefaultMaxGasAmount() {\n    return this.transactionGenerationConfig?.defaultMaxGasAmount ?? 2e5;\n  }\n  getDefaultTxnExpirySecFromNow() {\n    return this.transactionGenerationConfig?.defaultTxnExpirySecFromNow ?? 20;\n  }\n  setIgnoreTransactionSubmitter(e) {\n    this.pluginConfig && (this.pluginConfig.IGNORE_TRANSACTION_SUBMITTER = e);\n  }\n  getTransactionSubmitter() {\n    if (this.pluginConfig !== void 0 && this.pluginConfig.IGNORE_TRANSACTION_SUBMITTER !== !0) return this.pluginConfig.TRANSACTION_SUBMITTER;\n  }\n};\nexport { a };","map":{"version":3,"names":["l","a","constructor","e","fullnode","indexer","faucet","pepper","prover","network","console","info","Error","client","provider","clientConfig","fullnodeConfig","indexerConfig","faucetConfig","transactionGenerationConfig","pluginConfig","pluginSettings","IGNORE_TRANSACTION_SUBMITTER","getRequestUrl","i","t","o","r","n","isPepperServiceRequest","isProverServiceRequest","getDefaultMaxGasAmount","defaultMaxGasAmount","getDefaultTxnExpirySecFromNow","defaultTxnExpirySecFromNow","setIgnoreTransactionSubmitter","getTransactionSubmitter","TRANSACTION_SUBMITTER"],"sources":["C:\\Users\\ROHAN\\Desktop\\projects\\nft-marketplace\\frontend\\node_modules\\@aptos-labs\\ts-sdk\\src\\api\\aptosConfig.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport aptosClient from \"@aptos-labs/aptos-client\";\nimport {\n  AptosSettings,\n  ClientConfig,\n  Client,\n  FullNodeConfig,\n  IndexerConfig,\n  FaucetConfig,\n  TransactionGenerationConfig,\n  PluginConfig,\n  TransactionSubmitter,\n} from \"../types\";\nimport {\n  NetworkToNodeAPI,\n  NetworkToFaucetAPI,\n  NetworkToIndexerAPI,\n  Network,\n  NetworkToPepperAPI,\n  NetworkToProverAPI,\n} from \"../utils/apiEndpoints\";\nimport { AptosApiType, DEFAULT_MAX_GAS_AMOUNT, DEFAULT_TXN_EXP_SEC_FROM_NOW } from \"../utils/const\";\n\n/**\n * Represents the configuration settings for an Aptos SDK client instance.\n * This class allows customization of various endpoints and client settings.\n *\n * @example\n * ```typescript\n * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * async function runExample() {\n *     // Create a configuration for connecting to the Aptos testnet\n *     const config = new AptosConfig({ network: Network.TESTNET });\n *\n *     // Initialize the Aptos client with the configuration\n *     const aptos = new Aptos(config);\n *\n *     console.log(\"Aptos client initialized:\", aptos);\n * }\n * runExample().catch(console.error);\n * ```\n * @group Client\n */\nexport class AptosConfig {\n  /**\n   * The Network that this SDK is associated with. Defaults to DEVNET\n   * @group Client\n   */\n  readonly network: Network;\n\n  /**\n   * The client instance the SDK uses. Defaults to `@aptos-labs/aptos-client\n   * @group Client\n   */\n  readonly client: Client;\n\n  /**\n   * The optional hardcoded fullnode URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly fullnode?: string;\n\n  /**\n   * The optional hardcoded faucet URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly faucet?: string;\n\n  /**\n   * The optional hardcoded pepper service URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly pepper?: string;\n\n  /**\n   * The optional hardcoded prover service URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly prover?: string;\n\n  /**\n   * The optional hardcoded indexer URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly indexer?: string;\n\n  /**\n   * Optional client configurations\n   * @group Client\n   */\n  readonly clientConfig?: ClientConfig;\n\n  /**\n   * Optional specific Fullnode configurations\n   * @group Client\n   */\n  readonly fullnodeConfig?: FullNodeConfig;\n\n  /**\n   * Optional specific Indexer configurations\n   * @group Client\n   */\n  readonly indexerConfig?: IndexerConfig;\n\n  /**\n   * Optional specific Faucet configurations\n   * @group Client\n   */\n  readonly faucetConfig?: FaucetConfig;\n\n  /**\n   * Optional specific Transaction Generation configurations\n   * @group Client\n   */\n  readonly transactionGenerationConfig?: TransactionGenerationConfig;\n\n  /**\n   * Optional plugin config to override client behavior.\n   * @group Client\n   */\n  private pluginConfig?: PluginConfig;\n\n  /**\n   * Initializes an instance of the Aptos client with the specified settings.\n   * This allows users to configure various aspects of the client, such as network and endpoints.\n   *\n   * @param settings - Optional configuration settings for the Aptos client.\n   * @param settings.network - The network to connect to, defaults to `Network.DEVNET`.\n   * @param settings.fullnode - The fullnode endpoint to use for requests.\n   * @param settings.faucet - The faucet endpoint for obtaining test tokens.\n   * @param settings.pepper - The pepper used for transaction signing.\n   * @param settings.prover - The prover endpoint for transaction verification.\n   * @param settings.indexer - The indexer endpoint for querying blockchain data.\n   * @param settings.client - Custom client settings, defaults to a standard Aptos client.\n   * @param settings.clientConfig - Additional configuration for the client.\n   * @param settings.fullnodeConfig - Additional configuration for the fullnode.\n   * @param settings.indexerConfig - Additional configuration for the indexer.\n   * @param settings.faucetConfig - Additional configuration for the faucet.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with default settings\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify the network\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  constructor(settings?: AptosSettings) {\n    // If there are any endpoint overrides, they are custom networks, keep that in mind\n    if (settings?.fullnode || settings?.indexer || settings?.faucet || settings?.pepper || settings?.prover) {\n      if (settings?.network === Network.CUSTOM) {\n        console.info(\"Note: using CUSTOM network will require queries to lookup ChainId\");\n      } else if (!settings?.network) {\n        throw new Error(\"Custom endpoints require a network to be specified\");\n      }\n    }\n\n    this.network = settings?.network ?? Network.DEVNET;\n    this.fullnode = settings?.fullnode;\n    this.faucet = settings?.faucet;\n    this.pepper = settings?.pepper;\n    this.prover = settings?.prover;\n    this.indexer = settings?.indexer;\n    this.client = settings?.client ?? { provider: aptosClient };\n    this.clientConfig = settings?.clientConfig ?? {};\n    this.fullnodeConfig = settings?.fullnodeConfig ?? {};\n    this.indexerConfig = settings?.indexerConfig ?? {};\n    this.faucetConfig = settings?.faucetConfig ?? {};\n    this.transactionGenerationConfig = settings?.transactionGenerationConfig ?? {};\n    this.pluginConfig = settings?.pluginSettings\n      ? {\n          ...settings.pluginSettings,\n          IGNORE_TRANSACTION_SUBMITTER: false,\n        }\n      : undefined;\n  }\n\n  /**\n   * Returns the URL endpoint to send the request to based on the specified API type.\n   * If a custom URL was provided in the configuration, that URL is returned. Otherwise, the URL endpoint is derived from the network.\n   *\n   * @param apiType - The type of Aptos API to get the URL for. This can be one of the following: FULLNODE, FAUCET, INDEXER, PEPPER, PROVER.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, AptosApiType } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the request URL for the FULLNODE API\n   *   const url = config.getRequestUrl(AptosApiType.FULLNODE);\n   *   console.log(\"Request URL for FULLNODE:\", url);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  getRequestUrl(apiType: AptosApiType): string {\n    switch (apiType) {\n      case AptosApiType.FULLNODE:\n        if (this.fullnode !== undefined) return this.fullnode;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom full node url\");\n        return NetworkToNodeAPI[this.network];\n      case AptosApiType.FAUCET:\n        if (this.faucet !== undefined) return this.faucet;\n        if (this.network === Network.TESTNET) {\n          throw new Error(\n            \"There is no way to programmatically mint testnet APT, you must use the minting site at https://aptos.dev/network/faucet\",\n          );\n        }\n        if (this.network === Network.MAINNET) {\n          throw new Error(\"There is no mainnet faucet\");\n        }\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom faucet url\");\n        return NetworkToFaucetAPI[this.network];\n      case AptosApiType.INDEXER:\n        if (this.indexer !== undefined) return this.indexer;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom indexer url\");\n        return NetworkToIndexerAPI[this.network];\n      case AptosApiType.PEPPER:\n        if (this.pepper !== undefined) return this.pepper;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom pepper service url\");\n        return NetworkToPepperAPI[this.network];\n      case AptosApiType.PROVER:\n        if (this.prover !== undefined) return this.prover;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom prover service url\");\n        return NetworkToProverAPI[this.network];\n      default:\n        throw Error(`apiType ${apiType} is not supported`);\n    }\n  }\n\n  /**\n   * Checks if the provided URL is a known pepper service endpoint.\n   *\n   * @param url - The URL to check against the known pepper service endpoints.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     const url = \"https://example.pepper.service\"; // replace with a real pepper service URL\n   *\n   *     // Check if the URL is a known pepper service endpoint\n   *     const isPepperService = config.isPepperServiceRequest(url);\n   *\n   *     console.log(`Is the URL a known pepper service? ${isPepperService}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  isPepperServiceRequest(url: string): boolean {\n    return NetworkToPepperAPI[this.network] === url;\n  }\n\n  /**\n   * Checks if the provided URL is a known prover service endpoint.\n   *\n   * @param url - The URL to check against known prover service endpoints.\n   * @returns A boolean indicating whether the URL is a known prover service endpoint.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * // Check if the URL is a known prover service endpoint\n   * const url = \"https://prover.testnet.aptos.dev\"; // replace with a real URL if needed\n   * const isProver = config.isProverServiceRequest(url);\n   *\n   * console.log(`Is the URL a known prover service? ${isProver}`);\n   * ```\n   * @group Client\n   */\n  isProverServiceRequest(url: string): boolean {\n    return NetworkToProverAPI[this.network] === url;\n  }\n\n  getDefaultMaxGasAmount(): number {\n    return this.transactionGenerationConfig?.defaultMaxGasAmount ?? DEFAULT_MAX_GAS_AMOUNT;\n  }\n\n  getDefaultTxnExpirySecFromNow(): number {\n    return this.transactionGenerationConfig?.defaultTxnExpirySecFromNow ?? DEFAULT_TXN_EXP_SEC_FROM_NOW;\n  }\n\n  /**\n   * If you have set a custom transaction submitter, you can use this to determine\n   * whether to use it or not. For example, to stop using the transaction submitter:\n   *\n   * @example\n   * ```\n   * aptos.config.setIgnoreTransactionSubmitter(true);\n   * ```\n   *\n   * @group Client\n   */\n  setIgnoreTransactionSubmitter(ignore: boolean) {\n    if (this.pluginConfig) {\n      this.pluginConfig.IGNORE_TRANSACTION_SUBMITTER = ignore;\n    }\n  }\n\n  /**\n   * If a custom transaction submitter has been specified in the PluginConfig and\n   * IGNORE_TRANSACTION_SUBMITTER is false, this will return a transaction submitter\n   * that should be used instead of the default transaction submission behavior.\n   */\n  getTransactionSubmitter(): TransactionSubmitter | undefined {\n    if (this.pluginConfig === undefined) {\n      return undefined;\n    }\n\n    if (this.pluginConfig.IGNORE_TRANSACTION_SUBMITTER === true) {\n      return undefined;\n    }\n\n    return this.pluginConfig.TRANSACTION_SUBMITTER;\n  }\n}\n"],"mappings":";;AAGA,OAAOA,CAAA,MAAiB;AA2CjB,IAAMC,CAAA,GAAN,MAAkB;EA+GvBC,YAAYC,CAAA,EAA0B;IAEpC,IAAIA,CAAA,EAAUC,QAAA,IAAYD,CAAA,EAAUE,OAAA,IAAWF,CAAA,EAAUG,MAAA,IAAUH,CAAA,EAAUI,MAAA,IAAUJ,CAAA,EAAUK,MAAA;MAC/F,IAAIL,CAAA,EAAUM,OAAA,KAAY,UACxBC,OAAA,CAAQC,IAAA,CAAK,mEAAmE,WACvE,CAACR,CAAA,EAAUM,OAAA,EACpB,MAAM,IAAIG,KAAA,CAAM,oDAAoD;IAAA;IAIxE,KAAKH,OAAA,GAAUN,CAAA,EAAUM,OAAA,IAAW,UACpC,KAAKL,QAAA,GAAWD,CAAA,EAAUC,QAAA,EAC1B,KAAKE,MAAA,GAASH,CAAA,EAAUG,MAAA,EACxB,KAAKC,MAAA,GAASJ,CAAA,EAAUI,MAAA,EACxB,KAAKC,MAAA,GAASL,CAAA,EAAUK,MAAA,EACxB,KAAKH,OAAA,GAAUF,CAAA,EAAUE,OAAA,EACzB,KAAKQ,MAAA,GAASV,CAAA,EAAUU,MAAA,IAAU;MAAEC,QAAA,EAAUd;IAAY,GAC1D,KAAKe,YAAA,GAAeZ,CAAA,EAAUY,YAAA,IAAgB,CAAC,GAC/C,KAAKC,cAAA,GAAiBb,CAAA,EAAUa,cAAA,IAAkB,CAAC,GACnD,KAAKC,aAAA,GAAgBd,CAAA,EAAUc,aAAA,IAAiB,CAAC,GACjD,KAAKC,YAAA,GAAef,CAAA,EAAUe,YAAA,IAAgB,CAAC,GAC/C,KAAKC,2BAAA,GAA8BhB,CAAA,EAAUgB,2BAAA,IAA+B,CAAC,GAC7E,KAAKC,YAAA,GAAejB,CAAA,EAAUkB,cAAA,GAC1B;MACE,GAAGlB,CAAA,CAASkB,cAAA;MACZC,4BAAA,EAA8B;IAChC,IACA,MACN;EAAA;EAwBAC,cAAcpB,CAAA,EAA+B;IAC3C,QAAQA,CAAA;MACN;QACE,IAAI,KAAKC,QAAA,KAAa,QAAW,OAAO,KAAKA,QAAA;QAC7C,IAAI,KAAKK,OAAA,KAAY,UAAgB,MAAM,IAAIG,KAAA,CAAM,uCAAuC;QAC5F,OAAOY,CAAA,CAAiB,KAAKf,OAAO;MACtC;QACE,IAAI,KAAKH,MAAA,KAAW,QAAW,OAAO,KAAKA,MAAA;QAC3C,IAAI,KAAKG,OAAA,KAAY,WACnB,MAAM,IAAIG,KAAA,CACR,yHACF;QAEF,IAAI,KAAKH,OAAA,KAAY,WACnB,MAAM,IAAIG,KAAA,CAAM,4BAA4B;QAE9C,IAAI,KAAKH,OAAA,KAAY,UAAgB,MAAM,IAAIG,KAAA,CAAM,oCAAoC;QACzF,OAAOa,CAAA,CAAmB,KAAKhB,OAAO;MACxC;QACE,IAAI,KAAKJ,OAAA,KAAY,QAAW,OAAO,KAAKA,OAAA;QAC5C,IAAI,KAAKI,OAAA,KAAY,UAAgB,MAAM,IAAIG,KAAA,CAAM,qCAAqC;QAC1F,OAAOc,CAAA,CAAoB,KAAKjB,OAAO;MACzC;QACE,IAAI,KAAKF,MAAA,KAAW,QAAW,OAAO,KAAKA,MAAA;QAC3C,IAAI,KAAKE,OAAA,KAAY,UAAgB,MAAM,IAAIG,KAAA,CAAM,4CAA4C;QACjG,OAAOe,CAAA,CAAmB,KAAKlB,OAAO;MACxC;QACE,IAAI,KAAKD,MAAA,KAAW,QAAW,OAAO,KAAKA,MAAA;QAC3C,IAAI,KAAKC,OAAA,KAAY,UAAgB,MAAM,IAAIG,KAAA,CAAM,4CAA4C;QACjG,OAAOgB,CAAA,CAAmB,KAAKnB,OAAO;MACxC;QACE,MAAMG,KAAA,CAAM,WAAWT,CAAO,mBAAmB,CACrD;IAAA;EACF;EA0BA0B,uBAAuB1B,CAAA,EAAsB;IAC3C,OAAOwB,CAAA,CAAmB,KAAKlB,OAAO,MAAMN,CAC9C;EAAA;EAuBA2B,uBAAuB3B,CAAA,EAAsB;IAC3C,OAAOyB,CAAA,CAAmB,KAAKnB,OAAO,MAAMN,CAC9C;EAAA;EAEA4B,uBAAA,EAAiC;IAC/B,OAAO,KAAKZ,2BAAA,EAA6Ba,mBAAA,IAAuB,GAClE;EAAA;EAEAC,8BAAA,EAAwC;IACtC,OAAO,KAAKd,2BAAA,EAA6Be,0BAAA,IAA8B,EACzE;EAAA;EAaAC,8BAA8BhC,CAAA,EAAiB;IACzC,KAAKiB,YAAA,KACP,KAAKA,YAAA,CAAaE,4BAAA,GAA+BnB,CAAA,CAErD;EAAA;EAOAiC,wBAAA,EAA4D;IAC1D,IAAI,KAAKhB,YAAA,KAAiB,UAItB,KAAKA,YAAA,CAAaE,4BAAA,KAAiC,IAIvD,OAAO,KAAKF,YAAA,CAAaiB,qBAC3B;EAAA;AACF;AAAA,SAAApC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}